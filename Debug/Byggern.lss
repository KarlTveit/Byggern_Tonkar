
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  000024d4  00002568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800244  00800244  000026ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033bf  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001373  00000000  00000000  00005e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000220f  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008d0  00000000  00000000  0000939c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e2  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e40  00000000  00000000  0000a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000c48e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c1       	rjmp	.+680    	; 0x2aa <__ctors_end>
       2:	00 00       	nop
       4:	6f c1       	rjmp	.+734    	; 0x2e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c1       	rjmp	.+730    	; 0x2e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__vector_3>
       e:	00 00       	nop
      10:	69 c1       	rjmp	.+722    	; 0x2e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c1       	rjmp	.+718    	; 0x2e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c1       	rjmp	.+714    	; 0x2e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c1       	rjmp	.+710    	; 0x2e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c1       	rjmp	.+706    	; 0x2e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c1       	rjmp	.+702    	; 0x2e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c1       	rjmp	.+698    	; 0x2e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c1       	rjmp	.+694    	; 0x2e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c1       	rjmp	.+690    	; 0x2e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_13>
      38:	55 c1       	rjmp	.+682    	; 0x2e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c1       	rjmp	.+678    	; 0x2e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c1       	rjmp	.+674    	; 0x2e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c1       	rjmp	.+670    	; 0x2e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c1       	rjmp	.+666    	; 0x2e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_19>
      50:	49 c1       	rjmp	.+658    	; 0x2e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c1       	rjmp	.+654    	; 0x2e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c1       	rjmp	.+650    	; 0x2e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c1       	rjmp	.+646    	; 0x2e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c1       	rjmp	.+642    	; 0x2e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c1       	rjmp	.+638    	; 0x2e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c1       	rjmp	.+634    	; 0x2e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c1       	rjmp	.+630    	; 0x2e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 00       	.word	0x0008	; ????
      72:	00 00       	nop
      74:	be 92       	st	-X, r11
      76:	24 49       	sbci	r18, 0x94	; 148
      78:	12 3e       	cpi	r17, 0xE2	; 226
      7a:	ab aa       	std	Y+51, r10	; 0x33
      7c:	aa 2a       	or	r10, r26
      7e:	be cd       	rjmp	.-1156   	; 0xfffffbfc <__eeprom_end+0xff7efbfc>
      80:	cc cc       	rjmp	.-1640   	; 0xfffffa1a <__eeprom_end+0xff7efa1a>
      82:	4c 3e       	cpi	r20, 0xEC	; 236
      84:	00 00       	nop
      86:	00 80       	ld	r0, Z
      88:	be ab       	std	Y+54, r27	; 0x36
      8a:	aa aa       	std	Y+50, r10	; 0x32
      8c:	aa 3e       	cpi	r26, 0xEA	; 234
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	bf 00       	.word	0x00bf	; ????
      94:	00 00       	nop
      96:	80 3f       	cpi	r24, 0xF0	; 240
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 08       	sbc	r0, r0
      9e:	41 78       	andi	r20, 0x81	; 129
      a0:	d3 bb       	out	0x13, r29	; 19
      a2:	43 87       	std	Z+11, r20	; 0x0b
      a4:	d1 13       	cpse	r29, r17
      a6:	3d 19       	sub	r19, r13
      a8:	0e 3c       	cpi	r16, 0xCE	; 206
      aa:	c3 bd       	out	0x23, r28	; 35
      ac:	42 82       	std	Z+2, r4	; 0x02
      ae:	ad 2b       	or	r26, r29
      b0:	3e 68       	ori	r19, 0x8E	; 142
      b2:	ec 82       	std	Y+4, r14	; 0x04
      b4:	76 be       	out	0x36, r7	; 54
      b6:	d9 8f       	std	Y+25, r29	; 0x19
      b8:	e1 a9       	ldd	r30, Z+49	; 0x31
      ba:	3e 4c       	sbci	r19, 0xCE	; 206
      bc:	80 ef       	ldi	r24, 0xF0	; 240
      be:	ff be       	out	0x3f, r15	; 63
      c0:	01 c4       	rjmp	.+2050   	; 0x8c4 <MENU_choose+0xc>
      c2:	ff 7f       	andi	r31, 0xFF	; 255
      c4:	3f 00       	.word	0x003f	; ????
      c6:	00 00       	nop
	...

000000ca <__trampolines_end>:
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 5f       	subi	r16, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 07       	cpc	r16, r16
      d6:	00 07       	cpc	r16, r16
      d8:	00 14       	cp	r0, r0
      da:	7f 14       	cp	r7, r15
      dc:	7f 14       	cp	r7, r15
      de:	24 2a       	or	r2, r20
      e0:	7f 2a       	or	r7, r31
      e2:	12 23       	and	r17, r18
      e4:	13 08       	sbc	r1, r3
      e6:	64 62       	ori	r22, 0x24	; 36
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	55 22       	and	r5, r21
      ec:	50 00       	.word	0x0050	; ????
      ee:	05 03       	mulsu	r16, r21
      f0:	00 00       	nop
      f2:	00 1c       	adc	r0, r0
      f4:	22 41       	sbci	r18, 0x12	; 18
      f6:	00 00       	nop
      f8:	41 22       	and	r4, r17
      fa:	1c 00       	.word	0x001c	; ????
      fc:	08 2a       	or	r0, r24
      fe:	1c 2a       	or	r1, r28
     100:	08 08       	sbc	r0, r8
     102:	08 3e       	cpi	r16, 0xE8	; 232
     104:	08 08       	sbc	r0, r8
     106:	00 50       	subi	r16, 0x00	; 0
     108:	30 00       	.word	0x0030	; ????
     10a:	00 08       	sbc	r0, r0
     10c:	08 08       	sbc	r0, r8
     10e:	08 08       	sbc	r0, r8
     110:	00 60       	ori	r16, 0x00	; 0
     112:	60 00       	.word	0x0060	; ????
     114:	00 20       	and	r0, r0
     116:	10 08       	sbc	r1, r0
     118:	04 02       	muls	r16, r20
     11a:	3e 51       	subi	r19, 0x1E	; 30
     11c:	49 45       	sbci	r20, 0x59	; 89
     11e:	3e 00       	.word	0x003e	; ????
     120:	42 7f       	andi	r20, 0xF2	; 242
     122:	40 00       	.word	0x0040	; ????
     124:	42 61       	ori	r20, 0x12	; 18
     126:	51 49       	sbci	r21, 0x91	; 145
     128:	46 21       	and	r20, r6
     12a:	41 45       	sbci	r20, 0x51	; 81
     12c:	4b 31       	cpi	r20, 0x1B	; 27
     12e:	18 14       	cp	r1, r8
     130:	12 7f       	andi	r17, 0xF2	; 242
     132:	10 27       	eor	r17, r16
     134:	45 45       	sbci	r20, 0x55	; 85
     136:	45 39       	cpi	r20, 0x95	; 149
     138:	3c 4a       	sbci	r19, 0xAC	; 172
     13a:	49 49       	sbci	r20, 0x99	; 153
     13c:	30 01       	movw	r6, r0
     13e:	71 09       	sbc	r23, r1
     140:	05 03       	mulsu	r16, r21
     142:	36 49       	sbci	r19, 0x96	; 150
     144:	49 49       	sbci	r20, 0x99	; 153
     146:	36 06       	cpc	r3, r22
     148:	49 49       	sbci	r20, 0x99	; 153
     14a:	29 1e       	adc	r2, r25
     14c:	00 36       	cpi	r16, 0x60	; 96
     14e:	36 00       	.word	0x0036	; ????
     150:	00 00       	nop
     152:	56 36       	cpi	r21, 0x66	; 102
     154:	00 00       	nop
     156:	00 08       	sbc	r0, r0
     158:	14 22       	and	r1, r20
     15a:	41 14       	cp	r4, r1
     15c:	14 14       	cp	r1, r4
     15e:	14 14       	cp	r1, r4
     160:	41 22       	and	r4, r17
     162:	14 08       	sbc	r1, r4
     164:	00 02       	muls	r16, r16
     166:	01 51       	subi	r16, 0x11	; 17
     168:	09 06       	cpc	r0, r25
     16a:	32 49       	sbci	r19, 0x92	; 146
     16c:	79 41       	sbci	r23, 0x19	; 25
     16e:	3e 7e       	andi	r19, 0xEE	; 238
     170:	11 11       	cpse	r17, r1
     172:	11 7e       	andi	r17, 0xE1	; 225
     174:	7f 49       	sbci	r23, 0x9F	; 159
     176:	49 49       	sbci	r20, 0x99	; 153
     178:	36 3e       	cpi	r19, 0xE6	; 230
     17a:	41 41       	sbci	r20, 0x11	; 17
     17c:	41 22       	and	r4, r17
     17e:	7f 41       	sbci	r23, 0x1F	; 31
     180:	41 22       	and	r4, r17
     182:	1c 7f       	andi	r17, 0xFC	; 252
     184:	49 49       	sbci	r20, 0x99	; 153
     186:	49 41       	sbci	r20, 0x19	; 25
     188:	7f 09       	sbc	r23, r15
     18a:	09 01       	movw	r0, r18
     18c:	01 3e       	cpi	r16, 0xE1	; 225
     18e:	41 41       	sbci	r20, 0x11	; 17
     190:	51 32       	cpi	r21, 0x21	; 33
     192:	7f 08       	sbc	r7, r15
     194:	08 08       	sbc	r0, r8
     196:	7f 00       	.word	0x007f	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	41 00       	.word	0x0041	; ????
     19c:	20 40       	sbci	r18, 0x00	; 0
     19e:	41 3f       	cpi	r20, 0xF1	; 241
     1a0:	01 7f       	andi	r16, 0xF1	; 241
     1a2:	08 14       	cp	r0, r8
     1a4:	22 41       	sbci	r18, 0x12	; 18
     1a6:	7f 40       	sbci	r23, 0x0F	; 15
     1a8:	40 40       	sbci	r20, 0x00	; 0
     1aa:	40 7f       	andi	r20, 0xF0	; 240
     1ac:	02 04       	cpc	r0, r2
     1ae:	02 7f       	andi	r16, 0xF2	; 242
     1b0:	7f 04       	cpc	r7, r15
     1b2:	08 10       	cpse	r0, r8
     1b4:	7f 3e       	cpi	r23, 0xEF	; 239
     1b6:	41 41       	sbci	r20, 0x11	; 17
     1b8:	41 3e       	cpi	r20, 0xE1	; 225
     1ba:	7f 09       	sbc	r23, r15
     1bc:	09 09       	sbc	r16, r9
     1be:	06 3e       	cpi	r16, 0xE6	; 230
     1c0:	41 51       	subi	r20, 0x11	; 17
     1c2:	21 5e       	subi	r18, 0xE1	; 225
     1c4:	7f 09       	sbc	r23, r15
     1c6:	19 29       	or	r17, r9
     1c8:	46 46       	sbci	r20, 0x66	; 102
     1ca:	49 49       	sbci	r20, 0x99	; 153
     1cc:	49 31       	cpi	r20, 0x19	; 25
     1ce:	01 01       	movw	r0, r2
     1d0:	7f 01       	movw	r14, r30
     1d2:	01 3f       	cpi	r16, 0xF1	; 241
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	40 3f       	cpi	r20, 0xF0	; 240
     1d8:	1f 20       	and	r1, r15
     1da:	40 20       	and	r4, r0
     1dc:	1f 7f       	andi	r17, 0xFF	; 255
     1de:	20 18       	sub	r2, r0
     1e0:	20 7f       	andi	r18, 0xF0	; 240
     1e2:	63 14       	cp	r6, r3
     1e4:	08 14       	cp	r0, r8
     1e6:	63 03       	mulsu	r22, r19
     1e8:	04 78       	andi	r16, 0x84	; 132
     1ea:	04 03       	mulsu	r16, r20
     1ec:	61 51       	subi	r22, 0x11	; 17
     1ee:	49 45       	sbci	r20, 0x59	; 89
     1f0:	43 00       	.word	0x0043	; ????
     1f2:	00 7f       	andi	r16, 0xF0	; 240
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	02 04       	cpc	r0, r2
     1f8:	08 10       	cpse	r0, r8
     1fa:	20 41       	sbci	r18, 0x10	; 16
     1fc:	41 7f       	andi	r20, 0xF1	; 241
     1fe:	00 00       	nop
     200:	04 02       	muls	r16, r20
     202:	01 02       	muls	r16, r17
     204:	04 40       	sbci	r16, 0x04	; 4
     206:	40 40       	sbci	r20, 0x00	; 0
     208:	40 40       	sbci	r20, 0x00	; 0
     20a:	00 01       	movw	r0, r0
     20c:	02 04       	cpc	r0, r2
     20e:	00 20       	and	r0, r0
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 78       	andi	r21, 0x84	; 132
     214:	7f 48       	sbci	r23, 0x8F	; 143
     216:	44 44       	sbci	r20, 0x44	; 68
     218:	38 38       	cpi	r19, 0x88	; 136
     21a:	44 44       	sbci	r20, 0x44	; 68
     21c:	44 20       	and	r4, r4
     21e:	38 44       	sbci	r19, 0x48	; 72
     220:	44 48       	sbci	r20, 0x84	; 132
     222:	7f 38       	cpi	r23, 0x8F	; 143
     224:	54 54       	subi	r21, 0x44	; 68
     226:	54 18       	sub	r5, r4
     228:	08 7e       	andi	r16, 0xE8	; 232
     22a:	09 01       	movw	r0, r18
     22c:	02 08       	sbc	r0, r2
     22e:	14 54       	subi	r17, 0x44	; 68
     230:	54 3c       	cpi	r21, 0xC4	; 196
     232:	7f 08       	sbc	r7, r15
     234:	04 04       	cpc	r0, r4
     236:	78 00       	.word	0x0078	; ????
     238:	44 7d       	andi	r20, 0xD4	; 212
     23a:	40 00       	.word	0x0040	; ????
     23c:	20 40       	sbci	r18, 0x00	; 0
     23e:	44 3d       	cpi	r20, 0xD4	; 212
     240:	00 00       	nop
     242:	7f 10       	cpse	r7, r15
     244:	28 44       	sbci	r18, 0x48	; 72
     246:	00 41       	sbci	r16, 0x10	; 16
     248:	7f 40       	sbci	r23, 0x0F	; 15
     24a:	00 7c       	andi	r16, 0xC0	; 192
     24c:	04 18       	sub	r0, r4
     24e:	04 78       	andi	r16, 0x84	; 132
     250:	7c 08       	sbc	r7, r12
     252:	04 04       	cpc	r0, r4
     254:	78 38       	cpi	r23, 0x88	; 136
     256:	44 44       	sbci	r20, 0x44	; 68
     258:	44 38       	cpi	r20, 0x84	; 132
     25a:	7c 14       	cp	r7, r12
     25c:	14 14       	cp	r1, r4
     25e:	08 08       	sbc	r0, r8
     260:	14 14       	cp	r1, r4
     262:	18 7c       	andi	r17, 0xC8	; 200
     264:	7c 08       	sbc	r7, r12
     266:	04 04       	cpc	r0, r4
     268:	08 48       	sbci	r16, 0x88	; 136
     26a:	54 54       	subi	r21, 0x44	; 68
     26c:	54 20       	and	r5, r4
     26e:	04 3f       	cpi	r16, 0xF4	; 244
     270:	44 40       	sbci	r20, 0x04	; 4
     272:	20 3c       	cpi	r18, 0xC0	; 192
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	20 7c       	andi	r18, 0xC0	; 192
     278:	1c 20       	and	r1, r12
     27a:	40 20       	and	r4, r0
     27c:	1c 3c       	cpi	r17, 0xCC	; 204
     27e:	40 30       	cpi	r20, 0x00	; 0
     280:	40 3c       	cpi	r20, 0xC0	; 192
     282:	44 28       	or	r4, r4
     284:	10 28       	or	r1, r0
     286:	44 0c       	add	r4, r4
     288:	50 50       	subi	r21, 0x00	; 0
     28a:	50 3c       	cpi	r21, 0xC0	; 192
     28c:	44 64       	ori	r20, 0x44	; 68
     28e:	54 4c       	sbci	r21, 0xC4	; 196
     290:	44 00       	.word	0x0044	; ????
     292:	08 36       	cpi	r16, 0x68	; 104
     294:	41 00       	.word	0x0041	; ????
     296:	00 00       	nop
     298:	7f 00       	.word	0x007f	; ????
     29a:	00 00       	nop
     29c:	41 36       	cpi	r20, 0x61	; 97
     29e:	08 00       	.word	0x0008	; ????
     2a0:	0c 12       	cpse	r0, r28
     2a2:	24 12       	cpse	r2, r20
     2a4:	0c 0c       	add	r0, r12
     2a6:	12 24       	eor	r1, r2
     2a8:	12 0c       	add	r1, r2

000002aa <__ctors_end>:
     2aa:	11 24       	eor	r1, r1
     2ac:	1f be       	out	0x3f, r1	; 63
     2ae:	cf ef       	ldi	r28, 0xFF	; 255
     2b0:	d4 e0       	ldi	r29, 0x04	; 4
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	cd bf       	out	0x3d, r28	; 61

000002b6 <__do_copy_data>:
     2b6:	12 e0       	ldi	r17, 0x02	; 2
     2b8:	a0 e0       	ldi	r26, 0x00	; 0
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	e4 ed       	ldi	r30, 0xD4	; 212
     2be:	f4 e2       	ldi	r31, 0x24	; 36
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__do_copy_data+0x10>
     2c2:	05 90       	lpm	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	a4 34       	cpi	r26, 0x44	; 68
     2c8:	b1 07       	cpc	r27, r17
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <__do_copy_data+0xc>

000002cc <__do_clear_bss>:
     2cc:	22 e0       	ldi	r18, 0x02	; 2
     2ce:	a4 e4       	ldi	r26, 0x44	; 68
     2d0:	b2 e0       	ldi	r27, 0x02	; 2
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <.do_clear_bss_start>

000002d4 <.do_clear_bss_loop>:
     2d4:	1d 92       	st	X+, r1

000002d6 <.do_clear_bss_start>:
     2d6:	ac 36       	cpi	r26, 0x6C	; 108
     2d8:	b2 07       	cpc	r27, r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <.do_clear_bss_loop>
     2dc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <main>
     2e0:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

000002e4 <__bad_interrupt>:
     2e4:	8d ce       	rjmp	.-742    	; 0x0 <__vectors>

000002e6 <ADC_init>:



void ADC_init(void){
	// enable external reset
	MCUCR |= (1 << SRE);
     2e6:	85 b7       	in	r24, 0x35	; 53
     2e8:	80 68       	ori	r24, 0x80	; 128
     2ea:	85 bf       	out	0x35, r24	; 53
	
	DDRE &= ~(1<<PINE0);
     2ec:	30 98       	cbi	0x06, 0	; 6
		
	// mask pins, s. 32 i datablad atmega162
	SFIOR |= (1 << XMM2);
     2ee:	80 b7       	in	r24, 0x30	; 48
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 bf       	out	0x30, r24	; 48
		
	//interrupt on falling edge PE0
	EMCUCR &= ~(1<<ISC2);
     2f4:	86 b7       	in	r24, 0x36	; 54
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	86 bf       	out	0x36, r24	; 54
	
	//Enable interrupts on PE0
	GICR |= (1<<INT2);
     2fa:	8b b7       	in	r24, 0x3b	; 59
     2fc:	80 62       	ori	r24, 0x20	; 32
     2fe:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     300:	78 94       	sei
     302:	08 95       	ret

00000304 <ADC_read>:

uint8_t ADC_read(channel ch){
	//venter til interrupt 
	
	volatile char *ext_ADCCH = (char *) ADC_START_ADDRESS;// starter addressen til adc
	ext_ADCCH[0] = ch; // *ext_ADC = ch
     304:	80 93 00 14 	sts	0x1400, r24
	
	
	while (PINE & (1<<PINE0)) {}
     308:	28 99       	sbic	0x05, 0	; 5
     30a:	fe cf       	rjmp	.-4      	; 0x308 <ADC_read+0x4>
	interrupt_flag = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 61 02 	sts	0x0261, r24

	
	return ext_ADCCH[0];	
     312:	80 91 00 14 	lds	r24, 0x1400
}
     316:	08 95       	ret

00000318 <__vector_3>:




ISR(INT2_vect){
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
	interrupt_flag = 0;
     322:	10 92 61 02 	sts	0x0261, r1
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <CAN_init>:
	for (uint8_t i = 0; i < message.length; i++) {
		printf("%d ", message.data[i]);
	}
	printf("\n\n");
	
}
     330:	73 d1       	rcall	.+742    	; 0x618 <MCP2515_init>
     332:	40 e6       	ldi	r20, 0x60	; 96
     334:	64 e6       	ldi	r22, 0x64	; 100
     336:	80 e6       	ldi	r24, 0x60	; 96
     338:	56 d1       	rcall	.+684    	; 0x5e6 <MCP2515_bit_modify>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	60 ee       	ldi	r22, 0xE0	; 224
     33e:	8f e0       	ldi	r24, 0x0F	; 15
     340:	52 d1       	rcall	.+676    	; 0x5e6 <MCP2515_bit_modify>
     342:	40 e6       	ldi	r20, 0x60	; 96
     344:	60 e6       	ldi	r22, 0x60	; 96
     346:	80 e6       	ldi	r24, 0x60	; 96
     348:	4e c1       	rjmp	.+668    	; 0x5e6 <MCP2515_bit_modify>
     34a:	08 95       	ret

0000034c <CAN_send_message>:
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	ec 01       	movw	r28, r24
     354:	80 e3       	ldi	r24, 0x30	; 48
     356:	14 d1       	rcall	.+552    	; 0x580 <MCP2515_read>
     358:	83 fd       	sbrc	r24, 3
     35a:	22 c0       	rjmp	.+68     	; 0x3a0 <CAN_send_message+0x54>
     35c:	88 81       	ld	r24, Y
     35e:	99 81       	ldd	r25, Y+1	; 0x01
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	96 95       	lsr	r25
     366:	87 95       	ror	r24
     368:	96 95       	lsr	r25
     36a:	87 95       	ror	r24
     36c:	61 e3       	ldi	r22, 0x31	; 49
     36e:	15 d1       	rcall	.+554    	; 0x59a <MCP2515_write>
     370:	88 81       	ld	r24, Y
     372:	62 e3       	ldi	r22, 0x32	; 50
     374:	82 95       	swap	r24
     376:	88 0f       	add	r24, r24
     378:	80 7e       	andi	r24, 0xE0	; 224
     37a:	0f d1       	rcall	.+542    	; 0x59a <MCP2515_write>
     37c:	65 e3       	ldi	r22, 0x35	; 53
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	0c d1       	rcall	.+536    	; 0x59a <MCP2515_write>
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 23       	and	r24, r24
     386:	61 f0       	breq	.+24     	; 0x3a0 <CAN_send_message+0x54>
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	66 e3       	ldi	r22, 0x36	; 54
     38c:	61 0f       	add	r22, r17
     38e:	fe 01       	movw	r30, r28
     390:	e1 0f       	add	r30, r17
     392:	f1 1d       	adc	r31, r1
     394:	83 81       	ldd	r24, Z+3	; 0x03
     396:	01 d1       	rcall	.+514    	; 0x59a <MCP2515_write>
     398:	1f 5f       	subi	r17, 0xFF	; 255
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	18 17       	cp	r17, r24
     39e:	a8 f3       	brcs	.-22     	; 0x38a <CAN_send_message+0x3e>
     3a0:	81 e8       	ldi	r24, 0x81	; 129
     3a2:	0a d1       	rcall	.+532    	; 0x5b8 <MCP2515_request_to_send>
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	08 95       	ret

000003ac <CAN_recieve_data>:
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	8c e2       	ldi	r24, 0x2C	; 44
     3b6:	e4 d0       	rcall	.+456    	; 0x580 <MCP2515_read>
     3b8:	80 ff       	sbrs	r24, 0
     3ba:	2f c0       	rjmp	.+94     	; 0x41a <CAN_recieve_data+0x6e>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 ef       	ldi	r25, 0xF0	; 240
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <CAN_recieve_data+0x14>
     3c4:	81 e6       	ldi	r24, 0x61	; 97
     3c6:	dc d0       	rcall	.+440    	; 0x580 <MCP2515_read>
     3c8:	18 2f       	mov	r17, r24
     3ca:	82 e6       	ldi	r24, 0x62	; 98
     3cc:	d9 d0       	rcall	.+434    	; 0x580 <MCP2515_read>
     3ce:	48 2f       	mov	r20, r24
     3d0:	42 95       	swap	r20
     3d2:	46 95       	lsr	r20
     3d4:	47 70       	andi	r20, 0x07	; 7
     3d6:	21 2f       	mov	r18, r17
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	c9 01       	movw	r24, r18
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	84 2b       	or	r24, r20
     3ea:	99 83       	std	Y+1, r25	; 0x01
     3ec:	88 83       	st	Y, r24
     3ee:	85 e6       	ldi	r24, 0x65	; 101
     3f0:	c7 d0       	rcall	.+398    	; 0x580 <MCP2515_read>
     3f2:	87 70       	andi	r24, 0x07	; 7
     3f4:	8a 83       	std	Y+2, r24	; 0x02
     3f6:	88 23       	and	r24, r24
     3f8:	61 f0       	breq	.+24     	; 0x412 <CAN_recieve_data+0x66>
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	86 e6       	ldi	r24, 0x66	; 102
     3fe:	81 0f       	add	r24, r17
     400:	bf d0       	rcall	.+382    	; 0x580 <MCP2515_read>
     402:	fe 01       	movw	r30, r28
     404:	e1 0f       	add	r30, r17
     406:	f1 1d       	adc	r31, r1
     408:	83 83       	std	Z+3, r24	; 0x03
     40a:	1f 5f       	subi	r17, 0xFF	; 255
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	18 17       	cp	r17, r24
     410:	a8 f3       	brcs	.-22     	; 0x3fc <CAN_recieve_data+0x50>
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	8c e2       	ldi	r24, 0x2C	; 44
     418:	e6 d0       	rcall	.+460    	; 0x5e6 <MCP2515_bit_modify>
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <CAN_create_message>:


can_message_t* CAN_create_message(can_message_t* message, uint16_t id, uint8_t length, uint8_t data[]) {
	
	message->id = id;
     422:	fc 01       	movw	r30, r24
     424:	71 83       	std	Z+1, r23	; 0x01
     426:	60 83       	st	Z, r22
	message->length = length;
     428:	42 83       	std	Z+2, r20	; 0x02
	
	for (uint8_t i = 0; i < message->length; i = i+1) {
     42a:	44 23       	and	r20, r20
     42c:	59 f0       	breq	.+22     	; 0x444 <CAN_create_message+0x22>
     42e:	52 2f       	mov	r21, r18
     430:	dc 01       	movw	r26, r24
     432:	13 96       	adiw	r26, 0x03	; 3
     434:	e2 2f       	mov	r30, r18
     436:	f3 2f       	mov	r31, r19
		message->data[i] = data[i];
     438:	21 91       	ld	r18, Z+
     43a:	2d 93       	st	X+, r18
     43c:	2e 2f       	mov	r18, r30
     43e:	25 1b       	sub	r18, r21
can_message_t* CAN_create_message(can_message_t* message, uint16_t id, uint8_t length, uint8_t data[]) {
	
	message->id = id;
	message->length = length;
	
	for (uint8_t i = 0; i < message->length; i = i+1) {
     440:	24 17       	cp	r18, r20
     442:	d0 f3       	brcs	.-12     	; 0x438 <CAN_create_message+0x16>
		message->data[i] = data[i];
	}
	
	return message;
}
     444:	08 95       	ret

00000446 <EEPROM_write>:
#include "eeprom.h"

void EEPROM_write(uint8_t address, uint8_t data){
	
	//waiting until write enable is set
	while(EECR & (1<<EEWE)){} 
     446:	e1 99       	sbic	0x1c, 1	; 28
     448:	fe cf       	rjmp	.-4      	; 0x446 <EEPROM_write>
		
	//setting address register
	EEAR = address;	
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9f bb       	out	0x1f, r25	; 31
     44e:	8e bb       	out	0x1e, r24	; 30
		
	//setting data register
	EEDR = data;
     450:	6d bb       	out	0x1d, r22	; 29
	
	//master wrte enable			
	EECR |= (1<<EEMWE);			
     452:	e2 9a       	sbi	0x1c, 2	; 28
	
	//start EEPROM write
	EECR |= (1<<EEWE);
     454:	e1 9a       	sbi	0x1c, 1	; 28
     456:	08 95       	ret

00000458 <EEPROM_read>:
				

char* EEPROM_read(uint8_t address){
	
	//waiting until read enable
	while (EECR & (1 << EEWE)); 
     458:	e1 99       	sbic	0x1c, 1	; 28
     45a:	fe cf       	rjmp	.-4      	; 0x458 <EEPROM_read>
	
	EEAR = address;
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	9f bb       	out	0x1f, r25	; 31
     460:	8e bb       	out	0x1e, r24	; 30
	
	//reading address				
	EECR |= (1<<EERE);
     462:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     464:	8d b3       	in	r24, 0x1d	; 29
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <JOY_init>:

void JOY_calibrate(){
	
	corr_x = 0 - ADC_read(joyX) -127;
	corr_y = 0 - ADC_read(joyY)- 127;
}
     46a:	3d df       	rcall	.-390    	; 0x2e6 <ADC_init>
     46c:	b8 98       	cbi	0x17, 0	; 23
     46e:	b9 98       	cbi	0x17, 1	; 23
     470:	ba 98       	cbi	0x17, 2	; 23
     472:	c2 9a       	sbi	0x18, 2	; 24
     474:	08 95       	ret

00000476 <JOY_getPosition>:



JOY_position_t JOY_getPosition(void) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
	JOY_position_t pos;
	
	//reading ADC and scaling to 8-bit
	pos.X = (int)((ADC_read(joyX)*0.7874)) + corr_x - 100;
     47a:	85 e0       	ldi	r24, 0x05	; 5
     47c:	43 df       	rcall	.-378    	; 0x304 <ADC_read>
     47e:	68 2f       	mov	r22, r24
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 38 0b 	call	0x1670	; 0x1670 <__floatsisf>
     48a:	2c e0       	ldi	r18, 0x0C	; 12
     48c:	33 e9       	ldi	r19, 0x93	; 147
     48e:	49 e4       	ldi	r20, 0x49	; 73
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__mulsf3>
     496:	0e 94 05 0b 	call	0x160a	; 0x160a <__fixsfsi>
     49a:	c0 91 45 02 	lds	r28, 0x0245
     49e:	dd 27       	eor	r29, r29
     4a0:	c7 fd       	sbrc	r28, 7
     4a2:	d0 95       	com	r29
     4a4:	6c 0f       	add	r22, r28
     4a6:	7d 1f       	adc	r23, r29
     4a8:	eb 01       	movw	r28, r22
     4aa:	c4 56       	subi	r28, 0x64	; 100
     4ac:	d1 09       	sbc	r29, r1
	pos.Y = (int) ((ADC_read(joyY)*0.7874)) + corr_y - 100;
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	29 df       	rcall	.-430    	; 0x304 <ADC_read>
     4b2:	68 2f       	mov	r22, r24
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 38 0b 	call	0x1670	; 0x1670 <__floatsisf>
     4be:	2c e0       	ldi	r18, 0x0C	; 12
     4c0:	33 e9       	ldi	r19, 0x93	; 147
     4c2:	49 e4       	ldi	r20, 0x49	; 73
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__mulsf3>
     4ca:	0e 94 05 0b 	call	0x160a	; 0x160a <__fixsfsi>
     4ce:	20 91 44 02 	lds	r18, 0x0244
     4d2:	33 27       	eor	r19, r19
     4d4:	27 fd       	sbrc	r18, 7
     4d6:	30 95       	com	r19
     4d8:	26 0f       	add	r18, r22
     4da:	37 1f       	adc	r19, r23
	
	
	return pos;
     4dc:	be 01       	movw	r22, r28
     4de:	c9 01       	movw	r24, r18
     4e0:	84 56       	subi	r24, 0x64	; 100
     4e2:	91 09       	sbc	r25, r1
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <JOY_getDirection>:


JOY_direction_t JOY_getDirection(void) {
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
	
	JOY_position_t pos = JOY_getPosition();
     4f2:	c1 df       	rcall	.-126    	; 0x476 <JOY_getPosition>
     4f4:	8b 01       	movw	r16, r22
     4f6:	9c 01       	movw	r18, r24
     4f8:	fb 01       	movw	r30, r22
     4fa:	e9 01       	movw	r28, r18
	
	//creating a fraction to determine if the joystick is mostly x or y oriented
	double frac = pos.X/pos.Y;
     4fc:	cb 01       	movw	r24, r22
     4fe:	b9 01       	movw	r22, r18
     500:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
     504:	cb 01       	movw	r24, r22
	
	
	//creating an area near neutral position where small changes does not make a change in direction
	if (abs(pos.X) <= 25 && abs(pos.Y) <= 25) {
     506:	a8 01       	movw	r20, r16
     508:	47 5e       	subi	r20, 0xE7	; 231
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	43 33       	cpi	r20, 0x33	; 51
     50e:	51 05       	cpc	r21, r1
     510:	28 f4       	brcc	.+10     	; 0x51c <__stack+0x1d>
     512:	27 5e       	subi	r18, 0xE7	; 231
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	23 33       	cpi	r18, 0x33	; 51
     518:	31 05       	cpc	r19, r1
     51a:	20 f1       	brcs	.+72     	; 0x564 <__stack+0x65>
		return neutral;
	}
	
	if (pos.X > 0 && abs(frac) > 1) {
     51c:	1e 16       	cp	r1, r30
     51e:	1f 06       	cpc	r1, r31
     520:	54 f4       	brge	.+20     	; 0x536 <__stack+0x37>
     522:	9b 01       	movw	r18, r22
     524:	99 23       	and	r25, r25
     526:	24 f4       	brge	.+8      	; 0x530 <__stack+0x31>
     528:	22 27       	eor	r18, r18
     52a:	33 27       	eor	r19, r19
     52c:	26 1b       	sub	r18, r22
     52e:	37 0b       	sbc	r19, r23
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	cc f4       	brge	.+50     	; 0x568 <__stack+0x69>
		return right;
	}
	else if (pos.X < 0 && abs(frac) > 1) {
     536:	ff 23       	and	r31, r31
     538:	54 f4       	brge	.+20     	; 0x54e <__stack+0x4f>
     53a:	9b 01       	movw	r18, r22
     53c:	99 23       	and	r25, r25
     53e:	24 f4       	brge	.+8      	; 0x548 <__stack+0x49>
     540:	22 27       	eor	r18, r18
     542:	33 27       	eor	r19, r19
     544:	26 1b       	sub	r18, r22
     546:	37 0b       	sbc	r19, r23
     548:	22 30       	cpi	r18, 0x02	; 2
     54a:	31 05       	cpc	r19, r1
     54c:	7c f4       	brge	.+30     	; 0x56c <__stack+0x6d>
		return left;
	}
	else if (pos.Y > 0 && abs(frac) < 1) {
     54e:	1c 16       	cp	r1, r28
     550:	1d 06       	cpc	r1, r29
     552:	1c f4       	brge	.+6      	; 0x55a <__stack+0x5b>
     554:	89 2b       	or	r24, r25
     556:	29 f4       	brne	.+10     	; 0x562 <__stack+0x63>
     558:	0b c0       	rjmp	.+22     	; 0x570 <__stack+0x71>
		return up;
	}
	else if (pos.Y < 0 && abs(frac) < 1) {
     55a:	dd 23       	and	r29, r29
     55c:	14 f4       	brge	.+4      	; 0x562 <__stack+0x63>
     55e:	89 2b       	or	r24, r25
     560:	49 f0       	breq	.+18     	; 0x574 <__stack+0x75>
     562:	09 c0       	rjmp	.+18     	; 0x576 <__stack+0x77>
	double frac = pos.X/pos.Y;
	
	
	//creating an area near neutral position where small changes does not make a change in direction
	if (abs(pos.X) <= 25 && abs(pos.Y) <= 25) {
		return neutral;
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	07 c0       	rjmp	.+14     	; 0x576 <__stack+0x77>
	}
	
	if (pos.X > 0 && abs(frac) > 1) {
		return right;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	05 c0       	rjmp	.+10     	; 0x576 <__stack+0x77>
	}
	else if (pos.X < 0 && abs(frac) > 1) {
		return left;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	03 c0       	rjmp	.+6      	; 0x576 <__stack+0x77>
	}
	else if (pos.Y > 0 && abs(frac) < 1) {
		return up;
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	01 c0       	rjmp	.+2      	; 0x576 <__stack+0x77>
	}
	else if (pos.Y < 0 && abs(frac) < 1) {
		return down;
     574:	83 e0       	ldi	r24, 0x03	; 3
	}

}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <MCP2515_read>:
	
	SPI_disable_chipselect();
	
	return val;
	
}
     580:	cf 93       	push	r28
     582:	c8 2f       	mov	r28, r24
     584:	34 d7       	rcall	.+3688   	; 0x13ee <SPI_enable_chipselect>
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	28 d7       	rcall	.+3664   	; 0x13da <SPI_send>
     58a:	8c 2f       	mov	r24, r28
     58c:	26 d7       	rcall	.+3660   	; 0x13da <SPI_send>
     58e:	29 d7       	rcall	.+3666   	; 0x13e2 <SPI_read>
     590:	c8 2f       	mov	r28, r24
     592:	2f d7       	rcall	.+3678   	; 0x13f2 <SPI_disable_chipselect>
     594:	8c 2f       	mov	r24, r28
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <MCP2515_write>:
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	c8 2f       	mov	r28, r24
     5a0:	d6 2f       	mov	r29, r22
     5a2:	25 d7       	rcall	.+3658   	; 0x13ee <SPI_enable_chipselect>
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	19 d7       	rcall	.+3634   	; 0x13da <SPI_send>
     5a8:	8d 2f       	mov	r24, r29
     5aa:	17 d7       	rcall	.+3630   	; 0x13da <SPI_send>
     5ac:	8c 2f       	mov	r24, r28
     5ae:	15 d7       	rcall	.+3626   	; 0x13da <SPI_send>
     5b0:	20 d7       	rcall	.+3648   	; 0x13f2 <SPI_disable_chipselect>
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <MCP2515_request_to_send>:
     5b8:	cf 93       	push	r28
     5ba:	c8 2f       	mov	r28, r24
     5bc:	18 d7       	rcall	.+3632   	; 0x13ee <SPI_enable_chipselect>
     5be:	c1 30       	cpi	r28, 0x01	; 1
     5c0:	39 f0       	breq	.+14     	; 0x5d0 <MCP2515_request_to_send+0x18>
     5c2:	18 f0       	brcs	.+6      	; 0x5ca <MCP2515_request_to_send+0x12>
     5c4:	c2 30       	cpi	r28, 0x02	; 2
     5c6:	39 f0       	breq	.+14     	; 0x5d6 <MCP2515_request_to_send+0x1e>
     5c8:	09 c0       	rjmp	.+18     	; 0x5dc <MCP2515_request_to_send+0x24>
     5ca:	81 e8       	ldi	r24, 0x81	; 129
     5cc:	06 d7       	rcall	.+3596   	; 0x13da <SPI_send>
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <MCP2515_request_to_send+0x28>
     5d0:	82 e8       	ldi	r24, 0x82	; 130
     5d2:	03 d7       	rcall	.+3590   	; 0x13da <SPI_send>
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <MCP2515_request_to_send+0x28>
     5d6:	84 e8       	ldi	r24, 0x84	; 132
     5d8:	00 d7       	rcall	.+3584   	; 0x13da <SPI_send>
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <MCP2515_request_to_send+0x28>
     5dc:	87 e8       	ldi	r24, 0x87	; 135
     5de:	fd d6       	rcall	.+3578   	; 0x13da <SPI_send>
     5e0:	08 d7       	rcall	.+3600   	; 0x13f2 <SPI_disable_chipselect>
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t addr, uint8_t maskbyte, uint8_t databyte){
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	18 2f       	mov	r17, r24
     5ee:	d6 2f       	mov	r29, r22
     5f0:	c4 2f       	mov	r28, r20
	
	SPI_enable_chipselect();
     5f2:	fd d6       	rcall	.+3578   	; 0x13ee <SPI_enable_chipselect>
	
	SPI_send(MCP_BITMOD);
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	f1 d6       	rcall	.+3554   	; 0x13da <SPI_send>
	SPI_send(addr);
     5f8:	81 2f       	mov	r24, r17
     5fa:	ef d6       	rcall	.+3550   	; 0x13da <SPI_send>
	SPI_send(maskbyte);
     5fc:	8d 2f       	mov	r24, r29
     5fe:	ed d6       	rcall	.+3546   	; 0x13da <SPI_send>
	SPI_send(databyte);
     600:	8c 2f       	mov	r24, r28
     602:	eb d6       	rcall	.+3542   	; 0x13da <SPI_send>
	
	SPI_disable_chipselect();
     604:	f6 d6       	rcall	.+3564   	; 0x13f2 <SPI_disable_chipselect>
	
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	08 95       	ret

0000060e <MCP2515_reset>:


void MCP2515_reset(){
	
	//Pulling CS to low
	SPI_enable_chipselect();
     60e:	ef d6       	rcall	.+3550   	; 0x13ee <SPI_enable_chipselect>
			
	SPI_send(MCP_RESET);
     610:	80 ec       	ldi	r24, 0xC0	; 192
     612:	e3 d6       	rcall	.+3526   	; 0x13da <SPI_send>
	
	//Pulling CS to high
	SPI_disable_chipselect();		
     614:	ee c6       	rjmp	.+3548   	; 0x13f2 <SPI_disable_chipselect>
     616:	08 95       	ret

00000618 <MCP2515_init>:
#include <stdint.h>
#include <util/delay.h>

void MCP2515_init() {
	
	SPI_init();
     618:	d6 d6       	rcall	.+3500   	; 0x13c6 <SPI_init>
	
	MCP2515_reset();
     61a:	f9 df       	rcall	.-14     	; 0x60e <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61c:	8c ec       	ldi	r24, 0xCC	; 204
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <MCP2515_init+0x8>
     624:	00 c0       	rjmp	.+0      	; 0x626 <MCP2515_init+0xe>
     626:	00 00       	nop
	_delay_ms(1);
	
	//Test configuration mode after reset
	uint8_t val;
	val = MCP2515_read(MCP_CANSTAT);
     628:	8e e0       	ldi	r24, 0x0E	; 14
     62a:	aa df       	rcall	.-172    	; 0x580 <MCP2515_read>
	if((val & MODE_MASK) != MODE_CONFIG) {
     62c:	80 7e       	andi	r24, 0xE0	; 224
     62e:	80 38       	cpi	r24, 0x80	; 128
     630:	21 f0       	breq	.+8      	; 0x63a <MCP2515_init+0x22>
		printf("MCP2515 in NOT in configuration mode after reset!\n");
     632:	8b e0       	ldi	r24, 0x0B	; 11
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <puts>
     63a:	08 95       	ret

0000063c <MENU_scream_mode>:

void MENU_clear_highscores(void){
	
	EEPROM_write(HIGHSCORE_1_ADDRESS,0);
	EEPROM_write(HIGHSCORE_2_ADDRESS,0);
	EEPROM_write(HIGHSCORE_3_ADDRESS,0);
     63c:	bb 9a       	sbi	0x17, 3	; 23
     63e:	c3 98       	cbi	0x18, 3	; 24
     640:	08 95       	ret

00000642 <MENU_normal_mode>:
     642:	bb 9a       	sbi	0x17, 3	; 23
     644:	c3 9a       	sbi	0x18, 3	; 24
     646:	08 95       	ret

00000648 <MENU_print_highscores>:
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	03 df       	rcall	.-506    	; 0x458 <EEPROM_read>
     652:	80 93 47 02 	sts	0x0247, r24
     656:	8e e1       	ldi	r24, 0x1E	; 30
     658:	ff de       	rcall	.-514    	; 0x458 <EEPROM_read>
     65a:	80 93 48 02 	sts	0x0248, r24
     65e:	82 e3       	ldi	r24, 0x32	; 50
     660:	fb de       	rcall	.-522    	; 0x458 <EEPROM_read>
     662:	80 93 49 02 	sts	0x0249, r24
     666:	52 d5       	rcall	.+2724   	; 0x110c <OLED_clear_display>
     668:	8d e3       	ldi	r24, 0x3D	; 61
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	f1 d5       	rcall	.+3042   	; 0x1250 <OLED_print_header>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	42 d5       	rcall	.+2692   	; 0x10f6 <OLED_goto_line>
     672:	c7 e4       	ldi	r28, 0x47	; 71
     674:	d2 e0       	ldi	r29, 0x02	; 2
     676:	11 e0       	ldi	r17, 0x01	; 1
     678:	89 91       	ld	r24, Y+
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	26 d6       	rcall	.+3148   	; 0x12ca <OLED_int_to_string>
     67e:	b3 d5       	rcall	.+2918   	; 0x11e6 <OLED_print_string>
     680:	1f 5f       	subi	r17, 0xFF	; 255
     682:	81 2f       	mov	r24, r17
     684:	38 d5       	rcall	.+2672   	; 0x10f6 <OLED_goto_line>
     686:	14 30       	cpi	r17, 0x04	; 4
     688:	b9 f7       	brne	.-18     	; 0x678 <MENU_print_highscores+0x30>
     68a:	2f df       	rcall	.-418    	; 0x4ea <JOY_getDirection>
     68c:	81 11       	cpse	r24, r1
     68e:	fd cf       	rjmp	.-6      	; 0x68a <MENU_print_highscores+0x42>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	08 95       	ret

00000698 <MENU_add_submenu>:
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	7c 01       	movw	r14, r24
     6aa:	8b 01       	movw	r16, r22
     6ac:	ea 01       	movw	r28, r20
     6ae:	cc 80       	ldd	r12, Y+4	; 0x04
     6b0:	d1 2c       	mov	r13, r1
     6b2:	cc 0c       	add	r12, r12
     6b4:	dd 1c       	adc	r13, r13
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	c8 0e       	add	r12, r24
     6bc:	d9 1e       	adc	r13, r25
     6be:	84 e2       	ldi	r24, 0x24	; 36
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <malloc>
     6c6:	f6 01       	movw	r30, r12
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
     6cc:	ec 81       	ldd	r30, Y+4	; 0x04
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	e8 0f       	add	r30, r24
     6da:	f9 1f       	adc	r31, r25
     6dc:	01 90       	ld	r0, Z+
     6de:	f0 81       	ld	r31, Z
     6e0:	e0 2d       	mov	r30, r0
     6e2:	f1 82       	std	Z+1, r15	; 0x01
     6e4:	e0 82       	st	Z, r14
     6e6:	ec 81       	ldd	r30, Y+4	; 0x04
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	8d 81       	ldd	r24, Y+5	; 0x05
     6f0:	9e 81       	ldd	r25, Y+6	; 0x06
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	01 90       	ld	r0, Z+
     6f8:	f0 81       	ld	r31, Z
     6fa:	e0 2d       	mov	r30, r0
     6fc:	14 82       	std	Z+4, r1	; 0x04
     6fe:	ec 81       	ldd	r30, Y+4	; 0x04
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	9e 81       	ldd	r25, Y+6	; 0x06
     70a:	e8 0f       	add	r30, r24
     70c:	f9 1f       	adc	r31, r25
     70e:	01 90       	ld	r0, Z+
     710:	f0 81       	ld	r31, Z
     712:	e0 2d       	mov	r30, r0
     714:	13 83       	std	Z+3, r17	; 0x03
     716:	02 83       	std	Z+2, r16	; 0x02
     718:	ec 81       	ldd	r30, Y+4	; 0x04
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
     728:	01 90       	ld	r0, Z+
     72a:	f0 81       	ld	r31, Z
     72c:	e0 2d       	mov	r30, r0
     72e:	d0 87       	std	Z+8, r29	; 0x08
     730:	c7 83       	std	Z+7, r28	; 0x07
     732:	ec 81       	ldd	r30, Y+4	; 0x04
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	00 81       	ld	r16, Z
     744:	11 81       	ldd	r17, Z+1	; 0x01
     746:	84 e2       	ldi	r24, 0x24	; 36
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <malloc>
     74e:	f8 01       	movw	r30, r16
     750:	96 83       	std	Z+6, r25	; 0x06
     752:	85 83       	std	Z+5, r24	; 0x05
     754:	ec 81       	ldd	r30, Y+4	; 0x04
     756:	ef 5f       	subi	r30, 0xFF	; 255
     758:	ec 83       	std	Y+4, r30	; 0x04
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e1 50       	subi	r30, 0x01	; 1
     75e:	f0 48       	sbci	r31, 0x80	; 128
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	9e 81       	ldd	r25, Y+6	; 0x06
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <MENU_back>:
     782:	ef 92       	push	r14
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	29 97       	sbiw	r28, 0x09	; 9
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	09 83       	std	Y+1, r16	; 0x01
     79e:	1a 83       	std	Y+2, r17	; 0x02
     7a0:	2b 83       	std	Y+3, r18	; 0x03
     7a2:	3c 83       	std	Y+4, r19	; 0x04
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	89 87       	std	Y+9, r24	; 0x09
     7ae:	e8 85       	ldd	r30, Y+8	; 0x08
     7b0:	f9 85       	ldd	r31, Y+9	; 0x09
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	59 f0       	breq	.+22     	; 0x7cc <MENU_back+0x4a>
     7b6:	e1 2c       	mov	r14, r1
     7b8:	00 81       	ld	r16, Z
     7ba:	11 81       	ldd	r17, Z+1	; 0x01
     7bc:	22 81       	ldd	r18, Z+2	; 0x02
     7be:	33 81       	ldd	r19, Z+3	; 0x03
     7c0:	44 81       	ldd	r20, Z+4	; 0x04
     7c2:	55 81       	ldd	r21, Z+5	; 0x05
     7c4:	66 81       	ldd	r22, Z+6	; 0x06
     7c6:	77 81       	ldd	r23, Z+7	; 0x07
     7c8:	80 85       	ldd	r24, Z+8	; 0x08
     7ca:	0c d0       	rcall	.+24     	; 0x7e4 <MENU_display_menu>
     7cc:	29 96       	adiw	r28, 0x09	; 9
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ef 90       	pop	r14
     7e2:	08 95       	ret

000007e4 <MENU_display_menu>:
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	29 97       	sbiw	r28, 0x09	; 9
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	09 83       	std	Y+1, r16	; 0x01
     808:	1a 83       	std	Y+2, r17	; 0x02
     80a:	2b 83       	std	Y+3, r18	; 0x03
     80c:	3c 83       	std	Y+4, r19	; 0x04
     80e:	f4 2e       	mov	r15, r20
     810:	4d 83       	std	Y+5, r20	; 0x05
     812:	5e 83       	std	Y+6, r21	; 0x06
     814:	6f 83       	std	Y+7, r22	; 0x07
     816:	78 87       	std	Y+8, r23	; 0x08
     818:	89 87       	std	Y+9, r24	; 0x09
     81a:	0e 81       	ldd	r16, Y+6	; 0x06
     81c:	1f 81       	ldd	r17, Y+7	; 0x07
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	89 2b       	or	r24, r25
     824:	99 f0       	breq	.+38     	; 0x84c <MENU_display_menu+0x68>
     826:	e8 85       	ldd	r30, Y+8	; 0x08
     828:	f9 85       	ldd	r31, Y+9	; 0x09
     82a:	89 e0       	ldi	r24, 0x09	; 9
     82c:	ab e4       	ldi	r26, 0x4B	; 75
     82e:	b2 e0       	ldi	r27, 0x02	; 2
     830:	01 90       	ld	r0, Z+
     832:	0d 92       	st	X+, r0
     834:	8a 95       	dec	r24
     836:	e1 f7       	brne	.-8      	; 0x830 <MENU_display_menu+0x4c>
     838:	09 81       	ldd	r16, Y+1	; 0x01
     83a:	1a 81       	ldd	r17, Y+2	; 0x02
     83c:	2b 81       	ldd	r18, Y+3	; 0x03
     83e:	3c 81       	ldd	r19, Y+4	; 0x04
     840:	5e 81       	ldd	r21, Y+6	; 0x06
     842:	6f 81       	ldd	r22, Y+7	; 0x07
     844:	78 85       	ldd	r23, Y+8	; 0x08
     846:	89 85       	ldd	r24, Y+9	; 0x09
     848:	9c df       	rcall	.-200    	; 0x782 <MENU_back>
     84a:	26 c0       	rjmp	.+76     	; 0x898 <MENU_display_menu+0xb4>
     84c:	5f d4       	rcall	.+2238   	; 0x110c <OLED_clear_display>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	fe d4       	rcall	.+2556   	; 0x1250 <OLED_print_header>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	4f d4       	rcall	.+2206   	; 0x10f6 <OLED_goto_line>
     858:	ff 20       	and	r15, r15
     85a:	f1 f0       	breq	.+60     	; 0x898 <MENU_display_menu+0xb4>
     85c:	ce 2c       	mov	r12, r14
     85e:	d1 2c       	mov	r13, r1
     860:	cc 0c       	add	r12, r12
     862:	dd 1c       	adc	r13, r13
     864:	c0 0e       	add	r12, r16
     866:	d1 1e       	adc	r13, r17
     868:	b1 2c       	mov	r11, r1
     86a:	be 10       	cpse	r11, r14
     86c:	07 c0       	rjmp	.+14     	; 0x87c <MENU_display_menu+0x98>
     86e:	d6 01       	movw	r26, r12
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	68 d5       	rcall	.+2768   	; 0x134a <OLED_print_inverted_string>
     87a:	06 c0       	rjmp	.+12     	; 0x888 <MENU_display_menu+0xa4>
     87c:	d8 01       	movw	r26, r16
     87e:	ed 91       	ld	r30, X+
     880:	fc 91       	ld	r31, X
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	af d4       	rcall	.+2398   	; 0x11e6 <OLED_print_string>
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	8b 0d       	add	r24, r11
     88c:	34 d4       	rcall	.+2152   	; 0x10f6 <OLED_goto_line>
     88e:	b3 94       	inc	r11
     890:	0e 5f       	subi	r16, 0xFE	; 254
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	bf 10       	cpse	r11, r15
     896:	e9 cf       	rjmp	.-46     	; 0x86a <MENU_display_menu+0x86>
     898:	29 96       	adiw	r28, 0x09	; 9
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	08 95       	ret

000008b8 <MENU_choose>:
     8b8:	ef 92       	push	r14
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	29 97       	sbiw	r28, 0x09	; 9
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	09 83       	std	Y+1, r16	; 0x01
     8d4:	1a 83       	std	Y+2, r17	; 0x02
     8d6:	2b 83       	std	Y+3, r18	; 0x03
     8d8:	3c 83       	std	Y+4, r19	; 0x04
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	5e 83       	std	Y+6, r21	; 0x06
     8de:	6f 83       	std	Y+7, r22	; 0x07
     8e0:	78 87       	std	Y+8, r23	; 0x08
     8e2:	89 87       	std	Y+9, r24	; 0x09
     8e4:	0b 81       	ldd	r16, Y+3	; 0x03
     8e6:	1c 81       	ldd	r17, Y+4	; 0x04
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	8f e7       	ldi	r24, 0x7F	; 127
     8ec:	97 e0       	ldi	r25, 0x07	; 7
     8ee:	21 50       	subi	r18, 0x01	; 1
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <MENU_choose+0x36>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <MENU_choose+0x40>
     8f8:	00 00       	nop
     8fa:	01 15       	cp	r16, r1
     8fc:	11 05       	cpc	r17, r1
     8fe:	91 f4       	brne	.+36     	; 0x924 <MENU_choose+0x6c>
     900:	ee 81       	ldd	r30, Y+6	; 0x06
     902:	ff 81       	ldd	r31, Y+7	; 0x07
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	89 2b       	or	r24, r25
     90a:	79 f0       	breq	.+30     	; 0x92a <MENU_choose+0x72>
     90c:	e1 2c       	mov	r14, r1
     90e:	09 81       	ldd	r16, Y+1	; 0x01
     910:	1a 81       	ldd	r17, Y+2	; 0x02
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	3c 81       	ldd	r19, Y+4	; 0x04
     916:	4d 81       	ldd	r20, Y+5	; 0x05
     918:	5e 81       	ldd	r21, Y+6	; 0x06
     91a:	6f 81       	ldd	r22, Y+7	; 0x07
     91c:	78 85       	ldd	r23, Y+8	; 0x08
     91e:	89 85       	ldd	r24, Y+9	; 0x09
     920:	61 df       	rcall	.-318    	; 0x7e4 <MENU_display_menu>
     922:	03 c0       	rjmp	.+6      	; 0x92a <MENU_choose+0x72>
     924:	f3 d3       	rcall	.+2022   	; 0x110c <OLED_clear_display>
     926:	f8 01       	movw	r30, r16
     928:	09 95       	icall
     92a:	29 96       	adiw	r28, 0x09	; 9
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ef 90       	pop	r14
     940:	08 95       	ret

00000942 <MENU_print_rocket>:
     942:	bf 92       	push	r11
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	8c e4       	ldi	r24, 0x4C	; 76
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <puts>
     95c:	8a e5       	ldi	r24, 0x5A	; 90
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	77 d4       	rcall	.+2286   	; 0x1250 <OLED_print_header>
     962:	87 e0       	ldi	r24, 0x07	; 7
     964:	c8 d3       	rcall	.+1936   	; 0x10f6 <OLED_goto_line>
     966:	84 e6       	ldi	r24, 0x64	; 100
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	3d d4       	rcall	.+2170   	; 0x11e6 <OLED_print_string>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	c3 d3       	rcall	.+1926   	; 0x10f6 <OLED_goto_line>
     970:	82 e3       	ldi	r24, 0x32	; 50
     972:	e5 d3       	rcall	.+1994   	; 0x113e <OLED_goto_column>
     974:	8d e2       	ldi	r24, 0x2D	; 45
     976:	e0 e0       	ldi	r30, 0x00	; 0
     978:	f2 e1       	ldi	r31, 0x12	; 18
     97a:	90 ec       	ldi	r25, 0xC0	; 192
     97c:	90 83       	st	Z, r25
     97e:	81 50       	subi	r24, 0x01	; 1
     980:	e9 f7       	brne	.-6      	; 0x97c <MENU_print_rocket+0x3a>
     982:	86 e0       	ldi	r24, 0x06	; 6
     984:	b8 d3       	rcall	.+1904   	; 0x10f6 <OLED_goto_line>
     986:	82 e3       	ldi	r24, 0x32	; 50
     988:	da d3       	rcall	.+1972   	; 0x113e <OLED_goto_column>
     98a:	8d e2       	ldi	r24, 0x2D	; 45
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f2 e1       	ldi	r31, 0x12	; 18
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	90 83       	st	Z, r25
     994:	81 50       	subi	r24, 0x01	; 1
     996:	e9 f7       	brne	.-6      	; 0x992 <MENU_print_rocket+0x50>
     998:	13 e0       	ldi	r17, 0x03	; 3
     99a:	c0 e0       	ldi	r28, 0x00	; 0
     99c:	d2 e1       	ldi	r29, 0x12	; 18
     99e:	0f ef       	ldi	r16, 0xFF	; 255
     9a0:	81 2f       	mov	r24, r17
     9a2:	a9 d3       	rcall	.+1874   	; 0x10f6 <OLED_goto_line>
     9a4:	82 e3       	ldi	r24, 0x32	; 50
     9a6:	cb d3       	rcall	.+1942   	; 0x113e <OLED_goto_column>
     9a8:	08 83       	st	Y, r16
     9aa:	08 83       	st	Y, r16
     9ac:	1f 5f       	subi	r17, 0xFF	; 255
     9ae:	16 30       	cpi	r17, 0x06	; 6
     9b0:	b9 f7       	brne	.-18     	; 0x9a0 <MENU_print_rocket+0x5e>
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	a0 d3       	rcall	.+1856   	; 0x10f6 <OLED_goto_line>
     9b6:	8f e5       	ldi	r24, 0x5F	; 95
     9b8:	c2 d3       	rcall	.+1924   	; 0x113e <OLED_goto_column>
     9ba:	c0 e0       	ldi	r28, 0x00	; 0
     9bc:	d2 e1       	ldi	r29, 0x12	; 18
     9be:	13 e0       	ldi	r17, 0x03	; 3
     9c0:	18 83       	st	Y, r17
     9c2:	06 e0       	ldi	r16, 0x06	; 6
     9c4:	08 83       	st	Y, r16
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fc e0       	ldi	r31, 0x0C	; 12
     9ca:	ff 2e       	mov	r15, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	f8 82       	st	Y, r15
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f8 e1       	ldi	r31, 0x18	; 24
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	e8 82       	st	Y, r14
     9da:	0f 2e       	mov	r0, r31
     9dc:	f0 e3       	ldi	r31, 0x30	; 48
     9de:	df 2e       	mov	r13, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	d8 82       	st	Y, r13
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f0 e6       	ldi	r31, 0x60	; 96
     9e8:	cf 2e       	mov	r12, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	c8 82       	st	Y, r12
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f0 ec       	ldi	r31, 0xC0	; 192
     9f2:	bf 2e       	mov	r11, r31
     9f4:	f0 2d       	mov	r31, r0
     9f6:	b8 82       	st	Y, r11
     9f8:	80 e8       	ldi	r24, 0x80	; 128
     9fa:	88 83       	st	Y, r24
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	7b d3       	rcall	.+1782   	; 0x10f6 <OLED_goto_line>
     a00:	86 e6       	ldi	r24, 0x66	; 102
     a02:	9d d3       	rcall	.+1850   	; 0x113e <OLED_goto_column>
     a04:	81 e8       	ldi	r24, 0x81	; 129
     a06:	88 83       	st	Y, r24
     a08:	83 ec       	ldi	r24, 0xC3	; 195
     a0a:	88 83       	st	Y, r24
     a0c:	86 e6       	ldi	r24, 0x66	; 102
     a0e:	88 83       	st	Y, r24
     a10:	8c e3       	ldi	r24, 0x3C	; 60
     a12:	88 83       	st	Y, r24
     a14:	85 e0       	ldi	r24, 0x05	; 5
     a16:	6f d3       	rcall	.+1758   	; 0x10f6 <OLED_goto_line>
     a18:	8f e5       	ldi	r24, 0x5F	; 95
     a1a:	91 d3       	rcall	.+1826   	; 0x113e <OLED_goto_column>
     a1c:	b8 82       	st	Y, r11
     a1e:	c8 82       	st	Y, r12
     a20:	d8 82       	st	Y, r13
     a22:	e8 82       	st	Y, r14
     a24:	f8 82       	st	Y, r15
     a26:	08 83       	st	Y, r16
     a28:	18 83       	st	Y, r17
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	88 83       	st	Y, r24
     a2e:	5d dd       	rcall	.-1350   	; 0x4ea <JOY_getDirection>
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	e9 f0       	breq	.+58     	; 0xa6e <MENU_print_rocket+0x12c>
     a34:	0f 2e       	mov	r0, r31
     a36:	f3 e0       	ldi	r31, 0x03	; 3
     a38:	cf 2e       	mov	r12, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	0f ef       	ldi	r16, 0xFF	; 255
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	54 dd       	rcall	.-1368   	; 0x4ea <JOY_getDirection>
     a42:	d8 2e       	mov	r13, r24
     a44:	ec 2c       	mov	r14, r12
     a46:	8e 2d       	mov	r24, r14
     a48:	56 d3       	rcall	.+1708   	; 0x10f6 <OLED_goto_line>
     a4a:	0f 2e       	mov	r0, r31
     a4c:	f2 e3       	ldi	r31, 0x32	; 50
     a4e:	ff 2e       	mov	r15, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <rand>
     a56:	b8 01       	movw	r22, r16
     a58:	bd d7       	rcall	.+3962   	; 0x19d4 <__divmodhi4>
     a5a:	88 83       	st	Y, r24
     a5c:	fa 94       	dec	r15
     a5e:	c9 f7       	brne	.-14     	; 0xa52 <MENU_print_rocket+0x110>
     a60:	e3 94       	inc	r14
     a62:	26 e0       	ldi	r18, 0x06	; 6
     a64:	e2 12       	cpse	r14, r18
     a66:	ef cf       	rjmp	.-34     	; 0xa46 <MENU_print_rocket+0x104>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	d8 12       	cpse	r13, r24
     a6c:	e9 cf       	rjmp	.-46     	; 0xa40 <MENU_print_rocket+0xfe>
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	2f e7       	ldi	r18, 0x7F	; 127
     a72:	87 e0       	ldi	r24, 0x07	; 7
     a74:	91 50       	subi	r25, 0x01	; 1
     a76:	20 40       	sbci	r18, 0x00	; 0
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <MENU_print_rocket+0x132>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <MENU_print_rocket+0x13c>
     a7e:	00 00       	nop
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	08 95       	ret

00000a94 <MENU_update_highscores>:
	while(JOY_getDirection()!=left){ 
	}
}

//Returning rank and writing to EEPROM if highscore reaches top 3.
uint8_t MENU_update_highscores(uint8_t time) { 
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	c8 2f       	mov	r28, r24
	
	uint8_t highscore_1 = EEPROM_read(HIGHSCORE_1_ADDRESS);
     a9c:	8a e0       	ldi	r24, 0x0A	; 10
     a9e:	dc dc       	rcall	.-1608   	; 0x458 <EEPROM_read>
     aa0:	d8 2f       	mov	r29, r24
	uint8_t highscore_2 = EEPROM_read(HIGHSCORE_2_ADDRESS);
     aa2:	8e e1       	ldi	r24, 0x1E	; 30
     aa4:	d9 dc       	rcall	.-1614   	; 0x458 <EEPROM_read>
     aa6:	18 2f       	mov	r17, r24
	uint8_t highscore_3 = EEPROM_read(HIGHSCORE_3_ADDRESS);
     aa8:	82 e3       	ldi	r24, 0x32	; 50
     aaa:	d6 dc       	rcall	.-1620   	; 0x458 <EEPROM_read>
		
		if (time > highscore_1){
     aac:	dc 17       	cp	r29, r28
     aae:	28 f4       	brcc	.+10     	; 0xaba <MENU_update_highscores+0x26>
			EEPROM_write(HIGHSCORE_1_ADDRESS,time);
     ab0:	6c 2f       	mov	r22, r28
     ab2:	8a e0       	ldi	r24, 0x0A	; 10
     ab4:	c8 dc       	rcall	.-1648   	; 0x446 <EEPROM_write>
			return 1;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <MENU_update_highscores+0x44>
		}
		else if(time > highscore_2){
     aba:	1c 17       	cp	r17, r28
     abc:	28 f4       	brcc	.+10     	; 0xac8 <MENU_update_highscores+0x34>
			EEPROM_write(HIGHSCORE_2_ADDRESS,time);
     abe:	6c 2f       	mov	r22, r28
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	c1 dc       	rcall	.-1662   	; 0x446 <EEPROM_write>
			return 2;
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <MENU_update_highscores+0x44>
		}
		else if(time > highscore_3){
     ac8:	8c 17       	cp	r24, r28
     aca:	28 f4       	brcc	.+10     	; 0xad6 <MENU_update_highscores+0x42>
			EEPROM_write(HIGHSCORE_3_ADDRESS,time);
     acc:	6c 2f       	mov	r22, r28
     ace:	82 e3       	ldi	r24, 0x32	; 50
     ad0:	ba dc       	rcall	.-1676   	; 0x446 <EEPROM_write>
			return 3;
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <MENU_update_highscores+0x44>
		}
		return 0;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
		
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	08 95       	ret

00000ae0 <MENU_gameover>:
	EEPROM_write(HIGHSCORE_3_ADDRESS,0);
	
}


void MENU_gameover(void){
     ae0:	ef 92       	push	r14
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
	
	//Stops the highscore timer
	TIMER_stop();
     aea:	bf d4       	rcall	.+2430   	; 0x146a <TIMER_stop>
	
	uint8_t rank = MENU_update_highscores(TIMER_get_time());
     aec:	c2 d4       	rcall	.+2436   	; 0x1472 <TIMER_get_time>
     aee:	d2 df       	rcall	.-92     	; 0xa94 <MENU_update_highscores>
     af0:	18 2f       	mov	r17, r24
	uint8_t time = TIMER_get_time();
     af2:	bf d4       	rcall	.+2430   	; 0x1472 <TIMER_get_time>
     af4:	ec 01       	movw	r28, r24
	OLED_clear_display();
     af6:	0a d3       	rcall	.+1556   	; 0x110c <OLED_clear_display>
	OLED_print_string("GAME OVER");
     af8:	83 e7       	ldi	r24, 0x73	; 115
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	74 d3       	rcall	.+1768   	; 0x11e6 <OLED_print_string>
	OLED_goto_line(3);
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	fa d2       	rcall	.+1524   	; 0x10f6 <OLED_goto_line>
	OLED_print_string("Your score:");
     b02:	8d e7       	ldi	r24, 0x7D	; 125
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	6f d3       	rcall	.+1758   	; 0x11e6 <OLED_print_string>
	OLED_goto_line(4);
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	f5 d2       	rcall	.+1514   	; 0x10f6 <OLED_goto_line>
	OLED_print_string(OLED_int_to_string(time));
     b0c:	ce 01       	movw	r24, r28
     b0e:	99 27       	eor	r25, r25
     b10:	dc d3       	rcall	.+1976   	; 0x12ca <OLED_int_to_string>
     b12:	69 d3       	rcall	.+1746   	; 0x11e6 <OLED_print_string>
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	9a e4       	ldi	r25, 0x4A	; 74
     b1a:	21 50       	subi	r18, 0x01	; 1
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	90 40       	sbci	r25, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <MENU_gameover+0x3a>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <MENU_gameover+0x44>
     b24:	00 00       	nop
	_delay_ms(5000);
	
	
	if (rank) {
     b26:	11 23       	and	r17, r17
     b28:	09 f4       	brne	.+2      	; 0xb2c <MENU_gameover+0x4c>
     b2a:	36 c0       	rjmp	.+108    	; 0xb98 <MENU_gameover+0xb8>
		OLED_clear_display();
     b2c:	ef d2       	rcall	.+1502   	; 0x110c <OLED_clear_display>
		
		OLED_print_string("Congratulations!");
     b2e:	89 e8       	ldi	r24, 0x89	; 137
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	59 d3       	rcall	.+1714   	; 0x11e6 <OLED_print_string>
		
		OLED_goto_line(2);
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	df d2       	rcall	.+1470   	; 0x10f6 <OLED_goto_line>
		OLED_print_string("Your score reached");
     b38:	8a e9       	ldi	r24, 0x9A	; 154
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	54 d3       	rcall	.+1704   	; 0x11e6 <OLED_print_string>
		
		OLED_goto_line(3);
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	da d2       	rcall	.+1460   	; 0x10f6 <OLED_goto_line>
		OLED_print_string("the highscore list.");
     b42:	8d ea       	ldi	r24, 0xAD	; 173
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	4f d3       	rcall	.+1694   	; 0x11e6 <OLED_print_string>
		
		OLED_goto_line(4);
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	d5 d2       	rcall	.+1450   	; 0x10f6 <OLED_goto_line>
		OLED_print_string("Current rank:");
     b4c:	81 ec       	ldi	r24, 0xC1	; 193
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	4a d3       	rcall	.+1684   	; 0x11e6 <OLED_print_string>
		
		OLED_goto_line(5);
     b52:	85 e0       	ldi	r24, 0x05	; 5
     b54:	d0 d2       	rcall	.+1440   	; 0x10f6 <OLED_goto_line>
		OLED_print_string(OLED_int_to_string(rank));
     b56:	81 2f       	mov	r24, r17
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	b7 d3       	rcall	.+1902   	; 0x12ca <OLED_int_to_string>
     b5c:	44 d3       	rcall	.+1672   	; 0x11e6 <OLED_print_string>
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	98 e6       	ldi	r25, 0x68	; 104
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	90 40       	sbci	r25, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <MENU_gameover+0x84>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <MENU_gameover+0x8e>
     b6e:	00 00       	nop
		
		_delay_ms(7000);
		MENU_display_menu(main_menu,0);
     b70:	e1 2c       	mov	r14, r1
     b72:	00 91 54 02 	lds	r16, 0x0254
     b76:	10 91 55 02 	lds	r17, 0x0255
     b7a:	20 91 56 02 	lds	r18, 0x0256
     b7e:	30 91 57 02 	lds	r19, 0x0257
     b82:	40 91 58 02 	lds	r20, 0x0258
     b86:	50 91 59 02 	lds	r21, 0x0259
     b8a:	60 91 5a 02 	lds	r22, 0x025A
     b8e:	70 91 5b 02 	lds	r23, 0x025B
     b92:	80 91 5c 02 	lds	r24, 0x025C
     b96:	26 de       	rcall	.-948    	; 0x7e4 <MENU_display_menu>
	}
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ef 90       	pop	r14
     ba2:	08 95       	ret

00000ba4 <MENU_play_game>:
	}
	_delay_ms(500);
}

//Playing the game with the P1000 multifunction board
void MENU_play_game(void){
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	66 97       	sbiw	r28, 0x16	; 22
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	can_message_t receive_msg;	
	
	
	//Initializing the message containing the control references
	can_message_t control_msg;
	control_msg = *(CAN_create_message(&control_msg,GAME_ID,7,0));
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	47 e0       	ldi	r20, 0x07	; 7
     bd2:	64 e6       	ldi	r22, 0x64	; 100
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	ce 01       	movw	r24, r28
     bd8:	0c 96       	adiw	r24, 0x0c	; 12
     bda:	23 dc       	rcall	.-1978   	; 0x422 <CAN_create_message>
     bdc:	2b e0       	ldi	r18, 0x0B	; 11
     bde:	fc 01       	movw	r30, r24
     be0:	de 01       	movw	r26, r28
     be2:	1c 96       	adiw	r26, 0x0c	; 12
     be4:	01 90       	ld	r0, Z+
     be6:	0d 92       	st	X+, r0
     be8:	2a 95       	dec	r18
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <MENU_play_game+0x40>
	
	uint8_t gameover = FALSE;
	
	//Starting the higscore timer
	TIMER_start();
     bec:	34 d4       	rcall	.+2152   	; 0x1456 <TIMER_start>
	
	//transmit_complete_flag = TRUE;
	
	uint8_t joy_x = ADC_read(joyX);;
     bee:	85 e0       	ldi	r24, 0x05	; 5
     bf0:	89 db       	rcall	.-2286   	; 0x304 <ADC_read>
     bf2:	f8 2e       	mov	r15, r24
	uint8_t slider_pos = ADC_read(right_slider);
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	86 db       	rcall	.-2292   	; 0x304 <ADC_read>
     bf8:	e8 2e       	mov	r14, r24
	uint8_t button = PINB & RIGHT_BUTTON;
     bfa:	86 b3       	in	r24, 0x16	; 22
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	d8 2e       	mov	r13, r24
			control_msg.data[1] = ADC_read(joyY);
			control_msg.data[2] = ADC_read(right_slider);
			control_msg.data[3] = PINB & RIGHT_BUTTON;
			control_msg.data[4] = PINB & LEFT_BUTTON;
			control_msg.data[5] = PINB & JOY_BUTTON;
			control_msg.data[7] = gameover ? 0:1;
     c00:	cc 24       	eor	r12, r12
     c02:	c3 94       	inc	r12
			
			joy_x = ADC_read(joyX);
			slider_pos = ADC_read(right_slider);
			button = control_msg.data[3];
			CAN_send_message(&control_msg);
			printf("Sending message \n ");
     c04:	0f ec       	ldi	r16, 0xCF	; 207
     c06:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t button = PINB & RIGHT_BUTTON;
	
	//Running until the IR is triggered
	while(!gameover){
		
		if (abs(joy_x-ADC_read(joyX)) > 5 || abs(slider_pos - ADC_read(right_slider)) > 3 || PINB & RIGHT_BUTTON != button || control_msg.data[3] == 1) {
     c08:	aa 24       	eor	r10, r10
     c0a:	a3 94       	inc	r10
     c0c:	b1 2c       	mov	r11, r1
     c0e:	81 2c       	mov	r8, r1
     c10:	91 2c       	mov	r9, r1
     c12:	85 e0       	ldi	r24, 0x05	; 5
     c14:	77 db       	rcall	.-2322   	; 0x304 <ADC_read>
     c16:	4f 2d       	mov	r20, r15
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	48 1b       	sub	r20, r24
     c1c:	51 09       	sbc	r21, r1
     c1e:	9a 01       	movw	r18, r20
     c20:	22 f4       	brpl	.+8      	; 0xc2a <MENU_play_game+0x86>
     c22:	22 27       	eor	r18, r18
     c24:	33 27       	eor	r19, r19
     c26:	24 1b       	sub	r18, r20
     c28:	35 0b       	sbc	r19, r21
     c2a:	26 30       	cpi	r18, 0x06	; 6
     c2c:	31 05       	cpc	r19, r1
     c2e:	fc f4       	brge	.+62     	; 0xc6e <MENU_play_game+0xca>
     c30:	86 e0       	ldi	r24, 0x06	; 6
     c32:	68 db       	rcall	.-2352   	; 0x304 <ADC_read>
     c34:	2e 2d       	mov	r18, r14
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	28 1b       	sub	r18, r24
     c3a:	31 09       	sbc	r19, r1
     c3c:	c9 01       	movw	r24, r18
     c3e:	99 23       	and	r25, r25
     c40:	24 f4       	brge	.+8      	; 0xc4a <MENU_play_game+0xa6>
     c42:	88 27       	eor	r24, r24
     c44:	99 27       	eor	r25, r25
     c46:	82 1b       	sub	r24, r18
     c48:	93 0b       	sbc	r25, r19
     c4a:	04 97       	sbiw	r24, 0x04	; 4
     c4c:	84 f4       	brge	.+32     	; 0xc6e <MENU_play_game+0xca>
     c4e:	26 b3       	in	r18, 0x16	; 22
     c50:	8a 2d       	mov	r24, r10
     c52:	9b 2d       	mov	r25, r11
     c54:	31 e0       	ldi	r19, 0x01	; 1
     c56:	d3 12       	cpse	r13, r19
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MENU_play_game+0xba>
     c5a:	88 2d       	mov	r24, r8
     c5c:	99 2d       	mov	r25, r9
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	82 23       	and	r24, r18
     c62:	93 23       	and	r25, r19
     c64:	89 2b       	or	r24, r25
     c66:	19 f4       	brne	.+6      	; 0xc6e <MENU_play_game+0xca>
     c68:	8a 89       	ldd	r24, Y+18	; 0x12
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	19 f5       	brne	.+70     	; 0xcb4 <MENU_play_game+0x110>
			control_msg.data[0] = ADC_read(joyX);
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	49 db       	rcall	.-2414   	; 0x304 <ADC_read>
     c72:	8f 87       	std	Y+15, r24	; 0x0f
			control_msg.data[1] = ADC_read(joyY);
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	46 db       	rcall	.-2420   	; 0x304 <ADC_read>
     c78:	88 8b       	std	Y+16, r24	; 0x10
			control_msg.data[2] = ADC_read(right_slider);
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	43 db       	rcall	.-2426   	; 0x304 <ADC_read>
     c7e:	89 8b       	std	Y+17, r24	; 0x11
			control_msg.data[3] = PINB & RIGHT_BUTTON;
     c80:	86 b3       	in	r24, 0x16	; 22
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	8a 8b       	std	Y+18, r24	; 0x12
			control_msg.data[4] = PINB & LEFT_BUTTON;
     c86:	86 b3       	in	r24, 0x16	; 22
     c88:	82 70       	andi	r24, 0x02	; 2
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
			control_msg.data[5] = PINB & JOY_BUTTON;
     c8c:	86 b3       	in	r24, 0x16	; 22
     c8e:	84 70       	andi	r24, 0x04	; 4
     c90:	8c 8b       	std	Y+20, r24	; 0x14
			control_msg.data[7] = gameover ? 0:1;
     c92:	ce 8a       	std	Y+22, r12	; 0x16
			
			joy_x = ADC_read(joyX);
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	36 db       	rcall	.-2452   	; 0x304 <ADC_read>
     c98:	f8 2e       	mov	r15, r24
			slider_pos = ADC_read(right_slider);
     c9a:	86 e0       	ldi	r24, 0x06	; 6
     c9c:	33 db       	rcall	.-2458   	; 0x304 <ADC_read>
     c9e:	e8 2e       	mov	r14, r24
			button = control_msg.data[3];
     ca0:	da 88       	ldd	r13, Y+18	; 0x12
			CAN_send_message(&control_msg);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0c 96       	adiw	r24, 0x0c	; 12
     ca6:	52 db       	rcall	.-2396   	; 0x34c <CAN_send_message>
			printf("Sending message \n ");
     ca8:	1f 93       	push	r17
     caa:	0f 93       	push	r16
     cac:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <printf>
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
			
		}
		
		
		//Checking if IR is triggered
		CAN_recieve_data(&receive_msg);
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	79 db       	rcall	.-2318   	; 0x3ac <CAN_recieve_data>
		
		if (receive_msg.id == GAMEOVER_DATA_ID) {
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	8a 35       	cpi	r24, 0x5A	; 90
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <MENU_play_game+0x122>
     cc4:	a6 cf       	rjmp	.-180    	; 0xc12 <MENU_play_game+0x6e>
	
			gameover = TRUE;
			MENU_gameover();
     cc6:	0c df       	rcall	.-488    	; 0xae0 <MENU_gameover>
			receive_msg.id = 0;
		}
	
	}
	gameover = FALSE;
}
     cc8:	66 96       	adiw	r28, 0x16	; 22
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	08 95       	ret

00000cee <MENU_wireless_mode>:
	PORTB |=(1<<PB3);
	
}

//Enabling the bluetooth device to send control data from the "Byggolini" app
void MENU_wireless_mode (void){
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	66 97       	sbiw	r28, 0x16	; 22
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
	TIMER_start();
     d02:	a9 d3       	rcall	.+1874   	; 0x1456 <TIMER_start>
	can_message_t receive_msg;
	CAN_create_message(&receive_msg,GAME_ID,7,0);
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	47 e0       	ldi	r20, 0x07	; 7
     d0a:	64 e6       	ldi	r22, 0x64	; 100
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	87 db       	rcall	.-2290   	; 0x422 <CAN_create_message>
	
	
	while(!gameover){
     d14:	80 91 46 02 	lds	r24, 0x0246
     d18:	81 11       	cpse	r24, r1
     d1a:	1b c0       	rjmp	.+54     	; 0xd52 <MENU_wireless_mode+0x64>
		
		can_message_t msg;
		CAN_create_message(&msg, WIRELESS_ID,1,1);
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	60 e5       	ldi	r22, 0x50	; 80
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	ce 01       	movw	r24, r28
     d28:	0c 96       	adiw	r24, 0x0c	; 12
     d2a:	7b db       	rcall	.-2314   	; 0x422 <CAN_create_message>
		CAN_send_message(&msg);
     d2c:	ce 01       	movw	r24, r28
     d2e:	0c 96       	adiw	r24, 0x0c	; 12
     d30:	0d db       	rcall	.-2534   	; 0x34c <CAN_send_message>
		
		//Checking if IR is triggered
		CAN_recieve_data(&receive_msg);
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	3a db       	rcall	.-2444   	; 0x3ac <CAN_recieve_data>
		
		if (receive_msg.id == GAMEOVER_DATA_ID) {
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	8a 35       	cpi	r24, 0x5A	; 90
     d3e:	91 05       	cpc	r25, r1
     d40:	21 f4       	brne	.+8      	; 0xd4a <MENU_wireless_mode+0x5c>
			
			gameover = TRUE;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 46 02 	sts	0x0246, r24
			
			MENU_gameover();
     d48:	cb de       	rcall	.-618    	; 0xae0 <MENU_gameover>
	TIMER_start();
	can_message_t receive_msg;
	CAN_create_message(&receive_msg,GAME_ID,7,0);
	
	
	while(!gameover){
     d4a:	80 91 46 02 	lds	r24, 0x0246
     d4e:	88 23       	and	r24, r24
     d50:	29 f3       	breq	.-54     	; 0xd1c <MENU_wireless_mode+0x2e>
			
			MENU_gameover();
		}
		
	}
	gameover = FALSE;
     d52:	10 92 46 02 	sts	0x0246, r1
}
     d56:	66 96       	adiw	r28, 0x16	; 22
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <MENU_create>:

void MENU_create(){
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29

	//Initializing Main Menu
	main_menu.title = "Main Menu";
     d6c:	82 ee       	ldi	r24, 0xE2	; 226
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	90 93 55 02 	sts	0x0255, r25
     d74:	80 93 54 02 	sts	0x0254, r24
	main_menu.number_of_submenus = 0;
     d78:	10 92 58 02 	sts	0x0258, r1
	main_menu.item = NULL_PTR;
     d7c:	10 92 57 02 	sts	0x0257, r1
     d80:	10 92 56 02 	sts	0x0256, r1
	main_menu.parent = NULL_PTR;
     d84:	10 92 5c 02 	sts	0x025C, r1
     d88:	10 92 5b 02 	sts	0x025B, r1
	main_menu.submenus = malloc(sizeof(menu_t)*4);
     d8c:	84 e2       	ldi	r24, 0x24	; 36
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	48 d6       	rcall	.+3216   	; 0x1a22 <malloc>
     d92:	90 93 5a 02 	sts	0x025A, r25
     d96:	80 93 59 02 	sts	0x0259, r24

	
	//Adding submenus and functions
	menu_t* playgame_f = MENU_add_submenu("Play game", &MENU_play_game, &main_menu);
     d9a:	44 e5       	ldi	r20, 0x54	; 84
     d9c:	52 e0       	ldi	r21, 0x02	; 2
     d9e:	62 ed       	ldi	r22, 0xD2	; 210
     da0:	75 e0       	ldi	r23, 0x05	; 5
     da2:	8c ee       	ldi	r24, 0xEC	; 236
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	78 dc       	rcall	.-1808   	; 0x698 <MENU_add_submenu>
	menu_t* highscores_m = MENU_add_submenu("Highscores", &MENU_print_highscores, &main_menu);
     da8:	44 e5       	ldi	r20, 0x54	; 84
     daa:	52 e0       	ldi	r21, 0x02	; 2
     dac:	64 e2       	ldi	r22, 0x24	; 36
     dae:	73 e0       	ldi	r23, 0x03	; 3
     db0:	86 ef       	ldi	r24, 0xF6	; 246
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	71 dc       	rcall	.-1822   	; 0x698 <MENU_add_submenu>
	menu_t* settings_m = MENU_add_submenu("Settings", NULL_PTR, &main_menu);
     db6:	44 e5       	ldi	r20, 0x54	; 84
     db8:	52 e0       	ldi	r21, 0x02	; 2
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	6a dc       	rcall	.-1836   	; 0x698 <MENU_add_submenu>
     dc4:	ec 01       	movw	r28, r24
	
	menu_t* scream_mode_f = MENU_add_submenu("Scream Mode", &MENU_scream_mode, settings_m);
     dc6:	ac 01       	movw	r20, r24
     dc8:	6e e1       	ldi	r22, 0x1E	; 30
     dca:	73 e0       	ldi	r23, 0x03	; 3
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	63 dc       	rcall	.-1850   	; 0x698 <MENU_add_submenu>
	menu_t* normal_mode_f = MENU_add_submenu("Normal Mode", &MENU_normal_mode, settings_m);
     dd2:	ae 01       	movw	r20, r28
     dd4:	61 e2       	ldi	r22, 0x21	; 33
     dd6:	73 e0       	ldi	r23, 0x03	; 3
     dd8:	86 e1       	ldi	r24, 0x16	; 22
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	5d dc       	rcall	.-1862   	; 0x698 <MENU_add_submenu>
	menu_t* wireless_mode_f = MENU_add_submenu("Wireless Mode", &MENU_wireless_mode, settings_m);
     dde:	ae 01       	movw	r20, r28
     de0:	67 e7       	ldi	r22, 0x77	; 119
     de2:	76 e0       	ldi	r23, 0x06	; 6
     de4:	82 e2       	ldi	r24, 0x22	; 34
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	57 dc       	rcall	.-1874   	; 0x698 <MENU_add_submenu>
	
	//Setting current menu to main menu
	current_menu = main_menu;
     dea:	89 e0       	ldi	r24, 0x09	; 9
     dec:	e4 e5       	ldi	r30, 0x54	; 84
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	ab e4       	ldi	r26, 0x4B	; 75
     df2:	b2 e0       	ldi	r27, 0x02	; 2
     df4:	01 90       	ld	r0, Z+
     df6:	0d 92       	st	X+, r0
     df8:	8a 95       	dec	r24
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <MENU_create+0x8c>
	
	
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <MENU_run_menu>:


//Navigating in the menus
void MENU_run_menu(void){
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	29 97       	sbiw	r28, 0x09	; 9
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
	
	MENU_display_menu(main_menu,0);
     e16:	e1 2c       	mov	r14, r1
     e18:	00 91 54 02 	lds	r16, 0x0254
     e1c:	10 91 55 02 	lds	r17, 0x0255
     e20:	20 91 56 02 	lds	r18, 0x0256
     e24:	30 91 57 02 	lds	r19, 0x0257
     e28:	40 91 58 02 	lds	r20, 0x0258
     e2c:	50 91 59 02 	lds	r21, 0x0259
     e30:	60 91 5a 02 	lds	r22, 0x025A
     e34:	70 91 5b 02 	lds	r23, 0x025B
     e38:	80 91 5c 02 	lds	r24, 0x025C
     e3c:	d3 dc       	rcall	.-1626   	; 0x7e4 <MENU_display_menu>
	uint8_t rocket = TRUE;
     e3e:	77 24       	eor	r7, r7
     e40:	73 94       	inc	r7
	while(1) {
			
		JOY_position_t pos = JOY_getPosition();
		JOY_direction_t dir = JOY_getDirection();
		
		menu_t choice = *current_menu.submenus[current_line];		
     e42:	0f 2e       	mov	r0, r31
     e44:	f9 e0       	ldi	r31, 0x09	; 9
     e46:	ff 2e       	mov	r15, r31
     e48:	f0 2d       	mov	r31, r0
					//Ensuring that the user returns the joystick to neutral position before making another choice
					if (current_line > 0 && last_direction == neutral) {
						current_line--;
						MENU_display_menu(current_menu, current_line);
					}
					last_direction = dir;
     e4a:	68 94       	set
     e4c:	44 24       	eor	r4, r4
     e4e:	41 f8       	bld	r4, 1
					_delay_ms(100);
					break;
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
     e50:	0f 2e       	mov	r0, r31
     e52:	ff e4       	ldi	r31, 0x4F	; 79
     e54:	cf 2e       	mov	r12, r31
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	df 2e       	mov	r13, r31
     e5a:	f0 2d       	mov	r31, r0
						current_line++;
						printf("current line = %d\n", current_line);
						
						MENU_display_menu(current_menu, current_line);
					}
					last_direction = dir;
     e5c:	0f 2e       	mov	r0, r31
     e5e:	f3 e0       	ldi	r31, 0x03	; 3
     e60:	5f 2e       	mov	r5, r31
     e62:	f0 2d       	mov	r31, r0
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
						current_line++;
						printf("current line = %d\n", current_line);
     e64:	0f 2e       	mov	r0, r31
     e66:	f0 e3       	ldi	r31, 0x30	; 48
     e68:	8f 2e       	mov	r8, r31
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	9f 2e       	mov	r9, r31
     e6e:	f0 2d       	mov	r31, r0
					
					_delay_ms(100);
					break;
					
				case neutral:
					last_direction = dir;
     e70:	68 94       	set
     e72:	66 24       	eor	r6, r6
     e74:	62 f8       	bld	r6, 2
				
				//Enabling going to the previous menu by moving the joystick left
				case left:	
					if(last_direction == neutral){
					MENU_back(current_menu);
						if (current_menu.parent != NULL_PTR) {
     e76:	0f 2e       	mov	r0, r31
     e78:	f2 e5       	ldi	r31, 0x52	; 82
     e7a:	af 2e       	mov	r10, r31
     e7c:	f2 e0       	ldi	r31, 0x02	; 2
     e7e:	bf 2e       	mov	r11, r31
     e80:	f0 2d       	mov	r31, r0
							current_menu = choice;
							current_line = 0;
							MENU_display_menu(current_menu, current_line);
						
						}
						last_direction = dir;
     e82:	33 24       	eor	r3, r3
     e84:	33 94       	inc	r3
	MENU_display_menu(main_menu,0);
	uint8_t rocket = TRUE;
	
	while(1) {
			
		JOY_position_t pos = JOY_getPosition();
     e86:	f7 da       	rcall	.-2578   	; 0x476 <JOY_getPosition>
		JOY_direction_t dir = JOY_getDirection();
     e88:	30 db       	rcall	.-2464   	; 0x4ea <JOY_getDirection>
		
		menu_t choice = *current_menu.submenus[current_line];		
     e8a:	90 91 4a 02 	lds	r25, 0x024A
     e8e:	e9 2f       	mov	r30, r25
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	20 91 50 02 	lds	r18, 0x0250
     e9a:	30 91 51 02 	lds	r19, 0x0251
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	01 90       	ld	r0, Z+
     ea4:	f0 81       	ld	r31, Z
     ea6:	e0 2d       	mov	r30, r0
     ea8:	de 01       	movw	r26, r28
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	2f 2d       	mov	r18, r15
     eae:	01 90       	ld	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	2a 95       	dec	r18
     eb4:	e1 f7       	brne	.-8      	; 0xeae <MENU_run_menu+0xac>
		
			//Establishing the joystick commands
			switch (dir) {	
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	71 f0       	breq	.+28     	; 0xed6 <MENU_run_menu+0xd4>
     eba:	38 f4       	brcc	.+14     	; 0xeca <MENU_run_menu+0xc8>
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <MENU_run_menu+0xc0>
     ec0:	ad c0       	rjmp	.+346    	; 0x101c <MENU_run_menu+0x21a>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <MENU_run_menu+0xc6>
     ec6:	6c c0       	rjmp	.+216    	; 0xfa0 <MENU_run_menu+0x19e>
     ec8:	de cf       	rjmp	.-68     	; 0xe86 <MENU_run_menu+0x84>
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	71 f1       	breq	.+92     	; 0xf2a <MENU_run_menu+0x128>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	09 f4       	brne	.+2      	; 0xed4 <MENU_run_menu+0xd2>
     ed2:	d5 c0       	rjmp	.+426    	; 0x107e <MENU_run_menu+0x27c>
     ed4:	d8 cf       	rjmp	.-80     	; 0xe86 <MENU_run_menu+0x84>
					
					
				case up:
						
					//Ensuring that the user returns the joystick to neutral position before making another choice
					if (current_line > 0 && last_direction == neutral) {
     ed6:	99 23       	and	r25, r25
     ed8:	e1 f0       	breq	.+56     	; 0xf12 <MENU_run_menu+0x110>
     eda:	80 91 0a 01 	lds	r24, 0x010A
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <MENU_run_menu+0x110>
						current_line--;
     ee2:	ee 24       	eor	r14, r14
     ee4:	ea 94       	dec	r14
     ee6:	e9 0e       	add	r14, r25
     ee8:	e0 92 4a 02 	sts	0x024A, r14
						MENU_display_menu(current_menu, current_line);
     eec:	00 91 4b 02 	lds	r16, 0x024B
     ef0:	10 91 4c 02 	lds	r17, 0x024C
     ef4:	20 91 4d 02 	lds	r18, 0x024D
     ef8:	30 91 4e 02 	lds	r19, 0x024E
     efc:	40 91 4f 02 	lds	r20, 0x024F
     f00:	50 91 50 02 	lds	r21, 0x0250
     f04:	60 91 51 02 	lds	r22, 0x0251
     f08:	70 91 52 02 	lds	r23, 0x0252
     f0c:	80 91 53 02 	lds	r24, 0x0253
     f10:	69 dc       	rcall	.-1838   	; 0x7e4 <MENU_display_menu>
					}
					last_direction = dir;
     f12:	40 92 0a 01 	sts	0x010A, r4
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	8f e7       	ldi	r24, 0x7F	; 127
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	21 50       	subi	r18, 0x01	; 1
     f1e:	80 40       	sbci	r24, 0x00	; 0
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	e1 f7       	brne	.-8      	; 0xf1c <MENU_run_menu+0x11a>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <MENU_run_menu+0x124>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <MENU_run_menu+0x126>
     f28:	ae cf       	rjmp	.-164    	; 0xe86 <MENU_run_menu+0x84>
					_delay_ms(100);
					break;
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
     f2a:	49 2f       	mov	r20, r25
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	d6 01       	movw	r26, r12
     f30:	2c 91       	ld	r18, X
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	21 50       	subi	r18, 0x01	; 1
     f36:	31 09       	sbc	r19, r1
     f38:	42 17       	cp	r20, r18
     f3a:	53 07       	cpc	r21, r19
     f3c:	2c f5       	brge	.+74     	; 0xf88 <MENU_run_menu+0x186>
     f3e:	80 91 0a 01 	lds	r24, 0x010A
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	09 f5       	brne	.+66     	; 0xf88 <MENU_run_menu+0x186>
						current_line++;
     f46:	9f 5f       	subi	r25, 0xFF	; 255
     f48:	90 93 4a 02 	sts	0x024A, r25
						printf("current line = %d\n", current_line);
     f4c:	1f 92       	push	r1
     f4e:	9f 93       	push	r25
     f50:	9f 92       	push	r9
     f52:	8f 92       	push	r8
     f54:	51 d7       	rcall	.+3746   	; 0x1df8 <printf>
						
						MENU_display_menu(current_menu, current_line);
     f56:	e0 90 4a 02 	lds	r14, 0x024A
     f5a:	00 91 4b 02 	lds	r16, 0x024B
     f5e:	10 91 4c 02 	lds	r17, 0x024C
     f62:	20 91 4d 02 	lds	r18, 0x024D
     f66:	30 91 4e 02 	lds	r19, 0x024E
     f6a:	40 91 4f 02 	lds	r20, 0x024F
     f6e:	50 91 50 02 	lds	r21, 0x0250
     f72:	60 91 51 02 	lds	r22, 0x0251
     f76:	70 91 52 02 	lds	r23, 0x0252
     f7a:	80 91 53 02 	lds	r24, 0x0253
     f7e:	32 dc       	rcall	.-1948   	; 0x7e4 <MENU_display_menu>
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
					}
					last_direction = dir;
     f88:	50 92 0a 01 	sts	0x010A, r5
     f8c:	bf ef       	ldi	r27, 0xFF	; 255
     f8e:	ef e7       	ldi	r30, 0x7F	; 127
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	b1 50       	subi	r27, 0x01	; 1
     f94:	e0 40       	sbci	r30, 0x00	; 0
     f96:	f0 40       	sbci	r31, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <MENU_run_menu+0x190>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <MENU_run_menu+0x19a>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <MENU_run_menu+0x19c>
     f9e:	73 cf       	rjmp	.-282    	; 0xe86 <MENU_run_menu+0x84>
					_delay_ms(100);
					break;
					
				//Enabling a choice to be made by moving the joystick right
				case right:
					if (rocket == TRUE) {
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	72 16       	cp	r7, r18
     fa4:	81 f1       	breq	.+96     	; 0x1006 <MENU_run_menu+0x204>
						
						rocket = FALSE;
					}
					else {
				
						if (last_direction == neutral) {
     fa6:	80 91 0a 01 	lds	r24, 0x010A
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	49 f5       	brne	.+82     	; 0x1000 <MENU_run_menu+0x1fe>
							MENU_choose(choice);
     fae:	09 81       	ldd	r16, Y+1	; 0x01
     fb0:	1a 81       	ldd	r17, Y+2	; 0x02
     fb2:	2b 81       	ldd	r18, Y+3	; 0x03
     fb4:	3c 81       	ldd	r19, Y+4	; 0x04
     fb6:	4d 81       	ldd	r20, Y+5	; 0x05
     fb8:	5e 81       	ldd	r21, Y+6	; 0x06
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	7b dc       	rcall	.-1802   	; 0x8b8 <MENU_choose>
							current_menu = choice;
     fc2:	fe 01       	movw	r30, r28
     fc4:	31 96       	adiw	r30, 0x01	; 1
     fc6:	ab e4       	ldi	r26, 0x4B	; 75
     fc8:	b2 e0       	ldi	r27, 0x02	; 2
     fca:	8f 2d       	mov	r24, r15
     fcc:	01 90       	ld	r0, Z+
     fce:	0d 92       	st	X+, r0
     fd0:	8a 95       	dec	r24
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <MENU_run_menu+0x1ca>
							current_line = 0;
     fd4:	10 92 4a 02 	sts	0x024A, r1
							MENU_display_menu(current_menu, current_line);
     fd8:	e1 2c       	mov	r14, r1
     fda:	00 91 4b 02 	lds	r16, 0x024B
     fde:	10 91 4c 02 	lds	r17, 0x024C
     fe2:	20 91 4d 02 	lds	r18, 0x024D
     fe6:	30 91 4e 02 	lds	r19, 0x024E
     fea:	40 91 4f 02 	lds	r20, 0x024F
     fee:	50 91 50 02 	lds	r21, 0x0250
     ff2:	60 91 51 02 	lds	r22, 0x0251
     ff6:	70 91 52 02 	lds	r23, 0x0252
     ffa:	80 91 53 02 	lds	r24, 0x0253
     ffe:	f2 db       	rcall	.-2076   	; 0x7e4 <MENU_display_menu>
						
						}
						last_direction = dir;
    1000:	30 92 0a 01 	sts	0x010A, r3
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <MENU_run_menu+0x206>
					
				//Enabling a choice to be made by moving the joystick right
				case right:
					if (rocket == TRUE) {
						
						rocket = FALSE;
    1006:	71 2c       	mov	r7, r1
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f e7       	ldi	r25, 0x7F	; 127
    100c:	a1 e0       	ldi	r26, 0x01	; 1
    100e:	81 50       	subi	r24, 0x01	; 1
    1010:	90 40       	sbci	r25, 0x00	; 0
    1012:	a0 40       	sbci	r26, 0x00	; 0
    1014:	e1 f7       	brne	.-8      	; 0x100e <MENU_run_menu+0x20c>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <MENU_run_menu+0x216>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <MENU_run_menu+0x218>
    101a:	35 cf       	rjmp	.-406    	; 0xe86 <MENU_run_menu+0x84>
					_delay_ms(100);
					break;
				
				//Enabling going to the previous menu by moving the joystick left
				case left:	
					if(last_direction == neutral){
    101c:	80 91 0a 01 	lds	r24, 0x010A
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	09 f5       	brne	.+66     	; 0x1066 <MENU_run_menu+0x264>
					MENU_back(current_menu);
    1024:	00 91 4b 02 	lds	r16, 0x024B
    1028:	10 91 4c 02 	lds	r17, 0x024C
    102c:	20 91 4d 02 	lds	r18, 0x024D
    1030:	30 91 4e 02 	lds	r19, 0x024E
    1034:	40 91 4f 02 	lds	r20, 0x024F
    1038:	50 91 50 02 	lds	r21, 0x0250
    103c:	60 91 51 02 	lds	r22, 0x0251
    1040:	70 91 52 02 	lds	r23, 0x0252
    1044:	80 91 53 02 	lds	r24, 0x0253
    1048:	9c db       	rcall	.-2248   	; 0x782 <MENU_back>
						if (current_menu.parent != NULL_PTR) {
    104a:	d5 01       	movw	r26, r10
    104c:	ed 91       	ld	r30, X+
    104e:	fc 91       	ld	r31, X
    1050:	30 97       	sbiw	r30, 0x00	; 0
    1052:	39 f0       	breq	.+14     	; 0x1062 <MENU_run_menu+0x260>
							current_menu = *current_menu.parent;
    1054:	ab e4       	ldi	r26, 0x4B	; 75
    1056:	b2 e0       	ldi	r27, 0x02	; 2
    1058:	8f 2d       	mov	r24, r15
    105a:	01 90       	ld	r0, Z+
    105c:	0d 92       	st	X+, r0
    105e:	8a 95       	dec	r24
    1060:	e1 f7       	brne	.-8      	; 0x105a <MENU_run_menu+0x258>
						}
							
						current_line = 0;
    1062:	10 92 4a 02 	sts	0x024A, r1
					}
					
					last_direction = dir;
    1066:	10 92 0a 01 	sts	0x010A, r1
    106a:	bf ef       	ldi	r27, 0xFF	; 255
    106c:	ef e7       	ldi	r30, 0x7F	; 127
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	b1 50       	subi	r27, 0x01	; 1
    1072:	e0 40       	sbci	r30, 0x00	; 0
    1074:	f0 40       	sbci	r31, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <MENU_run_menu+0x26e>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <MENU_run_menu+0x278>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <MENU_run_menu+0x27a>
    107c:	04 cf       	rjmp	.-504    	; 0xe86 <MENU_run_menu+0x84>
					
					_delay_ms(100);
					break;
					
				case neutral:
					last_direction = dir;
    107e:	60 92 0a 01 	sts	0x010A, r6
    1082:	2f ef       	ldi	r18, 0xFF	; 255
    1084:	8f e7       	ldi	r24, 0x7F	; 127
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	21 50       	subi	r18, 0x01	; 1
    108a:	80 40       	sbci	r24, 0x00	; 0
    108c:	90 40       	sbci	r25, 0x00	; 0
    108e:	e1 f7       	brne	.-8      	; 0x1088 <MENU_run_menu+0x286>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <MENU_run_menu+0x290>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <MENU_run_menu+0x292>
					_delay_ms(100);
					break;
						
			}
	
		}
    1094:	f8 ce       	rjmp	.-528    	; 0xe86 <MENU_run_menu+0x84>

00001096 <OLED_init>:
	}
}

uint8_t OLED_pos(uint8_t row){
	return current_line;
}
    1096:	e0 e0       	ldi	r30, 0x00	; 0
    1098:	f0 e1       	ldi	r31, 0x10	; 16
    109a:	8e ea       	ldi	r24, 0xAE	; 174
    109c:	80 83       	st	Z, r24
    109e:	81 ea       	ldi	r24, 0xA1	; 161
    10a0:	80 83       	st	Z, r24
    10a2:	8a ed       	ldi	r24, 0xDA	; 218
    10a4:	80 83       	st	Z, r24
    10a6:	82 e1       	ldi	r24, 0x12	; 18
    10a8:	80 83       	st	Z, r24
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	80 83       	st	Z, r24
    10ae:	88 ea       	ldi	r24, 0xA8	; 168
    10b0:	80 83       	st	Z, r24
    10b2:	8f e3       	ldi	r24, 0x3F	; 63
    10b4:	80 83       	st	Z, r24
    10b6:	85 ed       	ldi	r24, 0xD5	; 213
    10b8:	80 83       	st	Z, r24
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	80 83       	st	Z, r24
    10be:	81 e8       	ldi	r24, 0x81	; 129
    10c0:	80 83       	st	Z, r24
    10c2:	80 e5       	ldi	r24, 0x50	; 80
    10c4:	80 83       	st	Z, r24
    10c6:	89 ed       	ldi	r24, 0xD9	; 217
    10c8:	80 83       	st	Z, r24
    10ca:	81 e2       	ldi	r24, 0x21	; 33
    10cc:	80 83       	st	Z, r24
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	80 83       	st	Z, r24
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	80 83       	st	Z, r24
    10d6:	8b ed       	ldi	r24, 0xDB	; 219
    10d8:	80 83       	st	Z, r24
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	80 83       	st	Z, r24
    10de:	8d ea       	ldi	r24, 0xAD	; 173
    10e0:	80 83       	st	Z, r24
    10e2:	10 82       	st	Z, r1
    10e4:	84 ea       	ldi	r24, 0xA4	; 164
    10e6:	80 83       	st	Z, r24
    10e8:	86 ea       	ldi	r24, 0xA6	; 166
    10ea:	80 83       	st	Z, r24
    10ec:	8f ea       	ldi	r24, 0xAF	; 175
    10ee:	80 83       	st	Z, r24
    10f0:	b9 98       	cbi	0x17, 1	; 23
    10f2:	ba 98       	cbi	0x17, 2	; 23
    10f4:	08 95       	ret

000010f6 <OLED_goto_line>:
    10f6:	90 eb       	ldi	r25, 0xB0	; 176
    10f8:	98 0f       	add	r25, r24
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	f0 e1       	ldi	r31, 0x10	; 16
    10fe:	90 83       	st	Z, r25
    1100:	90 e1       	ldi	r25, 0x10	; 16
    1102:	90 83       	st	Z, r25
    1104:	10 82       	st	Z, r1
    1106:	80 93 5d 02 	sts	0x025D, r24
    110a:	08 95       	ret

0000110c <OLED_clear_display>:
    110c:	80 eb       	ldi	r24, 0xB0	; 176
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e1       	ldi	r27, 0x10	; 16
    1112:	20 e1       	ldi	r18, 0x10	; 16
    1114:	e0 e0       	ldi	r30, 0x00	; 0
    1116:	f2 e1       	ldi	r31, 0x12	; 18
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	98 0f       	add	r25, r24
    111c:	8c 93       	st	X, r24
    111e:	2c 93       	st	X, r18
    1120:	1c 92       	st	X, r1
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	10 82       	st	Z, r1
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 38       	cpi	r24, 0x80	; 128
    112a:	e1 f7       	brne	.-8      	; 0x1124 <OLED_clear_display+0x18>
    112c:	98 3b       	cpi	r25, 0xB8	; 184
    112e:	11 f0       	breq	.+4      	; 0x1134 <OLED_clear_display+0x28>
    1130:	89 2f       	mov	r24, r25
    1132:	f2 cf       	rjmp	.-28     	; 0x1118 <OLED_clear_display+0xc>
    1134:	10 92 5d 02 	sts	0x025D, r1
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	dd cf       	rjmp	.-70     	; 0x10f6 <OLED_goto_line>
    113c:	08 95       	ret

0000113e <OLED_goto_column>:
    113e:	98 2f       	mov	r25, r24
    1140:	92 95       	swap	r25
    1142:	9f 70       	andi	r25, 0x0F	; 15
    1144:	90 5f       	subi	r25, 0xF0	; 240
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f0 e1       	ldi	r31, 0x10	; 16
    114a:	90 83       	st	Z, r25
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	80 83       	st	Z, r24
    1150:	08 95       	ret

00001152 <OLED_print_char>:

//Printing a character to the OLED
void OLED_print_char(char c){
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	b0 97       	sbiw	r30, 0x20	; 32
    1158:	cf 01       	movw	r24, r30
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	e8 0f       	add	r30, r24
    1164:	f9 1f       	adc	r31, r25
    1166:	e6 53       	subi	r30, 0x36	; 54
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET][i]));
    116e:	a0 e0       	ldi	r26, 0x00	; 0
    1170:	b2 e1       	ldi	r27, 0x12	; 18
    1172:	24 91       	lpm	r18, Z
    1174:	2c 93       	st	X, r18
	return current_line;
}

//Printing a character to the OLED
void OLED_print_char(char c){
	for (int i = 0; i < font5_size; i++) {
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	85 30       	cpi	r24, 0x05	; 5
    117c:	91 05       	cpc	r25, r1
    117e:	c9 f7       	brne	.-14     	; 0x1172 <OLED_print_char+0x20>
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET][i]));
	}

}
    1180:	08 95       	ret

00001182 <OLED_print_capital_char>:


void OLED_print_capital_char(char c){
    1182:	e8 2f       	mov	r30, r24
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	e0 54       	subi	r30, 0x40	; 64
    1188:	f1 09       	sbc	r31, r1
    118a:	cf 01       	movw	r24, r30
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	e8 0f       	add	r30, r24
    1196:	f9 1f       	adc	r31, r25
    1198:	e6 53       	subi	r30, 0x36	; 54
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET - CAPITAL_LETTER_OFFSET][i]));
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b2 e1       	ldi	r27, 0x12	; 18
    11a4:	24 91       	lpm	r18, Z
    11a6:	2c 93       	st	X, r18

}


void OLED_print_capital_char(char c){
	for (int i = 0; i < font5_size; i++) {
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	31 96       	adiw	r30, 0x01	; 1
    11ac:	85 30       	cpi	r24, 0x05	; 5
    11ae:	91 05       	cpc	r25, r1
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <OLED_print_capital_char+0x22>
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET - CAPITAL_LETTER_OFFSET][i]));
	}

}
    11b2:	08 95       	ret

000011b4 <OLED_print_inverted_char>:

//Printing a character in black with a white bacground
void OLED_print_inverted_char(char c){
    11b4:	e8 2f       	mov	r30, r24
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	b0 97       	sbiw	r30, 0x20	; 32
    11ba:	cf 01       	movw	r24, r30
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	e8 0f       	add	r30, r24
    11c6:	f9 1f       	adc	r31, r25
    11c8:	e6 53       	subi	r30, 0x36	; 54
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = ~pgm_read_byte(&((font5[c - ASCII_OFFSET][i])));
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b2 e1       	ldi	r27, 0x12	; 18
    11d4:	24 91       	lpm	r18, Z
    11d6:	20 95       	com	r18
    11d8:	2c 93       	st	X, r18

}

//Printing a character in black with a white bacground
void OLED_print_inverted_char(char c){
	for (int i = 0; i < font5_size; i++) {
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	31 96       	adiw	r30, 0x01	; 1
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	91 05       	cpc	r25, r1
    11e2:	c1 f7       	brne	.-16     	; 0x11d4 <OLED_print_inverted_char+0x20>
		*ext_oled_data = ~pgm_read_byte(&((font5[c - ASCII_OFFSET][i])));
	}

}
    11e4:	08 95       	ret

000011e6 <OLED_print_string>:

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
    11f2:	fc 01       	movw	r30, r24
    11f4:	01 90       	ld	r0, Z+
    11f6:	00 20       	and	r0, r0
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <OLED_print_string+0xe>
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	e8 1b       	sub	r30, r24
    11fe:	f9 0b       	sbc	r31, r25
    1200:	cf 01       	movw	r24, r30
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	e8 0f       	add	r30, r24
    120c:	f9 1f       	adc	r31, r25
    120e:	f6 95       	lsr	r31
    1210:	e7 95       	ror	r30
    1212:	80 e4       	ldi	r24, 0x40	; 64
    1214:	8e 1b       	sub	r24, r30
    1216:	93 df       	rcall	.-218    	; 0x113e <OLED_goto_column>

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    1218:	10 e0       	ldi	r17, 0x00	; 0
}

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
    121a:	00 e0       	ldi	r16, 0x00	; 0
	while (c[str_index] != '\0') {
		line_index++;
		
		OLED_print_char(c[str_index++]);
		if (line_index > 122/font5_size) {
			line_index = 0;
    121c:	f1 2c       	mov	r15, r1
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
	while (c[str_index] != '\0') {
    121e:	0c c0       	rjmp	.+24     	; 0x1238 <OLED_print_string+0x52>
		line_index++;
    1220:	1f 5f       	subi	r17, 0xFF	; 255
		
		OLED_print_char(c[str_index++]);
    1222:	0f 5f       	subi	r16, 0xFF	; 255
    1224:	96 df       	rcall	.-212    	; 0x1152 <OLED_print_char>
		if (line_index > 122/font5_size) {
    1226:	19 31       	cpi	r17, 0x19	; 25
    1228:	38 f0       	brcs	.+14     	; 0x1238 <OLED_print_string+0x52>
			line_index = 0;
			OLED_goto_line(++current_line);
    122a:	80 91 5d 02 	lds	r24, 0x025D
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 5d 02 	sts	0x025D, r24
    1234:	60 df       	rcall	.-320    	; 0x10f6 <OLED_goto_line>
	while (c[str_index] != '\0') {
		line_index++;
		
		OLED_print_char(c[str_index++]);
		if (line_index > 122/font5_size) {
			line_index = 0;
    1236:	1f 2d       	mov	r17, r15
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
	while (c[str_index] != '\0') {
    1238:	fe 01       	movw	r30, r28
    123a:	e0 0f       	add	r30, r16
    123c:	f1 1d       	adc	r31, r1
    123e:	80 81       	ld	r24, Z
    1240:	81 11       	cpse	r24, r1
    1242:	ee cf       	rjmp	.-36     	; 0x1220 <OLED_print_string+0x3a>
			
		}
	}
	
	
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	08 95       	ret

00001250 <OLED_print_header>:

//Printing a string in all caps at the top of the OLED
void OLED_print_header(char c[]){
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
    125c:	fc 01       	movw	r30, r24
    125e:	01 90       	ld	r0, Z+
    1260:	00 20       	and	r0, r0
    1262:	e9 f7       	brne	.-6      	; 0x125e <OLED_print_header+0xe>
    1264:	31 97       	sbiw	r30, 0x01	; 1
    1266:	e8 1b       	sub	r30, r24
    1268:	f9 0b       	sbc	r31, r25
    126a:	cf 01       	movw	r24, r30
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	e8 0f       	add	r30, r24
    1276:	f9 1f       	adc	r31, r25
    1278:	f6 95       	lsr	r31
    127a:	e7 95       	ror	r30
    127c:	80 e4       	ldi	r24, 0x40	; 64
    127e:	8e 1b       	sub	r24, r30
    1280:	5e df       	rcall	.-324    	; 0x113e <OLED_goto_column>
	
	while (c[str_index] != '\0') {
    1282:	01 e0       	ldi	r16, 0x01	; 1

//Printing a string in all caps at the top of the OLED
void OLED_print_header(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    1284:	10 e0       	ldi	r17, 0x00	; 0
		}
		else {
			OLED_print_char(c[str_index++]);
		}
		if (line_index > 122/font5_size) {
			line_index = 0;
    1286:	f1 2c       	mov	r15, r1
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
	
	while (c[str_index] != '\0') {
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <OLED_print_header+0x5e>
		line_index++;
    128a:	1f 5f       	subi	r17, 0xFF	; 255
		if (c[str_index] >= 97 && c[str_index] <= 122) {
    128c:	9f e9       	ldi	r25, 0x9F	; 159
    128e:	98 0f       	add	r25, r24
    1290:	9a 31       	cpi	r25, 0x1A	; 26
    1292:	10 f4       	brcc	.+4      	; 0x1298 <OLED_print_header+0x48>
			OLED_print_capital_char(c[str_index++]);
    1294:	76 df       	rcall	.-276    	; 0x1182 <OLED_print_capital_char>
    1296:	01 c0       	rjmp	.+2      	; 0x129a <OLED_print_header+0x4a>
		}
		else {
			OLED_print_char(c[str_index++]);
    1298:	5c df       	rcall	.-328    	; 0x1152 <OLED_print_char>
		}
		if (line_index > 122/font5_size) {
    129a:	19 31       	cpi	r17, 0x19	; 25
    129c:	38 f0       	brcs	.+14     	; 0x12ac <OLED_print_header+0x5c>
			line_index = 0;
			OLED_goto_line(++current_line);
    129e:	80 91 5d 02 	lds	r24, 0x025D
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	80 93 5d 02 	sts	0x025D, r24
    12a8:	26 df       	rcall	.-436    	; 0x10f6 <OLED_goto_line>
		}
		else {
			OLED_print_char(c[str_index++]);
		}
		if (line_index > 122/font5_size) {
			line_index = 0;
    12aa:	1f 2d       	mov	r17, r15
    12ac:	0f 5f       	subi	r16, 0xFF	; 255
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	80 0f       	add	r24, r16
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
	
	while (c[str_index] != '\0') {
    12b2:	fe 01       	movw	r30, r28
    12b4:	e8 0f       	add	r30, r24
    12b6:	f1 1d       	adc	r31, r1
    12b8:	80 81       	ld	r24, Z
    12ba:	81 11       	cpse	r24, r1
    12bc:	e6 cf       	rjmp	.-52     	; 0x128a <OLED_print_header+0x3a>
			
		}
	}
	
	
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	08 95       	ret

000012ca <OLED_int_to_string>:

//Converting an integer to a string
char* OLED_int_to_string(int integer){
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	8c 01       	movw	r16, r24
	}
	char result[n+1];
	itoa(integer,result, 10);
	return result;
	
}
    12e0:	ed b6       	in	r14, 0x3d	; 61
    12e2:	fe b6       	in	r15, 0x3e	; 62
}

//Converting an integer to a string
char* OLED_int_to_string(int integer){
	int n;
	if (integer == 0){
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	79 f0       	breq	.+30     	; 0x1306 <OLED_int_to_string+0x3c>
		n = 1;
	}
	else{
		n = floor(log10(integer)+1);
    12e8:	bc 01       	movw	r22, r24
    12ea:	88 27       	eor	r24, r24
    12ec:	77 fd       	sbrc	r23, 7
    12ee:	80 95       	com	r24
    12f0:	98 2f       	mov	r25, r24
    12f2:	be d1       	rcall	.+892    	; 0x1670 <__floatsisf>
    12f4:	9c d2       	rcall	.+1336   	; 0x182e <log10>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	5f e3       	ldi	r21, 0x3F	; 63
    12fe:	21 d1       	rcall	.+578    	; 0x1542 <__addsf3>
    1300:	f2 d1       	rcall	.+996    	; 0x16e6 <floor>
    1302:	83 d1       	rcall	.+774    	; 0x160a <__fixsfsi>
    1304:	02 c0       	rjmp	.+4      	; 0x130a <OLED_int_to_string+0x40>

//Converting an integer to a string
char* OLED_int_to_string(int integer){
	int n;
	if (integer == 0){
		n = 1;
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	70 e0       	ldi	r23, 0x00	; 0
	}
	else{
		n = floor(log10(integer)+1);
	}
	char result[n+1];
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8d b7       	in	r24, 0x3d	; 61
    1310:	9e b7       	in	r25, 0x3e	; 62
    1312:	86 1b       	sub	r24, r22
    1314:	97 0b       	sbc	r25, r23
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	9e bf       	out	0x3e, r25	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	8d bf       	out	0x3d, r24	; 61
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1324:	4a e0       	ldi	r20, 0x0A	; 10
    1326:	bc 01       	movw	r22, r24
    1328:	c8 01       	movw	r24, r16
    132a:	f9 d4       	rcall	.+2546   	; 0x1d1e <__itoa_ncheck>
	itoa(integer,result, 10);
	return result;
	
}
    132c:	c6 01       	movw	r24, r12
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	fe be       	out	0x3e, r15	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	ed be       	out	0x3d, r14	; 61
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	08 95       	ret

0000134a <OLED_print_inverted_string>:


//Printing a black string with white background
void OLED_print_inverted_string(char c[]) {
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
	
	for (uint8_t i = 0; i < columns_in_line; i++) {
    1356:	80 e0       	ldi	r24, 0x00	; 0
		*ext_oled_data = FILL;
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f2 e1       	ldi	r31, 0x12	; 18
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	90 83       	st	Z, r25


//Printing a black string with white background
void OLED_print_inverted_string(char c[]) {
	
	for (uint8_t i = 0; i < columns_in_line; i++) {
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	80 38       	cpi	r24, 0x80	; 128
    1364:	e1 f7       	brne	.-8      	; 0x135e <OLED_print_inverted_string+0x14>
	}
	
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
    1366:	fe 01       	movw	r30, r28
    1368:	01 90       	ld	r0, Z+
    136a:	00 20       	and	r0, r0
    136c:	e9 f7       	brne	.-6      	; 0x1368 <OLED_print_inverted_string+0x1e>
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	ec 1b       	sub	r30, r28
    1372:	fd 0b       	sbc	r31, r29
    1374:	9f 01       	movw	r18, r30
    1376:	22 0f       	add	r18, r18
    1378:	33 1f       	adc	r19, r19
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	e2 0f       	add	r30, r18
    1380:	f3 1f       	adc	r31, r19
    1382:	9f 01       	movw	r18, r30
    1384:	36 95       	lsr	r19
    1386:	27 95       	ror	r18
	OLED_goto_column(start_index_centralized);
    1388:	80 e4       	ldi	r24, 0x40	; 64
    138a:	82 1b       	sub	r24, r18
    138c:	d8 de       	rcall	.-592    	; 0x113e <OLED_goto_column>
	
	}
	
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    138e:	10 e0       	ldi	r17, 0x00	; 0
		*ext_oled_data = FILL;
	
	}
	
	
	uint8_t str_index = 0;
    1390:	00 e0       	ldi	r16, 0x00	; 0
	while (c[str_index] != '\0') {
		line_index++;
		OLED_print_inverted_char(c[str_index++]);
		
		if (line_index > 122/font5_size) {
			line_index = 0;
    1392:	f1 2c       	mov	r15, r1
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
	OLED_goto_column(start_index_centralized);
	while (c[str_index] != '\0') {
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <OLED_print_inverted_string+0x64>
		line_index++;
    1396:	1f 5f       	subi	r17, 0xFF	; 255
		OLED_print_inverted_char(c[str_index++]);
    1398:	0f 5f       	subi	r16, 0xFF	; 255
    139a:	0c df       	rcall	.-488    	; 0x11b4 <OLED_print_inverted_char>
		
		if (line_index > 122/font5_size) {
    139c:	19 31       	cpi	r17, 0x19	; 25
    139e:	38 f0       	brcs	.+14     	; 0x13ae <OLED_print_inverted_string+0x64>
			line_index = 0;
			OLED_goto_line(++current_line);
    13a0:	80 91 5d 02 	lds	r24, 0x025D
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	80 93 5d 02 	sts	0x025D, r24
    13aa:	a5 de       	rcall	.-694    	; 0x10f6 <OLED_goto_line>
	while (c[str_index] != '\0') {
		line_index++;
		OLED_print_inverted_char(c[str_index++]);
		
		if (line_index > 122/font5_size) {
			line_index = 0;
    13ac:	1f 2d       	mov	r17, r15
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
	OLED_goto_column(start_index_centralized);
	while (c[str_index] != '\0') {
    13ae:	fe 01       	movw	r30, r28
    13b0:	e0 0f       	add	r30, r16
    13b2:	f1 1d       	adc	r31, r1
    13b4:	80 81       	ld	r24, Z
    13b6:	81 11       	cpse	r24, r1
    13b8:	ee cf       	rjmp	.-36     	; 0x1396 <OLED_print_inverted_string+0x4c>
			
		}
	
	
	}
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	08 95       	ret

000013c6 <SPI_init>:


void SPI_init() {
	
	#ifdef __AVR_ATmega162__
	DDRB |= (1<<DDB7);						//SCK
    13c6:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1<<DDB5);						//MOSI
    13c8:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1<<DDB4);						//SS
    13ca:	bc 9a       	sbi	0x17, 4	; 23
	DDRB &= ~(1<<DDB6);						//MISO
    13cc:	be 98       	cbi	0x17, 6	; 23
	DDRB &= ~(1<<DDB3);						//MISO
	
	#endif
	
	
	SPCR &= ~(1<<DORD);						//MSB of data word transmitted first
    13ce:	6d 98       	cbi	0x0d, 5	; 13
	SPCR |= (1<<MSTR);						//Master mode enable
    13d0:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR |= (1<<SPE);						//SPI Enable
    13d2:	6e 9a       	sbi	0x0d, 6	; 13
	SPCR |= (1<<SPR0);						//SCK frequency = F_OSC/16 
    13d4:	68 9a       	sbi	0x0d, 0	; 13
	SPCR &= ~(1<<SPR1);
    13d6:	69 98       	cbi	0x0d, 1	; 13
    13d8:	08 95       	ret

000013da <SPI_send>:


void SPI_send(uint8_t message) {
	
	//Start transmission
	SPDR = message;							
    13da:	8f b9       	out	0x0f, r24	; 15

	//Wait until transmission is complete
	while (!(SPSR & (1<<SPIF))) {}			
    13dc:	77 9b       	sbis	0x0e, 7	; 14
    13de:	fe cf       	rjmp	.-4      	; 0x13dc <SPI_send+0x2>
}
    13e0:	08 95       	ret

000013e2 <SPI_read>:


uint8_t SPI_read() {
	
	//Transmisson of dummy byte, to be able to read from slave
	SPI_send(0x01);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	fa df       	rcall	.-12     	; 0x13da <SPI_send>
								
	//Wait until transmission is complete
	while (!(SPSR & (1<<SPIF))) {}			
    13e6:	77 9b       	sbis	0x0e, 7	; 14
    13e8:	fe cf       	rjmp	.-4      	; 0x13e6 <SPI_read+0x4>
	
	return SPDR;							
    13ea:	8f b1       	in	r24, 0x0f	; 15
	
}
    13ec:	08 95       	ret

000013ee <SPI_enable_chipselect>:


void SPI_enable_chipselect(void) { 
	PORTB &= ~(1<<PB4);
    13ee:	c4 98       	cbi	0x18, 4	; 24
    13f0:	08 95       	ret

000013f2 <SPI_disable_chipselect>:
}



void SPI_disable_chipselect(void) { 
	PORTB |= (1<<PB4);
    13f2:	c4 9a       	sbi	0x18, 4	; 24
    13f4:	08 95       	ret

000013f6 <SRAM_init>:

void SRAM_init(void){
	
	#ifdef __AVR_ATmega162__
	// enable external reset
	MCUCR |= (1 << SRE);
    13f6:	85 b7       	in	r24, 0x35	; 53
    13f8:	80 68       	ori	r24, 0x80	; 128
    13fa:	85 bf       	out	0x35, r24	; 53
	
	SFIOR |= (1 << XMM2);
    13fc:	80 b7       	in	r24, 0x30	; 48
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	80 bf       	out	0x30, r24	; 48
    1402:	08 95       	ret

00001404 <__vector_13>:

uint16_t volatile static stopwatch = 0;
uint8_t counter = 0;


ISR(TIMER1_COMPA_vect) {
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
	
	stopwatch = stopwatch + 1;
    1412:	80 91 5e 02 	lds	r24, 0x025E
    1416:	90 91 5f 02 	lds	r25, 0x025F
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	90 93 5f 02 	sts	0x025F, r25
    1420:	80 93 5e 02 	sts	0x025E, r24
    1424:	8c ec       	ldi	r24, 0xCC	; 204
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <__vector_13+0x24>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <__vector_13+0x2a>
    142e:	00 00       	nop
	_delay_ms(1);
} 
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <TIMER_init>:

void TIMER_init() {
	
	
	//CTC mode for highscore_timer
	TCCR1B |= (1 << WGM12);
    143e:	8e b5       	in	r24, 0x2e	; 46
    1440:	88 60       	ori	r24, 0x08	; 8
    1442:	8e bd       	out	0x2e, r24	; 46
	
	//Want to count each second:
	//Clock frequency = 16 000 000 and prescaler = 1024 ---> 4915200/1024 = 4800 ticks per sec
	
	//Defining top value of counter for highscore_timer --> reset each second
	OCR1A = 4800;
    1444:	80 ec       	ldi	r24, 0xC0	; 192
    1446:	92 e1       	ldi	r25, 0x12	; 18
    1448:	9b bd       	out	0x2b, r25	; 43
    144a:	8a bd       	out	0x2a, r24	; 42

	
	//Enable global interrupt
	sei();
    144c:	78 94       	sei
	
	//Enable Timer Output Compare Match A Interrupt for highscore_timer
	TIMSK |= (1 << OCIE1A);
    144e:	89 b7       	in	r24, 0x39	; 57
    1450:	80 64       	ori	r24, 0x40	; 64
    1452:	89 bf       	out	0x39, r24	; 57
    1454:	08 95       	ret

00001456 <TIMER_start>:
	
}

void TIMER_start(){
	
	stopwatch = 0;
    1456:	10 92 5f 02 	sts	0x025F, r1
    145a:	10 92 5e 02 	sts	0x025E, r1
	
	// initialize counter
	TCNT1 = 0;
    145e:	1d bc       	out	0x2d, r1	; 45
    1460:	1c bc       	out	0x2c, r1	; 44
	
	//Prescaler = 1024
	TCCR1B |= (1 << CS12)|(1 << CS10);
    1462:	8e b5       	in	r24, 0x2e	; 46
    1464:	85 60       	ori	r24, 0x05	; 5
    1466:	8e bd       	out	0x2e, r24	; 46
    1468:	08 95       	ret

0000146a <TIMER_stop>:


void TIMER_stop() {
	
	//Turning off clock source
	TCCR0 &= ~(1<<CS12) & ~(1 << CS11) & ~(1 << CS10);
    146a:	83 b7       	in	r24, 0x33	; 51
    146c:	88 7f       	andi	r24, 0xF8	; 248
    146e:	83 bf       	out	0x33, r24	; 51
    1470:	08 95       	ret

00001472 <TIMER_get_time>:
}



uint16_t TIMER_get_time() {
	return stopwatch;
    1472:	80 91 5e 02 	lds	r24, 0x025E
    1476:	90 91 5f 02 	lds	r25, 0x025F
}
    147a:	08 95       	ret

0000147c <UART_Init>:
    147c:	90 bd       	out	0x20, r25	; 32
    147e:	89 b9       	out	0x09, r24	; 9
    1480:	88 e1       	ldi	r24, 0x18	; 24
    1482:	8a b9       	out	0x0a, r24	; 10
    1484:	59 98       	cbi	0x0b, 1	; 11
    1486:	f8 94       	cli
    1488:	57 9a       	sbi	0x0a, 7	; 10
    148a:	5f 9a       	sbi	0x0b, 7	; 11
    148c:	78 94       	sei
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	08 95       	ret

00001494 <UART_Transmit>:
    1494:	5d 9b       	sbis	0x0b, 5	; 11
    1496:	fe cf       	rjmp	.-4      	; 0x1494 <UART_Transmit>
    1498:	8c b9       	out	0x0c, r24	; 12
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	08 95       	ret

000014a0 <UART_Recieve>:
    14a0:	5f 9b       	sbis	0x0b, 7	; 11
    14a2:	fe cf       	rjmp	.-4      	; 0x14a0 <UART_Recieve>
    14a4:	8c b1       	in	r24, 0x0c	; 12
    14a6:	08 95       	ret

000014a8 <__vector_19>:


uint8_t RECEIVED = 0;

ISR(USART0_RXC_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
	RECEIVED = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	80 93 60 02 	sts	0x0260, r24
	
	unsigned char temp = UDR0;
    14d0:	8c b1       	in	r24, 0x0c	; 12
	UART_Transmit(temp);
    14d2:	e0 df       	rcall	.-64     	; 0x1494 <UART_Transmit>
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <main>:
{
	
	//_delay_ms(10);
	
	//Setting port A as output	
	DDRA = 0xFF;
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	8a bb       	out	0x1a, r24	; 26
	
	//Initializing drivers
	UART_Init(UBRR);
    14fa:	8f e1       	ldi	r24, 0x1F	; 31
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	be df       	rcall	.-132    	; 0x147c <UART_Init>
	fdevopen(&UART_Transmit, &UART_Recieve);
    1500:	60 e5       	ldi	r22, 0x50	; 80
    1502:	7a e0       	ldi	r23, 0x0A	; 10
    1504:	8a e4       	ldi	r24, 0x4A	; 74
    1506:	9a e0       	ldi	r25, 0x0A	; 10
    1508:	2d d4       	rcall	.+2138   	; 0x1d64 <fdevopen>
	SRAM_init();
    150a:	75 df       	rcall	.-278    	; 0x13f6 <SRAM_init>
	CAN_init();
    150c:	0e 94 98 01 	call	0x330	; 0x330 <CAN_init>
	JOY_init();
    1510:	0e 94 35 02 	call	0x46a	; 0x46a <JOY_init>
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	8f e7       	ldi	r24, 0x7F	; 127
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	21 50       	subi	r18, 0x01	; 1
    151c:	80 40       	sbci	r24, 0x00	; 0
    151e:	90 40       	sbci	r25, 0x00	; 0
    1520:	e1 f7       	brne	.-8      	; 0x151a <main+0x24>
    1522:	00 c0       	rjmp	.+0      	; 0x1524 <main+0x2e>
    1524:	00 c0       	rjmp	.+0      	; 0x1526 <main+0x30>
	_delay_ms(100);
	OLED_init();
    1526:	b7 dd       	rcall	.-1170   	; 0x1096 <OLED_init>
	OLED_clear_display();
    1528:	f1 dd       	rcall	.-1054   	; 0x110c <OLED_clear_display>
	OLED_goto_line(0);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	e4 dd       	rcall	.-1080   	; 0x10f6 <OLED_goto_line>
	OLED_goto_column(0);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	06 de       	rcall	.-1012   	; 0x113e <OLED_goto_column>
	MENU_print_rocket();
    1532:	07 da       	rcall	.-3058   	; 0x942 <MENU_print_rocket>
	TIMER_init();
    1534:	84 df       	rcall	.-248    	; 0x143e <TIMER_init>
	
	MENU_create();
    1536:	18 dc       	rcall	.-2000   	; 0xd68 <MENU_create>

	MENU_run_menu();
    1538:	64 dc       	rcall	.-1848   	; 0xe02 <MENU_run_menu>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	08 95       	ret

00001540 <__subsf3>:
    1540:	50 58       	subi	r21, 0x80	; 128

00001542 <__addsf3>:
    1542:	bb 27       	eor	r27, r27
    1544:	aa 27       	eor	r26, r26
    1546:	0e d0       	rcall	.+28     	; 0x1564 <__addsf3x>
    1548:	21 c1       	rjmp	.+578    	; 0x178c <__fp_round>
    154a:	12 d1       	rcall	.+548    	; 0x1770 <__fp_pscA>
    154c:	30 f0       	brcs	.+12     	; 0x155a <__addsf3+0x18>
    154e:	17 d1       	rcall	.+558    	; 0x177e <__fp_pscB>
    1550:	20 f0       	brcs	.+8      	; 0x155a <__addsf3+0x18>
    1552:	31 f4       	brne	.+12     	; 0x1560 <__addsf3+0x1e>
    1554:	9f 3f       	cpi	r25, 0xFF	; 255
    1556:	11 f4       	brne	.+4      	; 0x155c <__addsf3+0x1a>
    1558:	1e f4       	brtc	.+6      	; 0x1560 <__addsf3+0x1e>
    155a:	07 c1       	rjmp	.+526    	; 0x176a <__fp_nan>
    155c:	0e f4       	brtc	.+2      	; 0x1560 <__addsf3+0x1e>
    155e:	e0 95       	com	r30
    1560:	e7 fb       	bst	r30, 7
    1562:	d4 c0       	rjmp	.+424    	; 0x170c <__fp_inf>

00001564 <__addsf3x>:
    1564:	e9 2f       	mov	r30, r25
    1566:	23 d1       	rcall	.+582    	; 0x17ae <__fp_split3>
    1568:	80 f3       	brcs	.-32     	; 0x154a <__addsf3+0x8>
    156a:	ba 17       	cp	r27, r26
    156c:	62 07       	cpc	r22, r18
    156e:	73 07       	cpc	r23, r19
    1570:	84 07       	cpc	r24, r20
    1572:	95 07       	cpc	r25, r21
    1574:	18 f0       	brcs	.+6      	; 0x157c <__addsf3x+0x18>
    1576:	71 f4       	brne	.+28     	; 0x1594 <__addsf3x+0x30>
    1578:	9e f5       	brtc	.+102    	; 0x15e0 <__addsf3x+0x7c>
    157a:	52 c1       	rjmp	.+676    	; 0x1820 <__fp_zero>
    157c:	0e f4       	brtc	.+2      	; 0x1580 <__addsf3x+0x1c>
    157e:	e0 95       	com	r30
    1580:	0b 2e       	mov	r0, r27
    1582:	ba 2f       	mov	r27, r26
    1584:	a0 2d       	mov	r26, r0
    1586:	0b 01       	movw	r0, r22
    1588:	b9 01       	movw	r22, r18
    158a:	90 01       	movw	r18, r0
    158c:	0c 01       	movw	r0, r24
    158e:	ca 01       	movw	r24, r20
    1590:	a0 01       	movw	r20, r0
    1592:	11 24       	eor	r1, r1
    1594:	ff 27       	eor	r31, r31
    1596:	59 1b       	sub	r21, r25
    1598:	99 f0       	breq	.+38     	; 0x15c0 <__addsf3x+0x5c>
    159a:	59 3f       	cpi	r21, 0xF9	; 249
    159c:	50 f4       	brcc	.+20     	; 0x15b2 <__addsf3x+0x4e>
    159e:	50 3e       	cpi	r21, 0xE0	; 224
    15a0:	68 f1       	brcs	.+90     	; 0x15fc <__addsf3x+0x98>
    15a2:	1a 16       	cp	r1, r26
    15a4:	f0 40       	sbci	r31, 0x00	; 0
    15a6:	a2 2f       	mov	r26, r18
    15a8:	23 2f       	mov	r18, r19
    15aa:	34 2f       	mov	r19, r20
    15ac:	44 27       	eor	r20, r20
    15ae:	58 5f       	subi	r21, 0xF8	; 248
    15b0:	f3 cf       	rjmp	.-26     	; 0x1598 <__addsf3x+0x34>
    15b2:	46 95       	lsr	r20
    15b4:	37 95       	ror	r19
    15b6:	27 95       	ror	r18
    15b8:	a7 95       	ror	r26
    15ba:	f0 40       	sbci	r31, 0x00	; 0
    15bc:	53 95       	inc	r21
    15be:	c9 f7       	brne	.-14     	; 0x15b2 <__addsf3x+0x4e>
    15c0:	7e f4       	brtc	.+30     	; 0x15e0 <__addsf3x+0x7c>
    15c2:	1f 16       	cp	r1, r31
    15c4:	ba 0b       	sbc	r27, r26
    15c6:	62 0b       	sbc	r22, r18
    15c8:	73 0b       	sbc	r23, r19
    15ca:	84 0b       	sbc	r24, r20
    15cc:	ba f0       	brmi	.+46     	; 0x15fc <__addsf3x+0x98>
    15ce:	91 50       	subi	r25, 0x01	; 1
    15d0:	a1 f0       	breq	.+40     	; 0x15fa <__addsf3x+0x96>
    15d2:	ff 0f       	add	r31, r31
    15d4:	bb 1f       	adc	r27, r27
    15d6:	66 1f       	adc	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	c2 f7       	brpl	.-16     	; 0x15ce <__addsf3x+0x6a>
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <__addsf3x+0x98>
    15e0:	ba 0f       	add	r27, r26
    15e2:	62 1f       	adc	r22, r18
    15e4:	73 1f       	adc	r23, r19
    15e6:	84 1f       	adc	r24, r20
    15e8:	48 f4       	brcc	.+18     	; 0x15fc <__addsf3x+0x98>
    15ea:	87 95       	ror	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b7 95       	ror	r27
    15f2:	f7 95       	ror	r31
    15f4:	9e 3f       	cpi	r25, 0xFE	; 254
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <__addsf3x+0x96>
    15f8:	b3 cf       	rjmp	.-154    	; 0x1560 <__addsf3+0x1e>
    15fa:	93 95       	inc	r25
    15fc:	88 0f       	add	r24, r24
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <__addsf3x+0x9e>
    1600:	99 27       	eor	r25, r25
    1602:	ee 0f       	add	r30, r30
    1604:	97 95       	ror	r25
    1606:	87 95       	ror	r24
    1608:	08 95       	ret

0000160a <__fixsfsi>:
    160a:	04 d0       	rcall	.+8      	; 0x1614 <__fixunssfsi>
    160c:	68 94       	set
    160e:	b1 11       	cpse	r27, r1
    1610:	08 c1       	rjmp	.+528    	; 0x1822 <__fp_szero>
    1612:	08 95       	ret

00001614 <__fixunssfsi>:
    1614:	d4 d0       	rcall	.+424    	; 0x17be <__fp_splitA>
    1616:	88 f0       	brcs	.+34     	; 0x163a <__fixunssfsi+0x26>
    1618:	9f 57       	subi	r25, 0x7F	; 127
    161a:	90 f0       	brcs	.+36     	; 0x1640 <__fixunssfsi+0x2c>
    161c:	b9 2f       	mov	r27, r25
    161e:	99 27       	eor	r25, r25
    1620:	b7 51       	subi	r27, 0x17	; 23
    1622:	a0 f0       	brcs	.+40     	; 0x164c <__fixunssfsi+0x38>
    1624:	d1 f0       	breq	.+52     	; 0x165a <__fixunssfsi+0x46>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	1a f0       	brmi	.+6      	; 0x1636 <__fixunssfsi+0x22>
    1630:	ba 95       	dec	r27
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__fixunssfsi+0x12>
    1634:	12 c0       	rjmp	.+36     	; 0x165a <__fixunssfsi+0x46>
    1636:	b1 30       	cpi	r27, 0x01	; 1
    1638:	81 f0       	breq	.+32     	; 0x165a <__fixunssfsi+0x46>
    163a:	f2 d0       	rcall	.+484    	; 0x1820 <__fp_zero>
    163c:	b1 e0       	ldi	r27, 0x01	; 1
    163e:	08 95       	ret
    1640:	ef c0       	rjmp	.+478    	; 0x1820 <__fp_zero>
    1642:	67 2f       	mov	r22, r23
    1644:	78 2f       	mov	r23, r24
    1646:	88 27       	eor	r24, r24
    1648:	b8 5f       	subi	r27, 0xF8	; 248
    164a:	39 f0       	breq	.+14     	; 0x165a <__fixunssfsi+0x46>
    164c:	b9 3f       	cpi	r27, 0xF9	; 249
    164e:	cc f3       	brlt	.-14     	; 0x1642 <__fixunssfsi+0x2e>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b3 95       	inc	r27
    1658:	d9 f7       	brne	.-10     	; 0x1650 <__fixunssfsi+0x3c>
    165a:	3e f4       	brtc	.+14     	; 0x166a <__fixunssfsi+0x56>
    165c:	90 95       	com	r25
    165e:	80 95       	com	r24
    1660:	70 95       	com	r23
    1662:	61 95       	neg	r22
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	08 95       	ret

0000166c <__floatunsisf>:
    166c:	e8 94       	clt
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <__floatsisf+0x12>

00001670 <__floatsisf>:
    1670:	97 fb       	bst	r25, 7
    1672:	3e f4       	brtc	.+14     	; 0x1682 <__floatsisf+0x12>
    1674:	90 95       	com	r25
    1676:	80 95       	com	r24
    1678:	70 95       	com	r23
    167a:	61 95       	neg	r22
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	99 23       	and	r25, r25
    1684:	a9 f0       	breq	.+42     	; 0x16b0 <__floatsisf+0x40>
    1686:	f9 2f       	mov	r31, r25
    1688:	96 e9       	ldi	r25, 0x96	; 150
    168a:	bb 27       	eor	r27, r27
    168c:	93 95       	inc	r25
    168e:	f6 95       	lsr	r31
    1690:	87 95       	ror	r24
    1692:	77 95       	ror	r23
    1694:	67 95       	ror	r22
    1696:	b7 95       	ror	r27
    1698:	f1 11       	cpse	r31, r1
    169a:	f8 cf       	rjmp	.-16     	; 0x168c <__floatsisf+0x1c>
    169c:	fa f4       	brpl	.+62     	; 0x16dc <__floatsisf+0x6c>
    169e:	bb 0f       	add	r27, r27
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__floatsisf+0x36>
    16a2:	60 ff       	sbrs	r22, 0
    16a4:	1b c0       	rjmp	.+54     	; 0x16dc <__floatsisf+0x6c>
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <__floatsisf+0x6c>
    16b0:	88 23       	and	r24, r24
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <__floatsisf+0x48>
    16b4:	96 e9       	ldi	r25, 0x96	; 150
    16b6:	11 c0       	rjmp	.+34     	; 0x16da <__floatsisf+0x6a>
    16b8:	77 23       	and	r23, r23
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <__floatsisf+0x54>
    16bc:	9e e8       	ldi	r25, 0x8E	; 142
    16be:	87 2f       	mov	r24, r23
    16c0:	76 2f       	mov	r23, r22
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <__floatsisf+0x5e>
    16c4:	66 23       	and	r22, r22
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <__floatsisf+0x74>
    16c8:	96 e8       	ldi	r25, 0x86	; 134
    16ca:	86 2f       	mov	r24, r22
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	2a f0       	brmi	.+10     	; 0x16dc <__floatsisf+0x6c>
    16d2:	9a 95       	dec	r25
    16d4:	66 0f       	add	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	da f7       	brpl	.-10     	; 0x16d2 <__floatsisf+0x62>
    16dc:	88 0f       	add	r24, r24
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	97 f9       	bld	r25, 7
    16e4:	08 95       	ret

000016e6 <floor>:
    16e6:	85 d0       	rcall	.+266    	; 0x17f2 <__fp_trunc>
    16e8:	80 f0       	brcs	.+32     	; 0x170a <floor+0x24>
    16ea:	9f 37       	cpi	r25, 0x7F	; 127
    16ec:	40 f4       	brcc	.+16     	; 0x16fe <floor+0x18>
    16ee:	91 11       	cpse	r25, r1
    16f0:	0e f0       	brts	.+2      	; 0x16f4 <floor+0xe>
    16f2:	97 c0       	rjmp	.+302    	; 0x1822 <__fp_szero>
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	80 e8       	ldi	r24, 0x80	; 128
    16fa:	9f eb       	ldi	r25, 0xBF	; 191
    16fc:	08 95       	ret
    16fe:	26 f4       	brtc	.+8      	; 0x1708 <floor+0x22>
    1700:	1b 16       	cp	r1, r27
    1702:	61 1d       	adc	r22, r1
    1704:	71 1d       	adc	r23, r1
    1706:	81 1d       	adc	r24, r1
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <__fp_mintl>
    170a:	21 c0       	rjmp	.+66     	; 0x174e <__fp_mpack>

0000170c <__fp_inf>:
    170c:	97 f9       	bld	r25, 7
    170e:	9f 67       	ori	r25, 0x7F	; 127
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	08 95       	ret

00001718 <__fp_mintl>:
    1718:	88 23       	and	r24, r24
    171a:	71 f4       	brne	.+28     	; 0x1738 <__fp_mintl+0x20>
    171c:	77 23       	and	r23, r23
    171e:	21 f0       	breq	.+8      	; 0x1728 <__fp_mintl+0x10>
    1720:	98 50       	subi	r25, 0x08	; 8
    1722:	87 2b       	or	r24, r23
    1724:	76 2f       	mov	r23, r22
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <__fp_mintl+0x1e>
    1728:	66 23       	and	r22, r22
    172a:	11 f4       	brne	.+4      	; 0x1730 <__fp_mintl+0x18>
    172c:	99 27       	eor	r25, r25
    172e:	0d c0       	rjmp	.+26     	; 0x174a <__fp_mintl+0x32>
    1730:	90 51       	subi	r25, 0x10	; 16
    1732:	86 2b       	or	r24, r22
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	2a f0       	brmi	.+10     	; 0x1744 <__fp_mintl+0x2c>
    173a:	9a 95       	dec	r25
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	da f7       	brpl	.-10     	; 0x173a <__fp_mintl+0x22>
    1744:	88 0f       	add	r24, r24
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret

0000174e <__fp_mpack>:
    174e:	9f 3f       	cpi	r25, 0xFF	; 255
    1750:	31 f0       	breq	.+12     	; 0x175e <__fp_mpack_finite+0xc>

00001752 <__fp_mpack_finite>:
    1752:	91 50       	subi	r25, 0x01	; 1
    1754:	20 f4       	brcc	.+8      	; 0x175e <__fp_mpack_finite+0xc>
    1756:	87 95       	ror	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b7 95       	ror	r27
    175e:	88 0f       	add	r24, r24
    1760:	91 1d       	adc	r25, r1
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__fp_nan>:
    176a:	9f ef       	ldi	r25, 0xFF	; 255
    176c:	80 ec       	ldi	r24, 0xC0	; 192
    176e:	08 95       	ret

00001770 <__fp_pscA>:
    1770:	00 24       	eor	r0, r0
    1772:	0a 94       	dec	r0
    1774:	16 16       	cp	r1, r22
    1776:	17 06       	cpc	r1, r23
    1778:	18 06       	cpc	r1, r24
    177a:	09 06       	cpc	r0, r25
    177c:	08 95       	ret

0000177e <__fp_pscB>:
    177e:	00 24       	eor	r0, r0
    1780:	0a 94       	dec	r0
    1782:	12 16       	cp	r1, r18
    1784:	13 06       	cpc	r1, r19
    1786:	14 06       	cpc	r1, r20
    1788:	05 06       	cpc	r0, r21
    178a:	08 95       	ret

0000178c <__fp_round>:
    178c:	09 2e       	mov	r0, r25
    178e:	03 94       	inc	r0
    1790:	00 0c       	add	r0, r0
    1792:	11 f4       	brne	.+4      	; 0x1798 <__fp_round+0xc>
    1794:	88 23       	and	r24, r24
    1796:	52 f0       	brmi	.+20     	; 0x17ac <__fp_round+0x20>
    1798:	bb 0f       	add	r27, r27
    179a:	40 f4       	brcc	.+16     	; 0x17ac <__fp_round+0x20>
    179c:	bf 2b       	or	r27, r31
    179e:	11 f4       	brne	.+4      	; 0x17a4 <__fp_round+0x18>
    17a0:	60 ff       	sbrs	r22, 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <__fp_round+0x20>
    17a4:	6f 5f       	subi	r22, 0xFF	; 255
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	8f 4f       	sbci	r24, 0xFF	; 255
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <__fp_split3>:
    17ae:	57 fd       	sbrc	r21, 7
    17b0:	90 58       	subi	r25, 0x80	; 128
    17b2:	44 0f       	add	r20, r20
    17b4:	55 1f       	adc	r21, r21
    17b6:	59 f0       	breq	.+22     	; 0x17ce <__fp_splitA+0x10>
    17b8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ba:	71 f0       	breq	.+28     	; 0x17d8 <__fp_splitA+0x1a>
    17bc:	47 95       	ror	r20

000017be <__fp_splitA>:
    17be:	88 0f       	add	r24, r24
    17c0:	97 fb       	bst	r25, 7
    17c2:	99 1f       	adc	r25, r25
    17c4:	61 f0       	breq	.+24     	; 0x17de <__fp_splitA+0x20>
    17c6:	9f 3f       	cpi	r25, 0xFF	; 255
    17c8:	79 f0       	breq	.+30     	; 0x17e8 <__fp_splitA+0x2a>
    17ca:	87 95       	ror	r24
    17cc:	08 95       	ret
    17ce:	12 16       	cp	r1, r18
    17d0:	13 06       	cpc	r1, r19
    17d2:	14 06       	cpc	r1, r20
    17d4:	55 1f       	adc	r21, r21
    17d6:	f2 cf       	rjmp	.-28     	; 0x17bc <__fp_split3+0xe>
    17d8:	46 95       	lsr	r20
    17da:	f1 df       	rcall	.-30     	; 0x17be <__fp_splitA>
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <__fp_splitA+0x30>
    17de:	16 16       	cp	r1, r22
    17e0:	17 06       	cpc	r1, r23
    17e2:	18 06       	cpc	r1, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	f1 cf       	rjmp	.-30     	; 0x17ca <__fp_splitA+0xc>
    17e8:	86 95       	lsr	r24
    17ea:	71 05       	cpc	r23, r1
    17ec:	61 05       	cpc	r22, r1
    17ee:	08 94       	sec
    17f0:	08 95       	ret

000017f2 <__fp_trunc>:
    17f2:	e5 df       	rcall	.-54     	; 0x17be <__fp_splitA>
    17f4:	a0 f0       	brcs	.+40     	; 0x181e <__fp_trunc+0x2c>
    17f6:	be e7       	ldi	r27, 0x7E	; 126
    17f8:	b9 17       	cp	r27, r25
    17fa:	88 f4       	brcc	.+34     	; 0x181e <__fp_trunc+0x2c>
    17fc:	bb 27       	eor	r27, r27
    17fe:	9f 38       	cpi	r25, 0x8F	; 143
    1800:	60 f4       	brcc	.+24     	; 0x181a <__fp_trunc+0x28>
    1802:	16 16       	cp	r1, r22
    1804:	b1 1d       	adc	r27, r1
    1806:	67 2f       	mov	r22, r23
    1808:	78 2f       	mov	r23, r24
    180a:	88 27       	eor	r24, r24
    180c:	98 5f       	subi	r25, 0xF8	; 248
    180e:	f7 cf       	rjmp	.-18     	; 0x17fe <__fp_trunc+0xc>
    1810:	86 95       	lsr	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	b1 1d       	adc	r27, r1
    1818:	93 95       	inc	r25
    181a:	96 39       	cpi	r25, 0x96	; 150
    181c:	c8 f3       	brcs	.-14     	; 0x1810 <__fp_trunc+0x1e>
    181e:	08 95       	ret

00001820 <__fp_zero>:
    1820:	e8 94       	clt

00001822 <__fp_szero>:
    1822:	bb 27       	eor	r27, r27
    1824:	66 27       	eor	r22, r22
    1826:	77 27       	eor	r23, r23
    1828:	cb 01       	movw	r24, r22
    182a:	97 f9       	bld	r25, 7
    182c:	08 95       	ret

0000182e <log10>:
    182e:	0a d0       	rcall	.+20     	; 0x1844 <log>
    1830:	29 ed       	ldi	r18, 0xD9	; 217
    1832:	3b e5       	ldi	r19, 0x5B	; 91
    1834:	4e ed       	ldi	r20, 0xDE	; 222
    1836:	5e e3       	ldi	r21, 0x3E	; 62
    1838:	45 c0       	rjmp	.+138    	; 0x18c4 <__mulsf3>
    183a:	0e f0       	brts	.+2      	; 0x183e <log10+0x10>
    183c:	88 cf       	rjmp	.-240    	; 0x174e <__fp_mpack>
    183e:	95 cf       	rjmp	.-214    	; 0x176a <__fp_nan>
    1840:	68 94       	set
    1842:	64 cf       	rjmp	.-312    	; 0x170c <__fp_inf>

00001844 <log>:
    1844:	bc df       	rcall	.-136    	; 0x17be <__fp_splitA>
    1846:	c8 f3       	brcs	.-14     	; 0x183a <log10+0xc>
    1848:	99 23       	and	r25, r25
    184a:	d1 f3       	breq	.-12     	; 0x1840 <log10+0x12>
    184c:	c6 f3       	brts	.-16     	; 0x183e <log10+0x10>
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	1f 93       	push	r17
    1854:	0f 93       	push	r16
    1856:	ff 92       	push	r15
    1858:	c9 2f       	mov	r28, r25
    185a:	dd 27       	eor	r29, r29
    185c:	88 23       	and	r24, r24
    185e:	2a f0       	brmi	.+10     	; 0x186a <log+0x26>
    1860:	21 97       	sbiw	r28, 0x01	; 1
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	88 1f       	adc	r24, r24
    1868:	da f7       	brpl	.-10     	; 0x1860 <log+0x1c>
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f eb       	ldi	r21, 0xBF	; 191
    1872:	9f e3       	ldi	r25, 0x3F	; 63
    1874:	88 39       	cpi	r24, 0x98	; 152
    1876:	20 f0       	brcs	.+8      	; 0x1880 <log+0x3c>
    1878:	80 3e       	cpi	r24, 0xE0	; 224
    187a:	30 f0       	brcs	.+12     	; 0x1888 <log+0x44>
    187c:	21 96       	adiw	r28, 0x01	; 1
    187e:	8f 77       	andi	r24, 0x7F	; 127
    1880:	60 de       	rcall	.-832    	; 0x1542 <__addsf3>
    1882:	e0 e7       	ldi	r30, 0x70	; 112
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	03 c0       	rjmp	.+6      	; 0x188e <log+0x4a>
    1888:	5c de       	rcall	.-840    	; 0x1542 <__addsf3>
    188a:	ed e9       	ldi	r30, 0x9D	; 157
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	7d d0       	rcall	.+250    	; 0x198a <__fp_powser>
    1890:	8b 01       	movw	r16, r22
    1892:	be 01       	movw	r22, r28
    1894:	ec 01       	movw	r28, r24
    1896:	fb 2e       	mov	r15, r27
    1898:	6f 57       	subi	r22, 0x7F	; 127
    189a:	71 09       	sbc	r23, r1
    189c:	75 95       	asr	r23
    189e:	77 1f       	adc	r23, r23
    18a0:	88 0b       	sbc	r24, r24
    18a2:	99 0b       	sbc	r25, r25
    18a4:	e5 de       	rcall	.-566    	; 0x1670 <__floatsisf>
    18a6:	28 e1       	ldi	r18, 0x18	; 24
    18a8:	32 e7       	ldi	r19, 0x72	; 114
    18aa:	41 e3       	ldi	r20, 0x31	; 49
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	16 d0       	rcall	.+44     	; 0x18dc <__mulsf3x>
    18b0:	af 2d       	mov	r26, r15
    18b2:	98 01       	movw	r18, r16
    18b4:	ae 01       	movw	r20, r28
    18b6:	ff 90       	pop	r15
    18b8:	0f 91       	pop	r16
    18ba:	1f 91       	pop	r17
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	51 de       	rcall	.-862    	; 0x1564 <__addsf3x>
    18c2:	64 cf       	rjmp	.-312    	; 0x178c <__fp_round>

000018c4 <__mulsf3>:
    18c4:	0b d0       	rcall	.+22     	; 0x18dc <__mulsf3x>
    18c6:	62 cf       	rjmp	.-316    	; 0x178c <__fp_round>
    18c8:	53 df       	rcall	.-346    	; 0x1770 <__fp_pscA>
    18ca:	28 f0       	brcs	.+10     	; 0x18d6 <__mulsf3+0x12>
    18cc:	58 df       	rcall	.-336    	; 0x177e <__fp_pscB>
    18ce:	18 f0       	brcs	.+6      	; 0x18d6 <__mulsf3+0x12>
    18d0:	95 23       	and	r25, r21
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__mulsf3+0x12>
    18d4:	1b cf       	rjmp	.-458    	; 0x170c <__fp_inf>
    18d6:	49 cf       	rjmp	.-366    	; 0x176a <__fp_nan>
    18d8:	11 24       	eor	r1, r1
    18da:	a3 cf       	rjmp	.-186    	; 0x1822 <__fp_szero>

000018dc <__mulsf3x>:
    18dc:	68 df       	rcall	.-304    	; 0x17ae <__fp_split3>
    18de:	a0 f3       	brcs	.-24     	; 0x18c8 <__mulsf3+0x4>

000018e0 <__mulsf3_pse>:
    18e0:	95 9f       	mul	r25, r21
    18e2:	d1 f3       	breq	.-12     	; 0x18d8 <__mulsf3+0x14>
    18e4:	95 0f       	add	r25, r21
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	55 1f       	adc	r21, r21
    18ea:	62 9f       	mul	r22, r18
    18ec:	f0 01       	movw	r30, r0
    18ee:	72 9f       	mul	r23, r18
    18f0:	bb 27       	eor	r27, r27
    18f2:	f0 0d       	add	r31, r0
    18f4:	b1 1d       	adc	r27, r1
    18f6:	63 9f       	mul	r22, r19
    18f8:	aa 27       	eor	r26, r26
    18fa:	f0 0d       	add	r31, r0
    18fc:	b1 1d       	adc	r27, r1
    18fe:	aa 1f       	adc	r26, r26
    1900:	64 9f       	mul	r22, r20
    1902:	66 27       	eor	r22, r22
    1904:	b0 0d       	add	r27, r0
    1906:	a1 1d       	adc	r26, r1
    1908:	66 1f       	adc	r22, r22
    190a:	82 9f       	mul	r24, r18
    190c:	22 27       	eor	r18, r18
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	62 1f       	adc	r22, r18
    1914:	73 9f       	mul	r23, r19
    1916:	b0 0d       	add	r27, r0
    1918:	a1 1d       	adc	r26, r1
    191a:	62 1f       	adc	r22, r18
    191c:	83 9f       	mul	r24, r19
    191e:	a0 0d       	add	r26, r0
    1920:	61 1d       	adc	r22, r1
    1922:	22 1f       	adc	r18, r18
    1924:	74 9f       	mul	r23, r20
    1926:	33 27       	eor	r19, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	23 1f       	adc	r18, r19
    192e:	84 9f       	mul	r24, r20
    1930:	60 0d       	add	r22, r0
    1932:	21 1d       	adc	r18, r1
    1934:	82 2f       	mov	r24, r18
    1936:	76 2f       	mov	r23, r22
    1938:	6a 2f       	mov	r22, r26
    193a:	11 24       	eor	r1, r1
    193c:	9f 57       	subi	r25, 0x7F	; 127
    193e:	50 40       	sbci	r21, 0x00	; 0
    1940:	8a f0       	brmi	.+34     	; 0x1964 <__mulsf3_pse+0x84>
    1942:	e1 f0       	breq	.+56     	; 0x197c <__mulsf3_pse+0x9c>
    1944:	88 23       	and	r24, r24
    1946:	4a f0       	brmi	.+18     	; 0x195a <__mulsf3_pse+0x7a>
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	a9 f7       	brne	.-22     	; 0x1944 <__mulsf3_pse+0x64>
    195a:	9e 3f       	cpi	r25, 0xFE	; 254
    195c:	51 05       	cpc	r21, r1
    195e:	70 f0       	brcs	.+28     	; 0x197c <__mulsf3_pse+0x9c>
    1960:	d5 ce       	rjmp	.-598    	; 0x170c <__fp_inf>
    1962:	5f cf       	rjmp	.-322    	; 0x1822 <__fp_szero>
    1964:	5f 3f       	cpi	r21, 0xFF	; 255
    1966:	ec f3       	brlt	.-6      	; 0x1962 <__mulsf3_pse+0x82>
    1968:	98 3e       	cpi	r25, 0xE8	; 232
    196a:	dc f3       	brlt	.-10     	; 0x1962 <__mulsf3_pse+0x82>
    196c:	86 95       	lsr	r24
    196e:	77 95       	ror	r23
    1970:	67 95       	ror	r22
    1972:	b7 95       	ror	r27
    1974:	f7 95       	ror	r31
    1976:	e7 95       	ror	r30
    1978:	9f 5f       	subi	r25, 0xFF	; 255
    197a:	c1 f7       	brne	.-16     	; 0x196c <__mulsf3_pse+0x8c>
    197c:	fe 2b       	or	r31, r30
    197e:	88 0f       	add	r24, r24
    1980:	91 1d       	adc	r25, r1
    1982:	96 95       	lsr	r25
    1984:	87 95       	ror	r24
    1986:	97 f9       	bld	r25, 7
    1988:	08 95       	ret

0000198a <__fp_powser>:
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	1f 93       	push	r17
    1990:	0f 93       	push	r16
    1992:	ff 92       	push	r15
    1994:	ef 92       	push	r14
    1996:	df 92       	push	r13
    1998:	7b 01       	movw	r14, r22
    199a:	8c 01       	movw	r16, r24
    199c:	68 94       	set
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__fp_powser+0x20>
    19a0:	da 2e       	mov	r13, r26
    19a2:	ef 01       	movw	r28, r30
    19a4:	9b df       	rcall	.-202    	; 0x18dc <__mulsf3x>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e8 94       	clt
    19aa:	a5 91       	lpm	r26, Z+
    19ac:	25 91       	lpm	r18, Z+
    19ae:	35 91       	lpm	r19, Z+
    19b0:	45 91       	lpm	r20, Z+
    19b2:	55 91       	lpm	r21, Z+
    19b4:	ae f3       	brts	.-22     	; 0x19a0 <__fp_powser+0x16>
    19b6:	ef 01       	movw	r28, r30
    19b8:	d5 dd       	rcall	.-1110   	; 0x1564 <__addsf3x>
    19ba:	fe 01       	movw	r30, r28
    19bc:	97 01       	movw	r18, r14
    19be:	a8 01       	movw	r20, r16
    19c0:	da 94       	dec	r13
    19c2:	79 f7       	brne	.-34     	; 0x19a2 <__fp_powser+0x18>
    19c4:	df 90       	pop	r13
    19c6:	ef 90       	pop	r14
    19c8:	ff 90       	pop	r15
    19ca:	0f 91       	pop	r16
    19cc:	1f 91       	pop	r17
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <__divmodhi4>:
    19d4:	97 fb       	bst	r25, 7
    19d6:	07 2e       	mov	r0, r23
    19d8:	16 f4       	brtc	.+4      	; 0x19de <__divmodhi4+0xa>
    19da:	00 94       	com	r0
    19dc:	06 d0       	rcall	.+12     	; 0x19ea <__divmodhi4_neg1>
    19de:	77 fd       	sbrc	r23, 7
    19e0:	08 d0       	rcall	.+16     	; 0x19f2 <__divmodhi4_neg2>
    19e2:	0b d0       	rcall	.+22     	; 0x19fa <__udivmodhi4>
    19e4:	07 fc       	sbrc	r0, 7
    19e6:	05 d0       	rcall	.+10     	; 0x19f2 <__divmodhi4_neg2>
    19e8:	3e f4       	brtc	.+14     	; 0x19f8 <__divmodhi4_exit>

000019ea <__divmodhi4_neg1>:
    19ea:	90 95       	com	r25
    19ec:	81 95       	neg	r24
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	08 95       	ret

000019f2 <__divmodhi4_neg2>:
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255

000019f8 <__divmodhi4_exit>:
    19f8:	08 95       	ret

000019fa <__udivmodhi4>:
    19fa:	aa 1b       	sub	r26, r26
    19fc:	bb 1b       	sub	r27, r27
    19fe:	51 e1       	ldi	r21, 0x11	; 17
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <__udivmodhi4_ep>

00001a02 <__udivmodhi4_loop>:
    1a02:	aa 1f       	adc	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	a6 17       	cp	r26, r22
    1a08:	b7 07       	cpc	r27, r23
    1a0a:	10 f0       	brcs	.+4      	; 0x1a10 <__udivmodhi4_ep>
    1a0c:	a6 1b       	sub	r26, r22
    1a0e:	b7 0b       	sbc	r27, r23

00001a10 <__udivmodhi4_ep>:
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	5a 95       	dec	r21
    1a16:	a9 f7       	brne	.-22     	; 0x1a02 <__udivmodhi4_loop>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	08 95       	ret

00001a22 <malloc>:
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	91 05       	cpc	r25, r1
    1a2a:	10 f4       	brcc	.+4      	; 0x1a30 <malloc+0xe>
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	e0 91 64 02 	lds	r30, 0x0264
    1a34:	f0 91 65 02 	lds	r31, 0x0265
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	30 97       	sbiw	r30, 0x00	; 0
    1a42:	39 f1       	breq	.+78     	; 0x1a92 <malloc+0x70>
    1a44:	40 81       	ld	r20, Z
    1a46:	51 81       	ldd	r21, Z+1	; 0x01
    1a48:	48 17       	cp	r20, r24
    1a4a:	59 07       	cpc	r21, r25
    1a4c:	b8 f0       	brcs	.+46     	; 0x1a7c <malloc+0x5a>
    1a4e:	48 17       	cp	r20, r24
    1a50:	59 07       	cpc	r21, r25
    1a52:	71 f4       	brne	.+28     	; 0x1a70 <malloc+0x4e>
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	10 97       	sbiw	r26, 0x00	; 0
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <malloc+0x44>
    1a5c:	13 96       	adiw	r26, 0x03	; 3
    1a5e:	9c 93       	st	X, r25
    1a60:	8e 93       	st	-X, r24
    1a62:	12 97       	sbiw	r26, 0x02	; 2
    1a64:	2c c0       	rjmp	.+88     	; 0x1abe <malloc+0x9c>
    1a66:	90 93 65 02 	sts	0x0265, r25
    1a6a:	80 93 64 02 	sts	0x0264, r24
    1a6e:	27 c0       	rjmp	.+78     	; 0x1abe <malloc+0x9c>
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	31 f0       	breq	.+12     	; 0x1a82 <malloc+0x60>
    1a76:	42 17       	cp	r20, r18
    1a78:	53 07       	cpc	r21, r19
    1a7a:	18 f0       	brcs	.+6      	; 0x1a82 <malloc+0x60>
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	db 01       	movw	r26, r22
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <malloc+0x62>
    1a82:	ef 01       	movw	r28, r30
    1a84:	9a 01       	movw	r18, r20
    1a86:	bd 01       	movw	r22, r26
    1a88:	df 01       	movw	r26, r30
    1a8a:	02 80       	ldd	r0, Z+2	; 0x02
    1a8c:	f3 81       	ldd	r31, Z+3	; 0x03
    1a8e:	e0 2d       	mov	r30, r0
    1a90:	d7 cf       	rjmp	.-82     	; 0x1a40 <malloc+0x1e>
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	f9 f0       	breq	.+62     	; 0x1ad6 <malloc+0xb4>
    1a98:	28 1b       	sub	r18, r24
    1a9a:	39 0b       	sbc	r19, r25
    1a9c:	24 30       	cpi	r18, 0x04	; 4
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	80 f4       	brcc	.+32     	; 0x1ac2 <malloc+0xa0>
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	61 15       	cp	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <malloc+0x92>
    1aac:	fb 01       	movw	r30, r22
    1aae:	93 83       	std	Z+3, r25	; 0x03
    1ab0:	82 83       	std	Z+2, r24	; 0x02
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <malloc+0x9a>
    1ab4:	90 93 65 02 	sts	0x0265, r25
    1ab8:	80 93 64 02 	sts	0x0264, r24
    1abc:	fe 01       	movw	r30, r28
    1abe:	32 96       	adiw	r30, 0x02	; 2
    1ac0:	44 c0       	rjmp	.+136    	; 0x1b4a <malloc+0x128>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e2 0f       	add	r30, r18
    1ac6:	f3 1f       	adc	r31, r19
    1ac8:	81 93       	st	Z+, r24
    1aca:	91 93       	st	Z+, r25
    1acc:	22 50       	subi	r18, 0x02	; 2
    1ace:	31 09       	sbc	r19, r1
    1ad0:	39 83       	std	Y+1, r19	; 0x01
    1ad2:	28 83       	st	Y, r18
    1ad4:	3a c0       	rjmp	.+116    	; 0x1b4a <malloc+0x128>
    1ad6:	20 91 62 02 	lds	r18, 0x0262
    1ada:	30 91 63 02 	lds	r19, 0x0263
    1ade:	23 2b       	or	r18, r19
    1ae0:	41 f4       	brne	.+16     	; 0x1af2 <malloc+0xd0>
    1ae2:	20 91 02 01 	lds	r18, 0x0102
    1ae6:	30 91 03 01 	lds	r19, 0x0103
    1aea:	30 93 63 02 	sts	0x0263, r19
    1aee:	20 93 62 02 	sts	0x0262, r18
    1af2:	20 91 00 01 	lds	r18, 0x0100
    1af6:	30 91 01 01 	lds	r19, 0x0101
    1afa:	21 15       	cp	r18, r1
    1afc:	31 05       	cpc	r19, r1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <malloc+0xee>
    1b00:	2d b7       	in	r18, 0x3d	; 61
    1b02:	3e b7       	in	r19, 0x3e	; 62
    1b04:	40 91 04 01 	lds	r20, 0x0104
    1b08:	50 91 05 01 	lds	r21, 0x0105
    1b0c:	24 1b       	sub	r18, r20
    1b0e:	35 0b       	sbc	r19, r21
    1b10:	e0 91 62 02 	lds	r30, 0x0262
    1b14:	f0 91 63 02 	lds	r31, 0x0263
    1b18:	e2 17       	cp	r30, r18
    1b1a:	f3 07       	cpc	r31, r19
    1b1c:	a0 f4       	brcc	.+40     	; 0x1b46 <malloc+0x124>
    1b1e:	2e 1b       	sub	r18, r30
    1b20:	3f 0b       	sbc	r19, r31
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	78 f0       	brcs	.+30     	; 0x1b46 <malloc+0x124>
    1b28:	ac 01       	movw	r20, r24
    1b2a:	4e 5f       	subi	r20, 0xFE	; 254
    1b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2e:	24 17       	cp	r18, r20
    1b30:	35 07       	cpc	r19, r21
    1b32:	48 f0       	brcs	.+18     	; 0x1b46 <malloc+0x124>
    1b34:	4e 0f       	add	r20, r30
    1b36:	5f 1f       	adc	r21, r31
    1b38:	50 93 63 02 	sts	0x0263, r21
    1b3c:	40 93 62 02 	sts	0x0262, r20
    1b40:	81 93       	st	Z+, r24
    1b42:	91 93       	st	Z+, r25
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <malloc+0x128>
    1b46:	e0 e0       	ldi	r30, 0x00	; 0
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <free>:
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <free+0xa>
    1b5a:	87 c0       	rjmp	.+270    	; 0x1c6a <free+0x118>
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	32 97       	sbiw	r30, 0x02	; 2
    1b60:	13 82       	std	Z+3, r1	; 0x03
    1b62:	12 82       	std	Z+2, r1	; 0x02
    1b64:	c0 91 64 02 	lds	r28, 0x0264
    1b68:	d0 91 65 02 	lds	r29, 0x0265
    1b6c:	20 97       	sbiw	r28, 0x00	; 0
    1b6e:	81 f4       	brne	.+32     	; 0x1b90 <free+0x3e>
    1b70:	20 81       	ld	r18, Z
    1b72:	31 81       	ldd	r19, Z+1	; 0x01
    1b74:	28 0f       	add	r18, r24
    1b76:	39 1f       	adc	r19, r25
    1b78:	80 91 62 02 	lds	r24, 0x0262
    1b7c:	90 91 63 02 	lds	r25, 0x0263
    1b80:	82 17       	cp	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	79 f5       	brne	.+94     	; 0x1be4 <free+0x92>
    1b86:	f0 93 63 02 	sts	0x0263, r31
    1b8a:	e0 93 62 02 	sts	0x0262, r30
    1b8e:	6d c0       	rjmp	.+218    	; 0x1c6a <free+0x118>
    1b90:	de 01       	movw	r26, r28
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	ae 17       	cp	r26, r30
    1b98:	bf 07       	cpc	r27, r31
    1b9a:	50 f4       	brcc	.+20     	; 0x1bb0 <free+0x5e>
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	4d 91       	ld	r20, X+
    1ba0:	5c 91       	ld	r21, X
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
    1ba4:	9d 01       	movw	r18, r26
    1ba6:	41 15       	cp	r20, r1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	09 f1       	breq	.+66     	; 0x1bee <free+0x9c>
    1bac:	da 01       	movw	r26, r20
    1bae:	f3 cf       	rjmp	.-26     	; 0x1b96 <free+0x44>
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
    1bb2:	a2 83       	std	Z+2, r26	; 0x02
    1bb4:	40 81       	ld	r20, Z
    1bb6:	51 81       	ldd	r21, Z+1	; 0x01
    1bb8:	84 0f       	add	r24, r20
    1bba:	95 1f       	adc	r25, r21
    1bbc:	8a 17       	cp	r24, r26
    1bbe:	9b 07       	cpc	r25, r27
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <free+0x8c>
    1bc2:	8d 91       	ld	r24, X+
    1bc4:	9c 91       	ld	r25, X
    1bc6:	11 97       	sbiw	r26, 0x01	; 1
    1bc8:	84 0f       	add	r24, r20
    1bca:	95 1f       	adc	r25, r21
    1bcc:	02 96       	adiw	r24, 0x02	; 2
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	12 96       	adiw	r26, 0x02	; 2
    1bd4:	8d 91       	ld	r24, X+
    1bd6:	9c 91       	ld	r25, X
    1bd8:	13 97       	sbiw	r26, 0x03	; 3
    1bda:	93 83       	std	Z+3, r25	; 0x03
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	21 15       	cp	r18, r1
    1be0:	31 05       	cpc	r19, r1
    1be2:	29 f4       	brne	.+10     	; 0x1bee <free+0x9c>
    1be4:	f0 93 65 02 	sts	0x0265, r31
    1be8:	e0 93 64 02 	sts	0x0264, r30
    1bec:	3e c0       	rjmp	.+124    	; 0x1c6a <free+0x118>
    1bee:	d9 01       	movw	r26, r18
    1bf0:	13 96       	adiw	r26, 0x03	; 3
    1bf2:	fc 93       	st	X, r31
    1bf4:	ee 93       	st	-X, r30
    1bf6:	12 97       	sbiw	r26, 0x02	; 2
    1bf8:	4d 91       	ld	r20, X+
    1bfa:	5d 91       	ld	r21, X+
    1bfc:	a4 0f       	add	r26, r20
    1bfe:	b5 1f       	adc	r27, r21
    1c00:	ea 17       	cp	r30, r26
    1c02:	fb 07       	cpc	r31, r27
    1c04:	79 f4       	brne	.+30     	; 0x1c24 <free+0xd2>
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	84 0f       	add	r24, r20
    1c0c:	95 1f       	adc	r25, r21
    1c0e:	02 96       	adiw	r24, 0x02	; 2
    1c10:	d9 01       	movw	r26, r18
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	13 96       	adiw	r26, 0x03	; 3
    1c1e:	9c 93       	st	X, r25
    1c20:	8e 93       	st	-X, r24
    1c22:	12 97       	sbiw	r26, 0x02	; 2
    1c24:	e0 e0       	ldi	r30, 0x00	; 0
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <free+0xe4>
    1c30:	fe 01       	movw	r30, r28
    1c32:	ec 01       	movw	r28, r24
    1c34:	f9 cf       	rjmp	.-14     	; 0x1c28 <free+0xd6>
    1c36:	ce 01       	movw	r24, r28
    1c38:	02 96       	adiw	r24, 0x02	; 2
    1c3a:	28 81       	ld	r18, Y
    1c3c:	39 81       	ldd	r19, Y+1	; 0x01
    1c3e:	82 0f       	add	r24, r18
    1c40:	93 1f       	adc	r25, r19
    1c42:	20 91 62 02 	lds	r18, 0x0262
    1c46:	30 91 63 02 	lds	r19, 0x0263
    1c4a:	28 17       	cp	r18, r24
    1c4c:	39 07       	cpc	r19, r25
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <free+0x118>
    1c50:	30 97       	sbiw	r30, 0x00	; 0
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <free+0x10c>
    1c54:	10 92 65 02 	sts	0x0265, r1
    1c58:	10 92 64 02 	sts	0x0264, r1
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <free+0x110>
    1c5e:	13 82       	std	Z+3, r1	; 0x03
    1c60:	12 82       	std	Z+2, r1	; 0x02
    1c62:	d0 93 63 02 	sts	0x0263, r29
    1c66:	c0 93 62 02 	sts	0x0262, r28
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <do_rand>:
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	ec 01       	movw	r28, r24
    1c86:	68 81       	ld	r22, Y
    1c88:	79 81       	ldd	r23, Y+1	; 0x01
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	61 15       	cp	r22, r1
    1c90:	71 05       	cpc	r23, r1
    1c92:	81 05       	cpc	r24, r1
    1c94:	91 05       	cpc	r25, r1
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <do_rand+0x30>
    1c98:	64 e2       	ldi	r22, 0x24	; 36
    1c9a:	79 ed       	ldi	r23, 0xD9	; 217
    1c9c:	8b e5       	ldi	r24, 0x5B	; 91
    1c9e:	97 e0       	ldi	r25, 0x07	; 7
    1ca0:	2d e1       	ldi	r18, 0x1D	; 29
    1ca2:	33 ef       	ldi	r19, 0xF3	; 243
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	7f d3       	rcall	.+1790   	; 0x23a8 <__divmodsi4>
    1caa:	49 01       	movw	r8, r18
    1cac:	5a 01       	movw	r10, r20
    1cae:	9b 01       	movw	r18, r22
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	a7 ea       	ldi	r26, 0xA7	; 167
    1cb4:	b1 e4       	ldi	r27, 0x41	; 65
    1cb6:	94 d3       	rcall	.+1832   	; 0x23e0 <__muluhisi3>
    1cb8:	6b 01       	movw	r12, r22
    1cba:	7c 01       	movw	r14, r24
    1cbc:	ac ee       	ldi	r26, 0xEC	; 236
    1cbe:	b4 ef       	ldi	r27, 0xF4	; 244
    1cc0:	a5 01       	movw	r20, r10
    1cc2:	94 01       	movw	r18, r8
    1cc4:	99 d3       	rcall	.+1842   	; 0x23f8 <__mulohisi3>
    1cc6:	c6 0e       	add	r12, r22
    1cc8:	d7 1e       	adc	r13, r23
    1cca:	e8 1e       	adc	r14, r24
    1ccc:	f9 1e       	adc	r15, r25
    1cce:	f7 fe       	sbrs	r15, 7
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <do_rand+0x6e>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	c8 1a       	sub	r12, r24
    1cd6:	d1 08       	sbc	r13, r1
    1cd8:	e1 08       	sbc	r14, r1
    1cda:	80 e8       	ldi	r24, 0x80	; 128
    1cdc:	f8 0a       	sbc	r15, r24
    1cde:	c8 82       	st	Y, r12
    1ce0:	d9 82       	std	Y+1, r13	; 0x01
    1ce2:	ea 82       	std	Y+2, r14	; 0x02
    1ce4:	fb 82       	std	Y+3, r15	; 0x03
    1ce6:	c6 01       	movw	r24, r12
    1ce8:	9f 77       	andi	r25, 0x7F	; 127
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	9f 90       	pop	r9
    1cfc:	8f 90       	pop	r8
    1cfe:	08 95       	ret

00001d00 <rand_r>:
    1d00:	b7 cf       	rjmp	.-146    	; 0x1c70 <do_rand>

00001d02 <rand>:
    1d02:	86 e0       	ldi	r24, 0x06	; 6
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	b4 cf       	rjmp	.-152    	; 0x1c70 <do_rand>

00001d08 <srand>:
    1d08:	a0 e0       	ldi	r26, 0x00	; 0
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	80 93 06 01 	sts	0x0106, r24
    1d10:	90 93 07 01 	sts	0x0107, r25
    1d14:	a0 93 08 01 	sts	0x0108, r26
    1d18:	b0 93 09 01 	sts	0x0109, r27
    1d1c:	08 95       	ret

00001d1e <__itoa_ncheck>:
    1d1e:	bb 27       	eor	r27, r27
    1d20:	4a 30       	cpi	r20, 0x0A	; 10
    1d22:	31 f4       	brne	.+12     	; 0x1d30 <__itoa_ncheck+0x12>
    1d24:	99 23       	and	r25, r25
    1d26:	22 f4       	brpl	.+8      	; 0x1d30 <__itoa_ncheck+0x12>
    1d28:	bd e2       	ldi	r27, 0x2D	; 45
    1d2a:	90 95       	com	r25
    1d2c:	81 95       	neg	r24
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <__utoa_common>

00001d32 <__utoa_ncheck>:
    1d32:	bb 27       	eor	r27, r27

00001d34 <__utoa_common>:
    1d34:	fb 01       	movw	r30, r22
    1d36:	55 27       	eor	r21, r21
    1d38:	aa 27       	eor	r26, r26
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	aa 1f       	adc	r26, r26
    1d40:	a4 17       	cp	r26, r20
    1d42:	10 f0       	brcs	.+4      	; 0x1d48 <__utoa_common+0x14>
    1d44:	a4 1b       	sub	r26, r20
    1d46:	83 95       	inc	r24
    1d48:	50 51       	subi	r21, 0x10	; 16
    1d4a:	b9 f7       	brne	.-18     	; 0x1d3a <__utoa_common+0x6>
    1d4c:	a0 5d       	subi	r26, 0xD0	; 208
    1d4e:	aa 33       	cpi	r26, 0x3A	; 58
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <__utoa_common+0x20>
    1d52:	a9 5d       	subi	r26, 0xD9	; 217
    1d54:	a1 93       	st	Z+, r26
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	79 f7       	brne	.-34     	; 0x1d38 <__utoa_common+0x4>
    1d5a:	b1 11       	cpse	r27, r1
    1d5c:	b1 93       	st	Z+, r27
    1d5e:	11 92       	st	Z+, r1
    1d60:	cb 01       	movw	r24, r22
    1d62:	82 c2       	rjmp	.+1284   	; 0x2268 <strrev>

00001d64 <fdevopen>:
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
    1d6e:	8b 01       	movw	r16, r22
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	31 f4       	brne	.+12     	; 0x1d80 <fdevopen+0x1c>
    1d74:	61 15       	cp	r22, r1
    1d76:	71 05       	cpc	r23, r1
    1d78:	19 f4       	brne	.+6      	; 0x1d80 <fdevopen+0x1c>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	37 c0       	rjmp	.+110    	; 0x1dee <fdevopen+0x8a>
    1d80:	6e e0       	ldi	r22, 0x0E	; 14
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	38 d2       	rcall	.+1136   	; 0x21fa <calloc>
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	a9 f3       	breq	.-22     	; 0x1d7a <fdevopen+0x16>
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	83 83       	std	Z+3, r24	; 0x03
    1d94:	01 15       	cp	r16, r1
    1d96:	11 05       	cpc	r17, r1
    1d98:	71 f0       	breq	.+28     	; 0x1db6 <fdevopen+0x52>
    1d9a:	13 87       	std	Z+11, r17	; 0x0b
    1d9c:	02 87       	std	Z+10, r16	; 0x0a
    1d9e:	81 e8       	ldi	r24, 0x81	; 129
    1da0:	83 83       	std	Z+3, r24	; 0x03
    1da2:	80 91 66 02 	lds	r24, 0x0266
    1da6:	90 91 67 02 	lds	r25, 0x0267
    1daa:	89 2b       	or	r24, r25
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <fdevopen+0x52>
    1dae:	f0 93 67 02 	sts	0x0267, r31
    1db2:	e0 93 66 02 	sts	0x0266, r30
    1db6:	20 97       	sbiw	r28, 0x00	; 0
    1db8:	c9 f0       	breq	.+50     	; 0x1dec <fdevopen+0x88>
    1dba:	d1 87       	std	Z+9, r29	; 0x09
    1dbc:	c0 87       	std	Z+8, r28	; 0x08
    1dbe:	83 81       	ldd	r24, Z+3	; 0x03
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	83 83       	std	Z+3, r24	; 0x03
    1dc4:	80 91 68 02 	lds	r24, 0x0268
    1dc8:	90 91 69 02 	lds	r25, 0x0269
    1dcc:	89 2b       	or	r24, r25
    1dce:	71 f4       	brne	.+28     	; 0x1dec <fdevopen+0x88>
    1dd0:	f0 93 69 02 	sts	0x0269, r31
    1dd4:	e0 93 68 02 	sts	0x0268, r30
    1dd8:	80 91 6a 02 	lds	r24, 0x026A
    1ddc:	90 91 6b 02 	lds	r25, 0x026B
    1de0:	89 2b       	or	r24, r25
    1de2:	21 f4       	brne	.+8      	; 0x1dec <fdevopen+0x88>
    1de4:	f0 93 6b 02 	sts	0x026B, r31
    1de8:	e0 93 6a 02 	sts	0x026A, r30
    1dec:	cf 01       	movw	r24, r30
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <printf>:
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e1 e0       	ldi	r30, 0x01	; 1
    1dfe:	ff e0       	ldi	r31, 0x0F	; 15
    1e00:	0f c3       	rjmp	.+1566   	; 0x2420 <__prologue_saves__+0x20>
    1e02:	fe 01       	movw	r30, r28
    1e04:	35 96       	adiw	r30, 0x05	; 5
    1e06:	61 91       	ld	r22, Z+
    1e08:	71 91       	ld	r23, Z+
    1e0a:	af 01       	movw	r20, r30
    1e0c:	80 91 68 02 	lds	r24, 0x0268
    1e10:	90 91 69 02 	lds	r25, 0x0269
    1e14:	2f d0       	rcall	.+94     	; 0x1e74 <vfprintf>
    1e16:	e2 e0       	ldi	r30, 0x02	; 2
    1e18:	1f c3       	rjmp	.+1598   	; 0x2458 <__epilogue_restores__+0x20>

00001e1a <puts>:
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	e0 91 68 02 	lds	r30, 0x0268
    1e26:	f0 91 69 02 	lds	r31, 0x0269
    1e2a:	23 81       	ldd	r18, Z+3	; 0x03
    1e2c:	21 ff       	sbrs	r18, 1
    1e2e:	1b c0       	rjmp	.+54     	; 0x1e66 <puts+0x4c>
    1e30:	ec 01       	movw	r28, r24
    1e32:	00 e0       	ldi	r16, 0x00	; 0
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	89 91       	ld	r24, Y+
    1e38:	60 91 68 02 	lds	r22, 0x0268
    1e3c:	70 91 69 02 	lds	r23, 0x0269
    1e40:	db 01       	movw	r26, r22
    1e42:	18 96       	adiw	r26, 0x08	; 8
    1e44:	ed 91       	ld	r30, X+
    1e46:	fc 91       	ld	r31, X
    1e48:	19 97       	sbiw	r26, 0x09	; 9
    1e4a:	88 23       	and	r24, r24
    1e4c:	31 f0       	breq	.+12     	; 0x1e5a <puts+0x40>
    1e4e:	09 95       	icall
    1e50:	89 2b       	or	r24, r25
    1e52:	89 f3       	breq	.-30     	; 0x1e36 <puts+0x1c>
    1e54:	0f ef       	ldi	r16, 0xFF	; 255
    1e56:	1f ef       	ldi	r17, 0xFF	; 255
    1e58:	ee cf       	rjmp	.-36     	; 0x1e36 <puts+0x1c>
    1e5a:	8a e0       	ldi	r24, 0x0A	; 10
    1e5c:	09 95       	icall
    1e5e:	89 2b       	or	r24, r25
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <puts+0x4c>
    1e62:	c8 01       	movw	r24, r16
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <puts+0x50>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <vfprintf>:
    1e74:	ac e0       	ldi	r26, 0x0C	; 12
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ef e3       	ldi	r30, 0x3F	; 63
    1e7a:	ff e0       	ldi	r31, 0x0F	; 15
    1e7c:	c1 c2       	rjmp	.+1410   	; 0x2400 <__prologue_saves__>
    1e7e:	7c 01       	movw	r14, r24
    1e80:	6b 01       	movw	r12, r22
    1e82:	8a 01       	movw	r16, r20
    1e84:	fc 01       	movw	r30, r24
    1e86:	17 82       	std	Z+7, r1	; 0x07
    1e88:	16 82       	std	Z+6, r1	; 0x06
    1e8a:	83 81       	ldd	r24, Z+3	; 0x03
    1e8c:	81 ff       	sbrs	r24, 1
    1e8e:	b0 c1       	rjmp	.+864    	; 0x21f0 <vfprintf+0x37c>
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	4c 01       	movw	r8, r24
    1e96:	f7 01       	movw	r30, r14
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	93 fd       	sbrc	r25, 3
    1e9e:	85 91       	lpm	r24, Z+
    1ea0:	93 ff       	sbrs	r25, 3
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	6f 01       	movw	r12, r30
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <vfprintf+0x38>
    1eaa:	9e c1       	rjmp	.+828    	; 0x21e8 <vfprintf+0x374>
    1eac:	85 32       	cpi	r24, 0x25	; 37
    1eae:	39 f4       	brne	.+14     	; 0x1ebe <vfprintf+0x4a>
    1eb0:	93 fd       	sbrc	r25, 3
    1eb2:	85 91       	lpm	r24, Z+
    1eb4:	93 ff       	sbrs	r25, 3
    1eb6:	81 91       	ld	r24, Z+
    1eb8:	6f 01       	movw	r12, r30
    1eba:	85 32       	cpi	r24, 0x25	; 37
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <vfprintf+0x52>
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	e2 d1       	rcall	.+964    	; 0x2288 <fputc>
    1ec4:	e8 cf       	rjmp	.-48     	; 0x1e96 <vfprintf+0x22>
    1ec6:	51 2c       	mov	r5, r1
    1ec8:	31 2c       	mov	r3, r1
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	20 32       	cpi	r18, 0x20	; 32
    1ece:	a0 f4       	brcc	.+40     	; 0x1ef8 <vfprintf+0x84>
    1ed0:	8b 32       	cpi	r24, 0x2B	; 43
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <vfprintf+0x7a>
    1ed4:	30 f4       	brcc	.+12     	; 0x1ee2 <vfprintf+0x6e>
    1ed6:	80 32       	cpi	r24, 0x20	; 32
    1ed8:	59 f0       	breq	.+22     	; 0x1ef0 <vfprintf+0x7c>
    1eda:	83 32       	cpi	r24, 0x23	; 35
    1edc:	69 f4       	brne	.+26     	; 0x1ef8 <vfprintf+0x84>
    1ede:	20 61       	ori	r18, 0x10	; 16
    1ee0:	2c c0       	rjmp	.+88     	; 0x1f3a <vfprintf+0xc6>
    1ee2:	8d 32       	cpi	r24, 0x2D	; 45
    1ee4:	39 f0       	breq	.+14     	; 0x1ef4 <vfprintf+0x80>
    1ee6:	80 33       	cpi	r24, 0x30	; 48
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <vfprintf+0x84>
    1eea:	21 60       	ori	r18, 0x01	; 1
    1eec:	26 c0       	rjmp	.+76     	; 0x1f3a <vfprintf+0xc6>
    1eee:	22 60       	ori	r18, 0x02	; 2
    1ef0:	24 60       	ori	r18, 0x04	; 4
    1ef2:	23 c0       	rjmp	.+70     	; 0x1f3a <vfprintf+0xc6>
    1ef4:	28 60       	ori	r18, 0x08	; 8
    1ef6:	21 c0       	rjmp	.+66     	; 0x1f3a <vfprintf+0xc6>
    1ef8:	27 fd       	sbrc	r18, 7
    1efa:	27 c0       	rjmp	.+78     	; 0x1f4a <vfprintf+0xd6>
    1efc:	30 ed       	ldi	r19, 0xD0	; 208
    1efe:	38 0f       	add	r19, r24
    1f00:	3a 30       	cpi	r19, 0x0A	; 10
    1f02:	78 f4       	brcc	.+30     	; 0x1f22 <vfprintf+0xae>
    1f04:	26 ff       	sbrs	r18, 6
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <vfprintf+0xa0>
    1f08:	fa e0       	ldi	r31, 0x0A	; 10
    1f0a:	5f 9e       	mul	r5, r31
    1f0c:	30 0d       	add	r19, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	53 2e       	mov	r5, r19
    1f12:	13 c0       	rjmp	.+38     	; 0x1f3a <vfprintf+0xc6>
    1f14:	8a e0       	ldi	r24, 0x0A	; 10
    1f16:	38 9e       	mul	r3, r24
    1f18:	30 0d       	add	r19, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	33 2e       	mov	r3, r19
    1f1e:	20 62       	ori	r18, 0x20	; 32
    1f20:	0c c0       	rjmp	.+24     	; 0x1f3a <vfprintf+0xc6>
    1f22:	8e 32       	cpi	r24, 0x2E	; 46
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <vfprintf+0xba>
    1f26:	26 fd       	sbrc	r18, 6
    1f28:	5f c1       	rjmp	.+702    	; 0x21e8 <vfprintf+0x374>
    1f2a:	20 64       	ori	r18, 0x40	; 64
    1f2c:	06 c0       	rjmp	.+12     	; 0x1f3a <vfprintf+0xc6>
    1f2e:	8c 36       	cpi	r24, 0x6C	; 108
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <vfprintf+0xc2>
    1f32:	20 68       	ori	r18, 0x80	; 128
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <vfprintf+0xc6>
    1f36:	88 36       	cpi	r24, 0x68	; 104
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <vfprintf+0xd6>
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	93 fd       	sbrc	r25, 3
    1f3e:	85 91       	lpm	r24, Z+
    1f40:	93 ff       	sbrs	r25, 3
    1f42:	81 91       	ld	r24, Z+
    1f44:	6f 01       	movw	r12, r30
    1f46:	81 11       	cpse	r24, r1
    1f48:	c1 cf       	rjmp	.-126    	; 0x1ecc <vfprintf+0x58>
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	9f 7d       	andi	r25, 0xDF	; 223
    1f4e:	95 54       	subi	r25, 0x45	; 69
    1f50:	93 30       	cpi	r25, 0x03	; 3
    1f52:	28 f4       	brcc	.+10     	; 0x1f5e <vfprintf+0xea>
    1f54:	0c 5f       	subi	r16, 0xFC	; 252
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	ff e3       	ldi	r31, 0x3F	; 63
    1f5a:	f9 83       	std	Y+1, r31	; 0x01
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <vfprintf+0x104>
    1f5e:	83 36       	cpi	r24, 0x63	; 99
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <vfprintf+0xfa>
    1f62:	83 37       	cpi	r24, 0x73	; 115
    1f64:	71 f0       	breq	.+28     	; 0x1f82 <vfprintf+0x10e>
    1f66:	83 35       	cpi	r24, 0x53	; 83
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <vfprintf+0xf8>
    1f6a:	57 c0       	rjmp	.+174    	; 0x201a <vfprintf+0x1a6>
    1f6c:	21 c0       	rjmp	.+66     	; 0x1fb0 <vfprintf+0x13c>
    1f6e:	f8 01       	movw	r30, r16
    1f70:	80 81       	ld	r24, Z
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	0e 5f       	subi	r16, 0xFE	; 254
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	44 24       	eor	r4, r4
    1f7a:	43 94       	inc	r4
    1f7c:	51 2c       	mov	r5, r1
    1f7e:	54 01       	movw	r10, r8
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <vfprintf+0x136>
    1f82:	38 01       	movw	r6, r16
    1f84:	f2 e0       	ldi	r31, 0x02	; 2
    1f86:	6f 0e       	add	r6, r31
    1f88:	71 1c       	adc	r7, r1
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	a0 80       	ld	r10, Z
    1f8e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f90:	26 ff       	sbrs	r18, 6
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <vfprintf+0x126>
    1f94:	65 2d       	mov	r22, r5
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <vfprintf+0x12a>
    1f9a:	6f ef       	ldi	r22, 0xFF	; 255
    1f9c:	7f ef       	ldi	r23, 0xFF	; 255
    1f9e:	c5 01       	movw	r24, r10
    1fa0:	2c 87       	std	Y+12, r18	; 0x0c
    1fa2:	57 d1       	rcall	.+686    	; 0x2252 <strnlen>
    1fa4:	2c 01       	movw	r4, r24
    1fa6:	83 01       	movw	r16, r6
    1fa8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1faa:	2f 77       	andi	r18, 0x7F	; 127
    1fac:	22 2e       	mov	r2, r18
    1fae:	16 c0       	rjmp	.+44     	; 0x1fdc <vfprintf+0x168>
    1fb0:	38 01       	movw	r6, r16
    1fb2:	f2 e0       	ldi	r31, 0x02	; 2
    1fb4:	6f 0e       	add	r6, r31
    1fb6:	71 1c       	adc	r7, r1
    1fb8:	f8 01       	movw	r30, r16
    1fba:	a0 80       	ld	r10, Z
    1fbc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fbe:	26 ff       	sbrs	r18, 6
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <vfprintf+0x154>
    1fc2:	65 2d       	mov	r22, r5
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x158>
    1fc8:	6f ef       	ldi	r22, 0xFF	; 255
    1fca:	7f ef       	ldi	r23, 0xFF	; 255
    1fcc:	c5 01       	movw	r24, r10
    1fce:	2c 87       	std	Y+12, r18	; 0x0c
    1fd0:	2e d1       	rcall	.+604    	; 0x222e <strnlen_P>
    1fd2:	2c 01       	movw	r4, r24
    1fd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fd6:	20 68       	ori	r18, 0x80	; 128
    1fd8:	22 2e       	mov	r2, r18
    1fda:	83 01       	movw	r16, r6
    1fdc:	23 fc       	sbrc	r2, 3
    1fde:	19 c0       	rjmp	.+50     	; 0x2012 <vfprintf+0x19e>
    1fe0:	83 2d       	mov	r24, r3
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	48 16       	cp	r4, r24
    1fe6:	59 06       	cpc	r5, r25
    1fe8:	a0 f4       	brcc	.+40     	; 0x2012 <vfprintf+0x19e>
    1fea:	b7 01       	movw	r22, r14
    1fec:	80 e2       	ldi	r24, 0x20	; 32
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	4b d1       	rcall	.+662    	; 0x2288 <fputc>
    1ff2:	3a 94       	dec	r3
    1ff4:	f5 cf       	rjmp	.-22     	; 0x1fe0 <vfprintf+0x16c>
    1ff6:	f5 01       	movw	r30, r10
    1ff8:	27 fc       	sbrc	r2, 7
    1ffa:	85 91       	lpm	r24, Z+
    1ffc:	27 fe       	sbrs	r2, 7
    1ffe:	81 91       	ld	r24, Z+
    2000:	5f 01       	movw	r10, r30
    2002:	b7 01       	movw	r22, r14
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	40 d1       	rcall	.+640    	; 0x2288 <fputc>
    2008:	31 10       	cpse	r3, r1
    200a:	3a 94       	dec	r3
    200c:	f1 e0       	ldi	r31, 0x01	; 1
    200e:	4f 1a       	sub	r4, r31
    2010:	51 08       	sbc	r5, r1
    2012:	41 14       	cp	r4, r1
    2014:	51 04       	cpc	r5, r1
    2016:	79 f7       	brne	.-34     	; 0x1ff6 <vfprintf+0x182>
    2018:	de c0       	rjmp	.+444    	; 0x21d6 <vfprintf+0x362>
    201a:	84 36       	cpi	r24, 0x64	; 100
    201c:	11 f0       	breq	.+4      	; 0x2022 <vfprintf+0x1ae>
    201e:	89 36       	cpi	r24, 0x69	; 105
    2020:	31 f5       	brne	.+76     	; 0x206e <vfprintf+0x1fa>
    2022:	f8 01       	movw	r30, r16
    2024:	27 ff       	sbrs	r18, 7
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <vfprintf+0x1c2>
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	0c 5f       	subi	r16, 0xFC	; 252
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <vfprintf+0x1d2>
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	88 27       	eor	r24, r24
    203c:	77 fd       	sbrc	r23, 7
    203e:	80 95       	com	r24
    2040:	98 2f       	mov	r25, r24
    2042:	0e 5f       	subi	r16, 0xFE	; 254
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	2f 76       	andi	r18, 0x6F	; 111
    2048:	b2 2e       	mov	r11, r18
    204a:	97 ff       	sbrs	r25, 7
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <vfprintf+0x1ec>
    204e:	90 95       	com	r25
    2050:	80 95       	com	r24
    2052:	70 95       	com	r23
    2054:	61 95       	neg	r22
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	8f 4f       	sbci	r24, 0xFF	; 255
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	20 68       	ori	r18, 0x80	; 128
    205e:	b2 2e       	mov	r11, r18
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	a4 01       	movw	r20, r8
    2066:	42 d1       	rcall	.+644    	; 0x22ec <__ultoa_invert>
    2068:	a8 2e       	mov	r10, r24
    206a:	a8 18       	sub	r10, r8
    206c:	43 c0       	rjmp	.+134    	; 0x20f4 <vfprintf+0x280>
    206e:	85 37       	cpi	r24, 0x75	; 117
    2070:	29 f4       	brne	.+10     	; 0x207c <vfprintf+0x208>
    2072:	2f 7e       	andi	r18, 0xEF	; 239
    2074:	b2 2e       	mov	r11, r18
    2076:	2a e0       	ldi	r18, 0x0A	; 10
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	25 c0       	rjmp	.+74     	; 0x20c6 <vfprintf+0x252>
    207c:	f2 2f       	mov	r31, r18
    207e:	f9 7f       	andi	r31, 0xF9	; 249
    2080:	bf 2e       	mov	r11, r31
    2082:	8f 36       	cpi	r24, 0x6F	; 111
    2084:	c1 f0       	breq	.+48     	; 0x20b6 <vfprintf+0x242>
    2086:	18 f4       	brcc	.+6      	; 0x208e <vfprintf+0x21a>
    2088:	88 35       	cpi	r24, 0x58	; 88
    208a:	79 f0       	breq	.+30     	; 0x20aa <vfprintf+0x236>
    208c:	ad c0       	rjmp	.+346    	; 0x21e8 <vfprintf+0x374>
    208e:	80 37       	cpi	r24, 0x70	; 112
    2090:	19 f0       	breq	.+6      	; 0x2098 <vfprintf+0x224>
    2092:	88 37       	cpi	r24, 0x78	; 120
    2094:	21 f0       	breq	.+8      	; 0x209e <vfprintf+0x22a>
    2096:	a8 c0       	rjmp	.+336    	; 0x21e8 <vfprintf+0x374>
    2098:	2f 2f       	mov	r18, r31
    209a:	20 61       	ori	r18, 0x10	; 16
    209c:	b2 2e       	mov	r11, r18
    209e:	b4 fe       	sbrs	r11, 4
    20a0:	0d c0       	rjmp	.+26     	; 0x20bc <vfprintf+0x248>
    20a2:	8b 2d       	mov	r24, r11
    20a4:	84 60       	ori	r24, 0x04	; 4
    20a6:	b8 2e       	mov	r11, r24
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <vfprintf+0x248>
    20aa:	24 ff       	sbrs	r18, 4
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <vfprintf+0x24e>
    20ae:	9f 2f       	mov	r25, r31
    20b0:	96 60       	ori	r25, 0x06	; 6
    20b2:	b9 2e       	mov	r11, r25
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <vfprintf+0x24e>
    20b6:	28 e0       	ldi	r18, 0x08	; 8
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <vfprintf+0x252>
    20bc:	20 e1       	ldi	r18, 0x10	; 16
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <vfprintf+0x252>
    20c2:	20 e1       	ldi	r18, 0x10	; 16
    20c4:	32 e0       	ldi	r19, 0x02	; 2
    20c6:	f8 01       	movw	r30, r16
    20c8:	b7 fe       	sbrs	r11, 7
    20ca:	07 c0       	rjmp	.+14     	; 0x20da <vfprintf+0x266>
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	0c 5f       	subi	r16, 0xFC	; 252
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	06 c0       	rjmp	.+12     	; 0x20e6 <vfprintf+0x272>
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 5f       	subi	r16, 0xFE	; 254
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	a4 01       	movw	r20, r8
    20e8:	01 d1       	rcall	.+514    	; 0x22ec <__ultoa_invert>
    20ea:	a8 2e       	mov	r10, r24
    20ec:	a8 18       	sub	r10, r8
    20ee:	fb 2d       	mov	r31, r11
    20f0:	ff 77       	andi	r31, 0x7F	; 127
    20f2:	bf 2e       	mov	r11, r31
    20f4:	b6 fe       	sbrs	r11, 6
    20f6:	0b c0       	rjmp	.+22     	; 0x210e <vfprintf+0x29a>
    20f8:	2b 2d       	mov	r18, r11
    20fa:	2e 7f       	andi	r18, 0xFE	; 254
    20fc:	a5 14       	cp	r10, r5
    20fe:	50 f4       	brcc	.+20     	; 0x2114 <vfprintf+0x2a0>
    2100:	b4 fe       	sbrs	r11, 4
    2102:	0a c0       	rjmp	.+20     	; 0x2118 <vfprintf+0x2a4>
    2104:	b2 fc       	sbrc	r11, 2
    2106:	08 c0       	rjmp	.+16     	; 0x2118 <vfprintf+0x2a4>
    2108:	2b 2d       	mov	r18, r11
    210a:	2e 7e       	andi	r18, 0xEE	; 238
    210c:	05 c0       	rjmp	.+10     	; 0x2118 <vfprintf+0x2a4>
    210e:	7a 2c       	mov	r7, r10
    2110:	2b 2d       	mov	r18, r11
    2112:	03 c0       	rjmp	.+6      	; 0x211a <vfprintf+0x2a6>
    2114:	7a 2c       	mov	r7, r10
    2116:	01 c0       	rjmp	.+2      	; 0x211a <vfprintf+0x2a6>
    2118:	75 2c       	mov	r7, r5
    211a:	24 ff       	sbrs	r18, 4
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <vfprintf+0x2c4>
    211e:	fe 01       	movw	r30, r28
    2120:	ea 0d       	add	r30, r10
    2122:	f1 1d       	adc	r31, r1
    2124:	80 81       	ld	r24, Z
    2126:	80 33       	cpi	r24, 0x30	; 48
    2128:	11 f4       	brne	.+4      	; 0x212e <vfprintf+0x2ba>
    212a:	29 7e       	andi	r18, 0xE9	; 233
    212c:	09 c0       	rjmp	.+18     	; 0x2140 <vfprintf+0x2cc>
    212e:	22 ff       	sbrs	r18, 2
    2130:	06 c0       	rjmp	.+12     	; 0x213e <vfprintf+0x2ca>
    2132:	73 94       	inc	r7
    2134:	73 94       	inc	r7
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <vfprintf+0x2cc>
    2138:	82 2f       	mov	r24, r18
    213a:	86 78       	andi	r24, 0x86	; 134
    213c:	09 f0       	breq	.+2      	; 0x2140 <vfprintf+0x2cc>
    213e:	73 94       	inc	r7
    2140:	23 fd       	sbrc	r18, 3
    2142:	12 c0       	rjmp	.+36     	; 0x2168 <vfprintf+0x2f4>
    2144:	20 ff       	sbrs	r18, 0
    2146:	06 c0       	rjmp	.+12     	; 0x2154 <vfprintf+0x2e0>
    2148:	5a 2c       	mov	r5, r10
    214a:	73 14       	cp	r7, r3
    214c:	18 f4       	brcc	.+6      	; 0x2154 <vfprintf+0x2e0>
    214e:	53 0c       	add	r5, r3
    2150:	57 18       	sub	r5, r7
    2152:	73 2c       	mov	r7, r3
    2154:	73 14       	cp	r7, r3
    2156:	60 f4       	brcc	.+24     	; 0x2170 <vfprintf+0x2fc>
    2158:	b7 01       	movw	r22, r14
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	2c 87       	std	Y+12, r18	; 0x0c
    2160:	93 d0       	rcall	.+294    	; 0x2288 <fputc>
    2162:	73 94       	inc	r7
    2164:	2c 85       	ldd	r18, Y+12	; 0x0c
    2166:	f6 cf       	rjmp	.-20     	; 0x2154 <vfprintf+0x2e0>
    2168:	73 14       	cp	r7, r3
    216a:	10 f4       	brcc	.+4      	; 0x2170 <vfprintf+0x2fc>
    216c:	37 18       	sub	r3, r7
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <vfprintf+0x2fe>
    2170:	31 2c       	mov	r3, r1
    2172:	24 ff       	sbrs	r18, 4
    2174:	11 c0       	rjmp	.+34     	; 0x2198 <vfprintf+0x324>
    2176:	b7 01       	movw	r22, r14
    2178:	80 e3       	ldi	r24, 0x30	; 48
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	2c 87       	std	Y+12, r18	; 0x0c
    217e:	84 d0       	rcall	.+264    	; 0x2288 <fputc>
    2180:	2c 85       	ldd	r18, Y+12	; 0x0c
    2182:	22 ff       	sbrs	r18, 2
    2184:	16 c0       	rjmp	.+44     	; 0x21b2 <vfprintf+0x33e>
    2186:	21 ff       	sbrs	r18, 1
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <vfprintf+0x31c>
    218a:	88 e5       	ldi	r24, 0x58	; 88
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x320>
    2190:	88 e7       	ldi	r24, 0x78	; 120
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	b7 01       	movw	r22, r14
    2196:	0c c0       	rjmp	.+24     	; 0x21b0 <vfprintf+0x33c>
    2198:	82 2f       	mov	r24, r18
    219a:	86 78       	andi	r24, 0x86	; 134
    219c:	51 f0       	breq	.+20     	; 0x21b2 <vfprintf+0x33e>
    219e:	21 fd       	sbrc	r18, 1
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <vfprintf+0x332>
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <vfprintf+0x334>
    21a6:	8b e2       	ldi	r24, 0x2B	; 43
    21a8:	27 fd       	sbrc	r18, 7
    21aa:	8d e2       	ldi	r24, 0x2D	; 45
    21ac:	b7 01       	movw	r22, r14
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	6b d0       	rcall	.+214    	; 0x2288 <fputc>
    21b2:	a5 14       	cp	r10, r5
    21b4:	30 f4       	brcc	.+12     	; 0x21c2 <vfprintf+0x34e>
    21b6:	b7 01       	movw	r22, r14
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	65 d0       	rcall	.+202    	; 0x2288 <fputc>
    21be:	5a 94       	dec	r5
    21c0:	f8 cf       	rjmp	.-16     	; 0x21b2 <vfprintf+0x33e>
    21c2:	aa 94       	dec	r10
    21c4:	f4 01       	movw	r30, r8
    21c6:	ea 0d       	add	r30, r10
    21c8:	f1 1d       	adc	r31, r1
    21ca:	80 81       	ld	r24, Z
    21cc:	b7 01       	movw	r22, r14
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	5b d0       	rcall	.+182    	; 0x2288 <fputc>
    21d2:	a1 10       	cpse	r10, r1
    21d4:	f6 cf       	rjmp	.-20     	; 0x21c2 <vfprintf+0x34e>
    21d6:	33 20       	and	r3, r3
    21d8:	09 f4       	brne	.+2      	; 0x21dc <vfprintf+0x368>
    21da:	5d ce       	rjmp	.-838    	; 0x1e96 <vfprintf+0x22>
    21dc:	b7 01       	movw	r22, r14
    21de:	80 e2       	ldi	r24, 0x20	; 32
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	52 d0       	rcall	.+164    	; 0x2288 <fputc>
    21e4:	3a 94       	dec	r3
    21e6:	f7 cf       	rjmp	.-18     	; 0x21d6 <vfprintf+0x362>
    21e8:	f7 01       	movw	r30, r14
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vfprintf+0x380>
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	9f ef       	ldi	r25, 0xFF	; 255
    21f4:	2c 96       	adiw	r28, 0x0c	; 12
    21f6:	e2 e1       	ldi	r30, 0x12	; 18
    21f8:	1f c1       	rjmp	.+574    	; 0x2438 <__epilogue_restores__>

000021fa <calloc>:
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	86 9f       	mul	r24, r22
    2204:	80 01       	movw	r16, r0
    2206:	87 9f       	mul	r24, r23
    2208:	10 0d       	add	r17, r0
    220a:	96 9f       	mul	r25, r22
    220c:	10 0d       	add	r17, r0
    220e:	11 24       	eor	r1, r1
    2210:	c8 01       	movw	r24, r16
    2212:	07 dc       	rcall	.-2034   	; 0x1a22 <malloc>
    2214:	ec 01       	movw	r28, r24
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	21 f0       	breq	.+8      	; 0x2222 <calloc+0x28>
    221a:	a8 01       	movw	r20, r16
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	11 d0       	rcall	.+34     	; 0x2244 <memset>
    2222:	ce 01       	movw	r24, r28
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <strnlen_P>:
    222e:	fc 01       	movw	r30, r24
    2230:	05 90       	lpm	r0, Z+
    2232:	61 50       	subi	r22, 0x01	; 1
    2234:	70 40       	sbci	r23, 0x00	; 0
    2236:	01 10       	cpse	r0, r1
    2238:	d8 f7       	brcc	.-10     	; 0x2230 <strnlen_P+0x2>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	8e 0f       	add	r24, r30
    2240:	9f 1f       	adc	r25, r31
    2242:	08 95       	ret

00002244 <memset>:
    2244:	dc 01       	movw	r26, r24
    2246:	01 c0       	rjmp	.+2      	; 0x224a <memset+0x6>
    2248:	6d 93       	st	X+, r22
    224a:	41 50       	subi	r20, 0x01	; 1
    224c:	50 40       	sbci	r21, 0x00	; 0
    224e:	e0 f7       	brcc	.-8      	; 0x2248 <memset+0x4>
    2250:	08 95       	ret

00002252 <strnlen>:
    2252:	fc 01       	movw	r30, r24
    2254:	61 50       	subi	r22, 0x01	; 1
    2256:	70 40       	sbci	r23, 0x00	; 0
    2258:	01 90       	ld	r0, Z+
    225a:	01 10       	cpse	r0, r1
    225c:	d8 f7       	brcc	.-10     	; 0x2254 <strnlen+0x2>
    225e:	80 95       	com	r24
    2260:	90 95       	com	r25
    2262:	8e 0f       	add	r24, r30
    2264:	9f 1f       	adc	r25, r31
    2266:	08 95       	ret

00002268 <strrev>:
    2268:	dc 01       	movw	r26, r24
    226a:	fc 01       	movw	r30, r24
    226c:	67 2f       	mov	r22, r23
    226e:	71 91       	ld	r23, Z+
    2270:	77 23       	and	r23, r23
    2272:	e1 f7       	brne	.-8      	; 0x226c <strrev+0x4>
    2274:	32 97       	sbiw	r30, 0x02	; 2
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <strrev+0x18>
    2278:	7c 91       	ld	r23, X
    227a:	6d 93       	st	X+, r22
    227c:	70 83       	st	Z, r23
    227e:	62 91       	ld	r22, -Z
    2280:	ae 17       	cp	r26, r30
    2282:	bf 07       	cpc	r27, r31
    2284:	c8 f3       	brcs	.-14     	; 0x2278 <strrev+0x10>
    2286:	08 95       	ret

00002288 <fputc>:
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	18 2f       	mov	r17, r24
    2292:	09 2f       	mov	r16, r25
    2294:	eb 01       	movw	r28, r22
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	81 fd       	sbrc	r24, 1
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <fputc+0x1a>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	20 c0       	rjmp	.+64     	; 0x22e2 <fputc+0x5a>
    22a2:	82 ff       	sbrs	r24, 2
    22a4:	10 c0       	rjmp	.+32     	; 0x22c6 <fputc+0x3e>
    22a6:	4e 81       	ldd	r20, Y+6	; 0x06
    22a8:	5f 81       	ldd	r21, Y+7	; 0x07
    22aa:	2c 81       	ldd	r18, Y+4	; 0x04
    22ac:	3d 81       	ldd	r19, Y+5	; 0x05
    22ae:	42 17       	cp	r20, r18
    22b0:	53 07       	cpc	r21, r19
    22b2:	7c f4       	brge	.+30     	; 0x22d2 <fputc+0x4a>
    22b4:	e8 81       	ld	r30, Y
    22b6:	f9 81       	ldd	r31, Y+1	; 0x01
    22b8:	9f 01       	movw	r18, r30
    22ba:	2f 5f       	subi	r18, 0xFF	; 255
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	39 83       	std	Y+1, r19	; 0x01
    22c0:	28 83       	st	Y, r18
    22c2:	10 83       	st	Z, r17
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <fputc+0x4a>
    22c6:	e8 85       	ldd	r30, Y+8	; 0x08
    22c8:	f9 85       	ldd	r31, Y+9	; 0x09
    22ca:	81 2f       	mov	r24, r17
    22cc:	09 95       	icall
    22ce:	89 2b       	or	r24, r25
    22d0:	29 f7       	brne	.-54     	; 0x229c <fputc+0x14>
    22d2:	2e 81       	ldd	r18, Y+6	; 0x06
    22d4:	3f 81       	ldd	r19, Y+7	; 0x07
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	3f 83       	std	Y+7, r19	; 0x07
    22dc:	2e 83       	std	Y+6, r18	; 0x06
    22de:	81 2f       	mov	r24, r17
    22e0:	90 2f       	mov	r25, r16
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <__ultoa_invert>:
    22ec:	fa 01       	movw	r30, r20
    22ee:	aa 27       	eor	r26, r26
    22f0:	28 30       	cpi	r18, 0x08	; 8
    22f2:	51 f1       	breq	.+84     	; 0x2348 <__ultoa_invert+0x5c>
    22f4:	20 31       	cpi	r18, 0x10	; 16
    22f6:	81 f1       	breq	.+96     	; 0x2358 <__ultoa_invert+0x6c>
    22f8:	e8 94       	clt
    22fa:	6f 93       	push	r22
    22fc:	6e 7f       	andi	r22, 0xFE	; 254
    22fe:	6e 5f       	subi	r22, 0xFE	; 254
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	8f 4f       	sbci	r24, 0xFF	; 255
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	af 4f       	sbci	r26, 0xFF	; 255
    2308:	b1 e0       	ldi	r27, 0x01	; 1
    230a:	3e d0       	rcall	.+124    	; 0x2388 <__ultoa_invert+0x9c>
    230c:	b4 e0       	ldi	r27, 0x04	; 4
    230e:	3c d0       	rcall	.+120    	; 0x2388 <__ultoa_invert+0x9c>
    2310:	67 0f       	add	r22, r23
    2312:	78 1f       	adc	r23, r24
    2314:	89 1f       	adc	r24, r25
    2316:	9a 1f       	adc	r25, r26
    2318:	a1 1d       	adc	r26, r1
    231a:	68 0f       	add	r22, r24
    231c:	79 1f       	adc	r23, r25
    231e:	8a 1f       	adc	r24, r26
    2320:	91 1d       	adc	r25, r1
    2322:	a1 1d       	adc	r26, r1
    2324:	6a 0f       	add	r22, r26
    2326:	71 1d       	adc	r23, r1
    2328:	81 1d       	adc	r24, r1
    232a:	91 1d       	adc	r25, r1
    232c:	a1 1d       	adc	r26, r1
    232e:	20 d0       	rcall	.+64     	; 0x2370 <__ultoa_invert+0x84>
    2330:	09 f4       	brne	.+2      	; 0x2334 <__ultoa_invert+0x48>
    2332:	68 94       	set
    2334:	3f 91       	pop	r19
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	26 9f       	mul	r18, r22
    233a:	11 24       	eor	r1, r1
    233c:	30 19       	sub	r19, r0
    233e:	30 5d       	subi	r19, 0xD0	; 208
    2340:	31 93       	st	Z+, r19
    2342:	de f6       	brtc	.-74     	; 0x22fa <__ultoa_invert+0xe>
    2344:	cf 01       	movw	r24, r30
    2346:	08 95       	ret
    2348:	46 2f       	mov	r20, r22
    234a:	47 70       	andi	r20, 0x07	; 7
    234c:	40 5d       	subi	r20, 0xD0	; 208
    234e:	41 93       	st	Z+, r20
    2350:	b3 e0       	ldi	r27, 0x03	; 3
    2352:	0f d0       	rcall	.+30     	; 0x2372 <__ultoa_invert+0x86>
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__ultoa_invert+0x5c>
    2356:	f6 cf       	rjmp	.-20     	; 0x2344 <__ultoa_invert+0x58>
    2358:	46 2f       	mov	r20, r22
    235a:	4f 70       	andi	r20, 0x0F	; 15
    235c:	40 5d       	subi	r20, 0xD0	; 208
    235e:	4a 33       	cpi	r20, 0x3A	; 58
    2360:	18 f0       	brcs	.+6      	; 0x2368 <__ultoa_invert+0x7c>
    2362:	49 5d       	subi	r20, 0xD9	; 217
    2364:	31 fd       	sbrc	r19, 1
    2366:	40 52       	subi	r20, 0x20	; 32
    2368:	41 93       	st	Z+, r20
    236a:	02 d0       	rcall	.+4      	; 0x2370 <__ultoa_invert+0x84>
    236c:	a9 f7       	brne	.-22     	; 0x2358 <__ultoa_invert+0x6c>
    236e:	ea cf       	rjmp	.-44     	; 0x2344 <__ultoa_invert+0x58>
    2370:	b4 e0       	ldi	r27, 0x04	; 4
    2372:	a6 95       	lsr	r26
    2374:	97 95       	ror	r25
    2376:	87 95       	ror	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	ba 95       	dec	r27
    237e:	c9 f7       	brne	.-14     	; 0x2372 <__ultoa_invert+0x86>
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 05       	cpc	r22, r1
    2384:	71 05       	cpc	r23, r1
    2386:	08 95       	ret
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	0a 2e       	mov	r0, r26
    238e:	06 94       	lsr	r0
    2390:	57 95       	ror	r21
    2392:	47 95       	ror	r20
    2394:	37 95       	ror	r19
    2396:	27 95       	ror	r18
    2398:	ba 95       	dec	r27
    239a:	c9 f7       	brne	.-14     	; 0x238e <__ultoa_invert+0xa2>
    239c:	62 0f       	add	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	a0 1d       	adc	r26, r0
    23a6:	08 95       	ret

000023a8 <__divmodsi4>:
    23a8:	05 2e       	mov	r0, r21
    23aa:	97 fb       	bst	r25, 7
    23ac:	16 f4       	brtc	.+4      	; 0x23b2 <__divmodsi4+0xa>
    23ae:	00 94       	com	r0
    23b0:	0f d0       	rcall	.+30     	; 0x23d0 <__negsi2>
    23b2:	57 fd       	sbrc	r21, 7
    23b4:	05 d0       	rcall	.+10     	; 0x23c0 <__divmodsi4_neg2>
    23b6:	5b d0       	rcall	.+182    	; 0x246e <__udivmodsi4>
    23b8:	07 fc       	sbrc	r0, 7
    23ba:	02 d0       	rcall	.+4      	; 0x23c0 <__divmodsi4_neg2>
    23bc:	46 f4       	brtc	.+16     	; 0x23ce <__divmodsi4_exit>
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <__negsi2>

000023c0 <__divmodsi4_neg2>:
    23c0:	50 95       	com	r21
    23c2:	40 95       	com	r20
    23c4:	30 95       	com	r19
    23c6:	21 95       	neg	r18
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	4f 4f       	sbci	r20, 0xFF	; 255
    23cc:	5f 4f       	sbci	r21, 0xFF	; 255

000023ce <__divmodsi4_exit>:
    23ce:	08 95       	ret

000023d0 <__negsi2>:
    23d0:	90 95       	com	r25
    23d2:	80 95       	com	r24
    23d4:	70 95       	com	r23
    23d6:	61 95       	neg	r22
    23d8:	7f 4f       	sbci	r23, 0xFF	; 255
    23da:	8f 4f       	sbci	r24, 0xFF	; 255
    23dc:	9f 4f       	sbci	r25, 0xFF	; 255
    23de:	08 95       	ret

000023e0 <__muluhisi3>:
    23e0:	68 d0       	rcall	.+208    	; 0x24b2 <__umulhisi3>
    23e2:	a5 9f       	mul	r26, r21
    23e4:	90 0d       	add	r25, r0
    23e6:	b4 9f       	mul	r27, r20
    23e8:	90 0d       	add	r25, r0
    23ea:	a4 9f       	mul	r26, r20
    23ec:	80 0d       	add	r24, r0
    23ee:	91 1d       	adc	r25, r1
    23f0:	11 24       	eor	r1, r1
    23f2:	08 95       	ret

000023f4 <__mulshisi3>:
    23f4:	b7 ff       	sbrs	r27, 7
    23f6:	f4 cf       	rjmp	.-24     	; 0x23e0 <__muluhisi3>

000023f8 <__mulohisi3>:
    23f8:	f3 df       	rcall	.-26     	; 0x23e0 <__muluhisi3>
    23fa:	82 1b       	sub	r24, r18
    23fc:	93 0b       	sbc	r25, r19
    23fe:	08 95       	ret

00002400 <__prologue_saves__>:
    2400:	2f 92       	push	r2
    2402:	3f 92       	push	r3
    2404:	4f 92       	push	r4
    2406:	5f 92       	push	r5
    2408:	6f 92       	push	r6
    240a:	7f 92       	push	r7
    240c:	8f 92       	push	r8
    240e:	9f 92       	push	r9
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	ca 1b       	sub	r28, r26
    242a:	db 0b       	sbc	r29, r27
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	09 94       	ijmp

00002438 <__epilogue_restores__>:
    2438:	2a 88       	ldd	r2, Y+18	; 0x12
    243a:	39 88       	ldd	r3, Y+17	; 0x11
    243c:	48 88       	ldd	r4, Y+16	; 0x10
    243e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2440:	6e 84       	ldd	r6, Y+14	; 0x0e
    2442:	7d 84       	ldd	r7, Y+13	; 0x0d
    2444:	8c 84       	ldd	r8, Y+12	; 0x0c
    2446:	9b 84       	ldd	r9, Y+11	; 0x0b
    2448:	aa 84       	ldd	r10, Y+10	; 0x0a
    244a:	b9 84       	ldd	r11, Y+9	; 0x09
    244c:	c8 84       	ldd	r12, Y+8	; 0x08
    244e:	df 80       	ldd	r13, Y+7	; 0x07
    2450:	ee 80       	ldd	r14, Y+6	; 0x06
    2452:	fd 80       	ldd	r15, Y+5	; 0x05
    2454:	0c 81       	ldd	r16, Y+4	; 0x04
    2456:	1b 81       	ldd	r17, Y+3	; 0x03
    2458:	aa 81       	ldd	r26, Y+2	; 0x02
    245a:	b9 81       	ldd	r27, Y+1	; 0x01
    245c:	ce 0f       	add	r28, r30
    245e:	d1 1d       	adc	r29, r1
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	ed 01       	movw	r28, r26
    246c:	08 95       	ret

0000246e <__udivmodsi4>:
    246e:	a1 e2       	ldi	r26, 0x21	; 33
    2470:	1a 2e       	mov	r1, r26
    2472:	aa 1b       	sub	r26, r26
    2474:	bb 1b       	sub	r27, r27
    2476:	fd 01       	movw	r30, r26
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <__udivmodsi4_ep>

0000247a <__udivmodsi4_loop>:
    247a:	aa 1f       	adc	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	ee 1f       	adc	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	a2 17       	cp	r26, r18
    2484:	b3 07       	cpc	r27, r19
    2486:	e4 07       	cpc	r30, r20
    2488:	f5 07       	cpc	r31, r21
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__udivmodsi4_ep>
    248c:	a2 1b       	sub	r26, r18
    248e:	b3 0b       	sbc	r27, r19
    2490:	e4 0b       	sbc	r30, r20
    2492:	f5 0b       	sbc	r31, r21

00002494 <__udivmodsi4_ep>:
    2494:	66 1f       	adc	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	1a 94       	dec	r1
    249e:	69 f7       	brne	.-38     	; 0x247a <__udivmodsi4_loop>
    24a0:	60 95       	com	r22
    24a2:	70 95       	com	r23
    24a4:	80 95       	com	r24
    24a6:	90 95       	com	r25
    24a8:	9b 01       	movw	r18, r22
    24aa:	ac 01       	movw	r20, r24
    24ac:	bd 01       	movw	r22, r26
    24ae:	cf 01       	movw	r24, r30
    24b0:	08 95       	ret

000024b2 <__umulhisi3>:
    24b2:	a2 9f       	mul	r26, r18
    24b4:	b0 01       	movw	r22, r0
    24b6:	b3 9f       	mul	r27, r19
    24b8:	c0 01       	movw	r24, r0
    24ba:	a3 9f       	mul	r26, r19
    24bc:	70 0d       	add	r23, r0
    24be:	81 1d       	adc	r24, r1
    24c0:	11 24       	eor	r1, r1
    24c2:	91 1d       	adc	r25, r1
    24c4:	b2 9f       	mul	r27, r18
    24c6:	70 0d       	add	r23, r0
    24c8:	81 1d       	adc	r24, r1
    24ca:	11 24       	eor	r1, r1
    24cc:	91 1d       	adc	r25, r1
    24ce:	08 95       	ret

000024d0 <_exit>:
    24d0:	f8 94       	cli

000024d2 <__stop_program>:
    24d2:	ff cf       	rjmp	.-2      	; 0x24d2 <__stop_program>
