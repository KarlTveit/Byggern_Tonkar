
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  000023fc  00002490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800222  00800222  000025b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032cc  00000000  00000000  0000295e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000134a  00000000  00000000  00005c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021aa  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008a4  00000000  00000000  00009120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009ee  00000000  00000000  000099c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d60  00000000  00000000  0000a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0000c112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c1       	rjmp	.+680    	; 0x2aa <__ctors_end>
       2:	00 00       	nop
       4:	6f c1       	rjmp	.+734    	; 0x2e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c1       	rjmp	.+730    	; 0x2e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__vector_3>
       e:	00 00       	nop
      10:	69 c1       	rjmp	.+722    	; 0x2e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c1       	rjmp	.+718    	; 0x2e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c1       	rjmp	.+714    	; 0x2e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c1       	rjmp	.+710    	; 0x2e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c1       	rjmp	.+706    	; 0x2e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c1       	rjmp	.+702    	; 0x2e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c1       	rjmp	.+698    	; 0x2e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c1       	rjmp	.+694    	; 0x2e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c1       	rjmp	.+690    	; 0x2e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_13>
      38:	55 c1       	rjmp	.+682    	; 0x2e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c1       	rjmp	.+678    	; 0x2e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c1       	rjmp	.+674    	; 0x2e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c1       	rjmp	.+670    	; 0x2e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c1       	rjmp	.+666    	; 0x2e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_19>
      50:	49 c1       	rjmp	.+658    	; 0x2e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c1       	rjmp	.+654    	; 0x2e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c1       	rjmp	.+650    	; 0x2e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c1       	rjmp	.+646    	; 0x2e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c1       	rjmp	.+642    	; 0x2e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c1       	rjmp	.+638    	; 0x2e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c1       	rjmp	.+634    	; 0x2e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c1       	rjmp	.+630    	; 0x2e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	08 00       	.word	0x0008	; ????
      72:	00 00       	nop
      74:	be 92       	st	-X, r11
      76:	24 49       	sbci	r18, 0x94	; 148
      78:	12 3e       	cpi	r17, 0xE2	; 226
      7a:	ab aa       	std	Y+51, r10	; 0x33
      7c:	aa 2a       	or	r10, r26
      7e:	be cd       	rjmp	.-1156   	; 0xfffffbfc <__eeprom_end+0xff7efbfc>
      80:	cc cc       	rjmp	.-1640   	; 0xfffffa1a <__eeprom_end+0xff7efa1a>
      82:	4c 3e       	cpi	r20, 0xEC	; 236
      84:	00 00       	nop
      86:	00 80       	ld	r0, Z
      88:	be ab       	std	Y+54, r27	; 0x36
      8a:	aa aa       	std	Y+50, r10	; 0x32
      8c:	aa 3e       	cpi	r26, 0xEA	; 234
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	bf 00       	.word	0x00bf	; ????
      94:	00 00       	nop
      96:	80 3f       	cpi	r24, 0xF0	; 240
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 08       	sbc	r0, r0
      9e:	41 78       	andi	r20, 0x81	; 129
      a0:	d3 bb       	out	0x13, r29	; 19
      a2:	43 87       	std	Z+11, r20	; 0x0b
      a4:	d1 13       	cpse	r29, r17
      a6:	3d 19       	sub	r19, r13
      a8:	0e 3c       	cpi	r16, 0xCE	; 206
      aa:	c3 bd       	out	0x23, r28	; 35
      ac:	42 82       	std	Z+2, r4	; 0x02
      ae:	ad 2b       	or	r26, r29
      b0:	3e 68       	ori	r19, 0x8E	; 142
      b2:	ec 82       	std	Y+4, r14	; 0x04
      b4:	76 be       	out	0x36, r7	; 54
      b6:	d9 8f       	std	Y+25, r29	; 0x19
      b8:	e1 a9       	ldd	r30, Z+49	; 0x31
      ba:	3e 4c       	sbci	r19, 0xCE	; 206
      bc:	80 ef       	ldi	r24, 0xF0	; 240
      be:	ff be       	out	0x3f, r15	; 63
      c0:	01 c4       	rjmp	.+2050   	; 0x8c4 <MENU_choose+0xc>
      c2:	ff 7f       	andi	r31, 0xFF	; 255
      c4:	3f 00       	.word	0x003f	; ????
      c6:	00 00       	nop
	...

000000ca <__trampolines_end>:
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 5f       	subi	r16, 0xF0	; 240
      d2:	00 00       	nop
      d4:	00 07       	cpc	r16, r16
      d6:	00 07       	cpc	r16, r16
      d8:	00 14       	cp	r0, r0
      da:	7f 14       	cp	r7, r15
      dc:	7f 14       	cp	r7, r15
      de:	24 2a       	or	r2, r20
      e0:	7f 2a       	or	r7, r31
      e2:	12 23       	and	r17, r18
      e4:	13 08       	sbc	r1, r3
      e6:	64 62       	ori	r22, 0x24	; 36
      e8:	36 49       	sbci	r19, 0x96	; 150
      ea:	55 22       	and	r5, r21
      ec:	50 00       	.word	0x0050	; ????
      ee:	05 03       	mulsu	r16, r21
      f0:	00 00       	nop
      f2:	00 1c       	adc	r0, r0
      f4:	22 41       	sbci	r18, 0x12	; 18
      f6:	00 00       	nop
      f8:	41 22       	and	r4, r17
      fa:	1c 00       	.word	0x001c	; ????
      fc:	08 2a       	or	r0, r24
      fe:	1c 2a       	or	r1, r28
     100:	08 08       	sbc	r0, r8
     102:	08 3e       	cpi	r16, 0xE8	; 232
     104:	08 08       	sbc	r0, r8
     106:	00 50       	subi	r16, 0x00	; 0
     108:	30 00       	.word	0x0030	; ????
     10a:	00 08       	sbc	r0, r0
     10c:	08 08       	sbc	r0, r8
     10e:	08 08       	sbc	r0, r8
     110:	00 60       	ori	r16, 0x00	; 0
     112:	60 00       	.word	0x0060	; ????
     114:	00 20       	and	r0, r0
     116:	10 08       	sbc	r1, r0
     118:	04 02       	muls	r16, r20
     11a:	3e 51       	subi	r19, 0x1E	; 30
     11c:	49 45       	sbci	r20, 0x59	; 89
     11e:	3e 00       	.word	0x003e	; ????
     120:	42 7f       	andi	r20, 0xF2	; 242
     122:	40 00       	.word	0x0040	; ????
     124:	42 61       	ori	r20, 0x12	; 18
     126:	51 49       	sbci	r21, 0x91	; 145
     128:	46 21       	and	r20, r6
     12a:	41 45       	sbci	r20, 0x51	; 81
     12c:	4b 31       	cpi	r20, 0x1B	; 27
     12e:	18 14       	cp	r1, r8
     130:	12 7f       	andi	r17, 0xF2	; 242
     132:	10 27       	eor	r17, r16
     134:	45 45       	sbci	r20, 0x55	; 85
     136:	45 39       	cpi	r20, 0x95	; 149
     138:	3c 4a       	sbci	r19, 0xAC	; 172
     13a:	49 49       	sbci	r20, 0x99	; 153
     13c:	30 01       	movw	r6, r0
     13e:	71 09       	sbc	r23, r1
     140:	05 03       	mulsu	r16, r21
     142:	36 49       	sbci	r19, 0x96	; 150
     144:	49 49       	sbci	r20, 0x99	; 153
     146:	36 06       	cpc	r3, r22
     148:	49 49       	sbci	r20, 0x99	; 153
     14a:	29 1e       	adc	r2, r25
     14c:	00 36       	cpi	r16, 0x60	; 96
     14e:	36 00       	.word	0x0036	; ????
     150:	00 00       	nop
     152:	56 36       	cpi	r21, 0x66	; 102
     154:	00 00       	nop
     156:	00 08       	sbc	r0, r0
     158:	14 22       	and	r1, r20
     15a:	41 14       	cp	r4, r1
     15c:	14 14       	cp	r1, r4
     15e:	14 14       	cp	r1, r4
     160:	41 22       	and	r4, r17
     162:	14 08       	sbc	r1, r4
     164:	00 02       	muls	r16, r16
     166:	01 51       	subi	r16, 0x11	; 17
     168:	09 06       	cpc	r0, r25
     16a:	32 49       	sbci	r19, 0x92	; 146
     16c:	79 41       	sbci	r23, 0x19	; 25
     16e:	3e 7e       	andi	r19, 0xEE	; 238
     170:	11 11       	cpse	r17, r1
     172:	11 7e       	andi	r17, 0xE1	; 225
     174:	7f 49       	sbci	r23, 0x9F	; 159
     176:	49 49       	sbci	r20, 0x99	; 153
     178:	36 3e       	cpi	r19, 0xE6	; 230
     17a:	41 41       	sbci	r20, 0x11	; 17
     17c:	41 22       	and	r4, r17
     17e:	7f 41       	sbci	r23, 0x1F	; 31
     180:	41 22       	and	r4, r17
     182:	1c 7f       	andi	r17, 0xFC	; 252
     184:	49 49       	sbci	r20, 0x99	; 153
     186:	49 41       	sbci	r20, 0x19	; 25
     188:	7f 09       	sbc	r23, r15
     18a:	09 01       	movw	r0, r18
     18c:	01 3e       	cpi	r16, 0xE1	; 225
     18e:	41 41       	sbci	r20, 0x11	; 17
     190:	51 32       	cpi	r21, 0x21	; 33
     192:	7f 08       	sbc	r7, r15
     194:	08 08       	sbc	r0, r8
     196:	7f 00       	.word	0x007f	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	41 00       	.word	0x0041	; ????
     19c:	20 40       	sbci	r18, 0x00	; 0
     19e:	41 3f       	cpi	r20, 0xF1	; 241
     1a0:	01 7f       	andi	r16, 0xF1	; 241
     1a2:	08 14       	cp	r0, r8
     1a4:	22 41       	sbci	r18, 0x12	; 18
     1a6:	7f 40       	sbci	r23, 0x0F	; 15
     1a8:	40 40       	sbci	r20, 0x00	; 0
     1aa:	40 7f       	andi	r20, 0xF0	; 240
     1ac:	02 04       	cpc	r0, r2
     1ae:	02 7f       	andi	r16, 0xF2	; 242
     1b0:	7f 04       	cpc	r7, r15
     1b2:	08 10       	cpse	r0, r8
     1b4:	7f 3e       	cpi	r23, 0xEF	; 239
     1b6:	41 41       	sbci	r20, 0x11	; 17
     1b8:	41 3e       	cpi	r20, 0xE1	; 225
     1ba:	7f 09       	sbc	r23, r15
     1bc:	09 09       	sbc	r16, r9
     1be:	06 3e       	cpi	r16, 0xE6	; 230
     1c0:	41 51       	subi	r20, 0x11	; 17
     1c2:	21 5e       	subi	r18, 0xE1	; 225
     1c4:	7f 09       	sbc	r23, r15
     1c6:	19 29       	or	r17, r9
     1c8:	46 46       	sbci	r20, 0x66	; 102
     1ca:	49 49       	sbci	r20, 0x99	; 153
     1cc:	49 31       	cpi	r20, 0x19	; 25
     1ce:	01 01       	movw	r0, r2
     1d0:	7f 01       	movw	r14, r30
     1d2:	01 3f       	cpi	r16, 0xF1	; 241
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	40 3f       	cpi	r20, 0xF0	; 240
     1d8:	1f 20       	and	r1, r15
     1da:	40 20       	and	r4, r0
     1dc:	1f 7f       	andi	r17, 0xFF	; 255
     1de:	20 18       	sub	r2, r0
     1e0:	20 7f       	andi	r18, 0xF0	; 240
     1e2:	63 14       	cp	r6, r3
     1e4:	08 14       	cp	r0, r8
     1e6:	63 03       	mulsu	r22, r19
     1e8:	04 78       	andi	r16, 0x84	; 132
     1ea:	04 03       	mulsu	r16, r20
     1ec:	61 51       	subi	r22, 0x11	; 17
     1ee:	49 45       	sbci	r20, 0x59	; 89
     1f0:	43 00       	.word	0x0043	; ????
     1f2:	00 7f       	andi	r16, 0xF0	; 240
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	02 04       	cpc	r0, r2
     1f8:	08 10       	cpse	r0, r8
     1fa:	20 41       	sbci	r18, 0x10	; 16
     1fc:	41 7f       	andi	r20, 0xF1	; 241
     1fe:	00 00       	nop
     200:	04 02       	muls	r16, r20
     202:	01 02       	muls	r16, r17
     204:	04 40       	sbci	r16, 0x04	; 4
     206:	40 40       	sbci	r20, 0x00	; 0
     208:	40 40       	sbci	r20, 0x00	; 0
     20a:	00 01       	movw	r0, r0
     20c:	02 04       	cpc	r0, r2
     20e:	00 20       	and	r0, r0
     210:	54 54       	subi	r21, 0x44	; 68
     212:	54 78       	andi	r21, 0x84	; 132
     214:	7f 48       	sbci	r23, 0x8F	; 143
     216:	44 44       	sbci	r20, 0x44	; 68
     218:	38 38       	cpi	r19, 0x88	; 136
     21a:	44 44       	sbci	r20, 0x44	; 68
     21c:	44 20       	and	r4, r4
     21e:	38 44       	sbci	r19, 0x48	; 72
     220:	44 48       	sbci	r20, 0x84	; 132
     222:	7f 38       	cpi	r23, 0x8F	; 143
     224:	54 54       	subi	r21, 0x44	; 68
     226:	54 18       	sub	r5, r4
     228:	08 7e       	andi	r16, 0xE8	; 232
     22a:	09 01       	movw	r0, r18
     22c:	02 08       	sbc	r0, r2
     22e:	14 54       	subi	r17, 0x44	; 68
     230:	54 3c       	cpi	r21, 0xC4	; 196
     232:	7f 08       	sbc	r7, r15
     234:	04 04       	cpc	r0, r4
     236:	78 00       	.word	0x0078	; ????
     238:	44 7d       	andi	r20, 0xD4	; 212
     23a:	40 00       	.word	0x0040	; ????
     23c:	20 40       	sbci	r18, 0x00	; 0
     23e:	44 3d       	cpi	r20, 0xD4	; 212
     240:	00 00       	nop
     242:	7f 10       	cpse	r7, r15
     244:	28 44       	sbci	r18, 0x48	; 72
     246:	00 41       	sbci	r16, 0x10	; 16
     248:	7f 40       	sbci	r23, 0x0F	; 15
     24a:	00 7c       	andi	r16, 0xC0	; 192
     24c:	04 18       	sub	r0, r4
     24e:	04 78       	andi	r16, 0x84	; 132
     250:	7c 08       	sbc	r7, r12
     252:	04 04       	cpc	r0, r4
     254:	78 38       	cpi	r23, 0x88	; 136
     256:	44 44       	sbci	r20, 0x44	; 68
     258:	44 38       	cpi	r20, 0x84	; 132
     25a:	7c 14       	cp	r7, r12
     25c:	14 14       	cp	r1, r4
     25e:	08 08       	sbc	r0, r8
     260:	14 14       	cp	r1, r4
     262:	18 7c       	andi	r17, 0xC8	; 200
     264:	7c 08       	sbc	r7, r12
     266:	04 04       	cpc	r0, r4
     268:	08 48       	sbci	r16, 0x88	; 136
     26a:	54 54       	subi	r21, 0x44	; 68
     26c:	54 20       	and	r5, r4
     26e:	04 3f       	cpi	r16, 0xF4	; 244
     270:	44 40       	sbci	r20, 0x04	; 4
     272:	20 3c       	cpi	r18, 0xC0	; 192
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	20 7c       	andi	r18, 0xC0	; 192
     278:	1c 20       	and	r1, r12
     27a:	40 20       	and	r4, r0
     27c:	1c 3c       	cpi	r17, 0xCC	; 204
     27e:	40 30       	cpi	r20, 0x00	; 0
     280:	40 3c       	cpi	r20, 0xC0	; 192
     282:	44 28       	or	r4, r4
     284:	10 28       	or	r1, r0
     286:	44 0c       	add	r4, r4
     288:	50 50       	subi	r21, 0x00	; 0
     28a:	50 3c       	cpi	r21, 0xC0	; 192
     28c:	44 64       	ori	r20, 0x44	; 68
     28e:	54 4c       	sbci	r21, 0xC4	; 196
     290:	44 00       	.word	0x0044	; ????
     292:	08 36       	cpi	r16, 0x68	; 104
     294:	41 00       	.word	0x0041	; ????
     296:	00 00       	nop
     298:	7f 00       	.word	0x007f	; ????
     29a:	00 00       	nop
     29c:	41 36       	cpi	r20, 0x61	; 97
     29e:	08 00       	.word	0x0008	; ????
     2a0:	0c 12       	cpse	r0, r28
     2a2:	24 12       	cpse	r2, r20
     2a4:	0c 0c       	add	r0, r12
     2a6:	12 24       	eor	r1, r2
     2a8:	12 0c       	add	r1, r2

000002aa <__ctors_end>:
     2aa:	11 24       	eor	r1, r1
     2ac:	1f be       	out	0x3f, r1	; 63
     2ae:	cf ef       	ldi	r28, 0xFF	; 255
     2b0:	d4 e0       	ldi	r29, 0x04	; 4
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	cd bf       	out	0x3d, r28	; 61

000002b6 <__do_copy_data>:
     2b6:	12 e0       	ldi	r17, 0x02	; 2
     2b8:	a0 e0       	ldi	r26, 0x00	; 0
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	ec ef       	ldi	r30, 0xFC	; 252
     2be:	f3 e2       	ldi	r31, 0x23	; 35
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__do_copy_data+0x10>
     2c2:	05 90       	lpm	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	a2 32       	cpi	r26, 0x22	; 34
     2c8:	b1 07       	cpc	r27, r17
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <__do_copy_data+0xc>

000002cc <__do_clear_bss>:
     2cc:	22 e0       	ldi	r18, 0x02	; 2
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b2 e0       	ldi	r27, 0x02	; 2
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <.do_clear_bss_start>

000002d4 <.do_clear_bss_loop>:
     2d4:	1d 92       	st	X+, r1

000002d6 <.do_clear_bss_start>:
     2d6:	aa 34       	cpi	r26, 0x4A	; 74
     2d8:	b2 07       	cpc	r27, r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <.do_clear_bss_loop>
     2dc:	0e 94 10 0a 	call	0x1420	; 0x1420 <main>
     2e0:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <_exit>

000002e4 <__bad_interrupt>:
     2e4:	8d ce       	rjmp	.-742    	; 0x0 <__vectors>

000002e6 <ADC_init>:



void ADC_init(void){
	// enable external reset
	MCUCR |= (1 << SRE);
     2e6:	85 b7       	in	r24, 0x35	; 53
     2e8:	80 68       	ori	r24, 0x80	; 128
     2ea:	85 bf       	out	0x35, r24	; 53
	
	DDRE &= ~(1<<PINE0);
     2ec:	30 98       	cbi	0x06, 0	; 6
		
	// mask pins, s. 32 i datablad atmega162
	SFIOR |= (1 << XMM2);
     2ee:	80 b7       	in	r24, 0x30	; 48
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 bf       	out	0x30, r24	; 48
		
	//interrupt on falling edge PE0
	EMCUCR &= ~(1<<ISC2);
     2f4:	86 b7       	in	r24, 0x36	; 54
     2f6:	8e 7f       	andi	r24, 0xFE	; 254
     2f8:	86 bf       	out	0x36, r24	; 54
	
	//Enable interrupts on PE0
	GICR |= (1<<INT2);
     2fa:	8b b7       	in	r24, 0x3b	; 59
     2fc:	80 62       	ori	r24, 0x20	; 32
     2fe:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     300:	78 94       	sei
     302:	08 95       	ret

00000304 <ADC_read>:

uint8_t ADC_read(channel ch){
	//venter til interrupt 
	
	volatile char *ext_ADCCH = (char *) ADC_START_ADDRESS;// starter addressen til adc
	ext_ADCCH[0] = ch; // *ext_ADC = ch
     304:	80 93 00 14 	sts	0x1400, r24
	
	
	while (PINE & (1<<PINE0)) {}
     308:	28 99       	sbic	0x05, 0	; 5
     30a:	fe cf       	rjmp	.-4      	; 0x308 <ADC_read+0x4>
	interrupt_flag = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 3f 02 	sts	0x023F, r24

	
	return ext_ADCCH[0];	
     312:	80 91 00 14 	lds	r24, 0x1400
}
     316:	08 95       	ret

00000318 <__vector_3>:




ISR(INT2_vect){
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
	interrupt_flag = 0;
     322:	10 92 3f 02 	sts	0x023F, r1
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <CAN_init>:
	for (uint8_t i = 0; i < message.length; i++) {
		printf("%d ", message.data[i]);
	}
	printf("\n\n");
	
}
     330:	73 d1       	rcall	.+742    	; 0x618 <MCP2515_init>
     332:	40 e6       	ldi	r20, 0x60	; 96
     334:	64 e6       	ldi	r22, 0x64	; 100
     336:	80 e6       	ldi	r24, 0x60	; 96
     338:	56 d1       	rcall	.+684    	; 0x5e6 <MCP2515_bit_modify>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	60 ee       	ldi	r22, 0xE0	; 224
     33e:	8f e0       	ldi	r24, 0x0F	; 15
     340:	52 d1       	rcall	.+676    	; 0x5e6 <MCP2515_bit_modify>
     342:	4f ef       	ldi	r20, 0xFF	; 255
     344:	60 e6       	ldi	r22, 0x60	; 96
     346:	80 e6       	ldi	r24, 0x60	; 96
     348:	4e c1       	rjmp	.+668    	; 0x5e6 <MCP2515_bit_modify>
     34a:	08 95       	ret

0000034c <CAN_send_message>:
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	ec 01       	movw	r28, r24
     354:	80 e3       	ldi	r24, 0x30	; 48
     356:	14 d1       	rcall	.+552    	; 0x580 <MCP2515_read>
     358:	83 fd       	sbrc	r24, 3
     35a:	22 c0       	rjmp	.+68     	; 0x3a0 <CAN_send_message+0x54>
     35c:	88 81       	ld	r24, Y
     35e:	99 81       	ldd	r25, Y+1	; 0x01
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	96 95       	lsr	r25
     366:	87 95       	ror	r24
     368:	96 95       	lsr	r25
     36a:	87 95       	ror	r24
     36c:	61 e3       	ldi	r22, 0x31	; 49
     36e:	15 d1       	rcall	.+554    	; 0x59a <MCP2515_write>
     370:	88 81       	ld	r24, Y
     372:	62 e3       	ldi	r22, 0x32	; 50
     374:	82 95       	swap	r24
     376:	88 0f       	add	r24, r24
     378:	80 7e       	andi	r24, 0xE0	; 224
     37a:	0f d1       	rcall	.+542    	; 0x59a <MCP2515_write>
     37c:	65 e3       	ldi	r22, 0x35	; 53
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	0c d1       	rcall	.+536    	; 0x59a <MCP2515_write>
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 23       	and	r24, r24
     386:	61 f0       	breq	.+24     	; 0x3a0 <CAN_send_message+0x54>
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	66 e3       	ldi	r22, 0x36	; 54
     38c:	61 0f       	add	r22, r17
     38e:	fe 01       	movw	r30, r28
     390:	e1 0f       	add	r30, r17
     392:	f1 1d       	adc	r31, r1
     394:	83 81       	ldd	r24, Z+3	; 0x03
     396:	01 d1       	rcall	.+514    	; 0x59a <MCP2515_write>
     398:	1f 5f       	subi	r17, 0xFF	; 255
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	18 17       	cp	r17, r24
     39e:	a8 f3       	brcs	.-22     	; 0x38a <CAN_send_message+0x3e>
     3a0:	81 e8       	ldi	r24, 0x81	; 129
     3a2:	0a d1       	rcall	.+532    	; 0x5b8 <MCP2515_request_to_send>
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	08 95       	ret

000003ac <CAN_recieve_data>:
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	8c e2       	ldi	r24, 0x2C	; 44
     3b6:	e4 d0       	rcall	.+456    	; 0x580 <MCP2515_read>
     3b8:	80 ff       	sbrs	r24, 0
     3ba:	2f c0       	rjmp	.+94     	; 0x41a <CAN_recieve_data+0x6e>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 ef       	ldi	r25, 0xF0	; 240
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <CAN_recieve_data+0x14>
     3c4:	81 e6       	ldi	r24, 0x61	; 97
     3c6:	dc d0       	rcall	.+440    	; 0x580 <MCP2515_read>
     3c8:	18 2f       	mov	r17, r24
     3ca:	82 e6       	ldi	r24, 0x62	; 98
     3cc:	d9 d0       	rcall	.+434    	; 0x580 <MCP2515_read>
     3ce:	48 2f       	mov	r20, r24
     3d0:	42 95       	swap	r20
     3d2:	46 95       	lsr	r20
     3d4:	47 70       	andi	r20, 0x07	; 7
     3d6:	21 2f       	mov	r18, r17
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	c9 01       	movw	r24, r18
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	84 2b       	or	r24, r20
     3ea:	99 83       	std	Y+1, r25	; 0x01
     3ec:	88 83       	st	Y, r24
     3ee:	85 e6       	ldi	r24, 0x65	; 101
     3f0:	c7 d0       	rcall	.+398    	; 0x580 <MCP2515_read>
     3f2:	87 70       	andi	r24, 0x07	; 7
     3f4:	8a 83       	std	Y+2, r24	; 0x02
     3f6:	88 23       	and	r24, r24
     3f8:	61 f0       	breq	.+24     	; 0x412 <CAN_recieve_data+0x66>
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	86 e6       	ldi	r24, 0x66	; 102
     3fe:	81 0f       	add	r24, r17
     400:	bf d0       	rcall	.+382    	; 0x580 <MCP2515_read>
     402:	fe 01       	movw	r30, r28
     404:	e1 0f       	add	r30, r17
     406:	f1 1d       	adc	r31, r1
     408:	83 83       	std	Z+3, r24	; 0x03
     40a:	1f 5f       	subi	r17, 0xFF	; 255
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	18 17       	cp	r17, r24
     410:	a8 f3       	brcs	.-22     	; 0x3fc <CAN_recieve_data+0x50>
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	8c e2       	ldi	r24, 0x2C	; 44
     418:	e6 d0       	rcall	.+460    	; 0x5e6 <MCP2515_bit_modify>
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	08 95       	ret

00000422 <CAN_create_message>:


can_message_t* CAN_create_message(can_message_t* message, uint16_t id, uint8_t length, uint8_t data[]) {
	
	message->id = id;
     422:	fc 01       	movw	r30, r24
     424:	71 83       	std	Z+1, r23	; 0x01
     426:	60 83       	st	Z, r22
	message->length = length;
     428:	42 83       	std	Z+2, r20	; 0x02
	
	for (uint8_t i = 0; i < message->length; i = i+1) {
     42a:	44 23       	and	r20, r20
     42c:	59 f0       	breq	.+22     	; 0x444 <CAN_create_message+0x22>
     42e:	52 2f       	mov	r21, r18
     430:	dc 01       	movw	r26, r24
     432:	13 96       	adiw	r26, 0x03	; 3
     434:	e2 2f       	mov	r30, r18
     436:	f3 2f       	mov	r31, r19
		message->data[i] = data[i];
     438:	21 91       	ld	r18, Z+
     43a:	2d 93       	st	X+, r18
     43c:	2e 2f       	mov	r18, r30
     43e:	25 1b       	sub	r18, r21
can_message_t* CAN_create_message(can_message_t* message, uint16_t id, uint8_t length, uint8_t data[]) {
	
	message->id = id;
	message->length = length;
	
	for (uint8_t i = 0; i < message->length; i = i+1) {
     440:	24 17       	cp	r18, r20
     442:	d0 f3       	brcs	.-12     	; 0x438 <CAN_create_message+0x16>
		message->data[i] = data[i];
	}
	
	return message;
}
     444:	08 95       	ret

00000446 <EEPROM_write>:
#include "eeprom.h"

void EEPROM_write(uint8_t address, uint8_t data){
	
	//waiting until write enable is set
	while(EECR & (1<<EEWE)){} 
     446:	e1 99       	sbic	0x1c, 1	; 28
     448:	fe cf       	rjmp	.-4      	; 0x446 <EEPROM_write>
		
	//setting address register
	EEAR = address;	
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9f bb       	out	0x1f, r25	; 31
     44e:	8e bb       	out	0x1e, r24	; 30
		
	//setting data register
	EEDR = data;
     450:	6d bb       	out	0x1d, r22	; 29
	
	//master wrte enable			
	EECR |= (1<<EEMWE);			
     452:	e2 9a       	sbi	0x1c, 2	; 28
	
	//start EEPROM write
	EECR |= (1<<EEWE);
     454:	e1 9a       	sbi	0x1c, 1	; 28
     456:	08 95       	ret

00000458 <EEPROM_read>:
				

char* EEPROM_read(uint8_t address){
	
	//waiting until read enable
	while (EECR & (1 << EEWE)); 
     458:	e1 99       	sbic	0x1c, 1	; 28
     45a:	fe cf       	rjmp	.-4      	; 0x458 <EEPROM_read>
	
	EEAR = address;
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	9f bb       	out	0x1f, r25	; 31
     460:	8e bb       	out	0x1e, r24	; 30
	
	//reading address				
	EECR |= (1<<EERE);
     462:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     464:	8d b3       	in	r24, 0x1d	; 29
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <JOY_init>:

void JOY_calibrate(){
	
	corr_x = 0 - ADC_read(joyX) -127;
	corr_y = 0 - ADC_read(joyY)- 127;
}
     46a:	3d df       	rcall	.-390    	; 0x2e6 <ADC_init>
     46c:	b8 98       	cbi	0x17, 0	; 23
     46e:	b9 98       	cbi	0x17, 1	; 23
     470:	ba 98       	cbi	0x17, 2	; 23
     472:	c2 9a       	sbi	0x18, 2	; 24
     474:	08 95       	ret

00000476 <JOY_getPosition>:



JOY_position_t JOY_getPosition(void) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
	JOY_position_t pos;
	
	//reading ADC and scaling to 8-bit
	pos.X = (int)((ADC_read(joyX)*0.7874)) + corr_x - 100;
     47a:	85 e0       	ldi	r24, 0x05	; 5
     47c:	43 df       	rcall	.-378    	; 0x304 <ADC_read>
     47e:	68 2f       	mov	r22, r24
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatsisf>
     48a:	2c e0       	ldi	r18, 0x0C	; 12
     48c:	33 e9       	ldi	r19, 0x93	; 147
     48e:	49 e4       	ldi	r20, 0x49	; 73
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
     496:	0e 94 99 0a 	call	0x1532	; 0x1532 <__fixsfsi>
     49a:	c0 91 23 02 	lds	r28, 0x0223
     49e:	dd 27       	eor	r29, r29
     4a0:	c7 fd       	sbrc	r28, 7
     4a2:	d0 95       	com	r29
     4a4:	6c 0f       	add	r22, r28
     4a6:	7d 1f       	adc	r23, r29
     4a8:	eb 01       	movw	r28, r22
     4aa:	c4 56       	subi	r28, 0x64	; 100
     4ac:	d1 09       	sbc	r29, r1
	pos.Y = (int) ((ADC_read(joyY)*0.7874)) + corr_y - 100;
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	29 df       	rcall	.-430    	; 0x304 <ADC_read>
     4b2:	68 2f       	mov	r22, r24
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__floatsisf>
     4be:	2c e0       	ldi	r18, 0x0C	; 12
     4c0:	33 e9       	ldi	r19, 0x93	; 147
     4c2:	49 e4       	ldi	r20, 0x49	; 73
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
     4ca:	0e 94 99 0a 	call	0x1532	; 0x1532 <__fixsfsi>
     4ce:	20 91 22 02 	lds	r18, 0x0222
     4d2:	33 27       	eor	r19, r19
     4d4:	27 fd       	sbrc	r18, 7
     4d6:	30 95       	com	r19
     4d8:	26 0f       	add	r18, r22
     4da:	37 1f       	adc	r19, r23
	
	
	return pos;
     4dc:	be 01       	movw	r22, r28
     4de:	c9 01       	movw	r24, r18
     4e0:	84 56       	subi	r24, 0x64	; 100
     4e2:	91 09       	sbc	r25, r1
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <JOY_getDirection>:


JOY_direction_t JOY_getDirection(void) {
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
	
	JOY_position_t pos = JOY_getPosition();
     4f2:	c1 df       	rcall	.-126    	; 0x476 <JOY_getPosition>
     4f4:	8b 01       	movw	r16, r22
     4f6:	9c 01       	movw	r18, r24
     4f8:	fb 01       	movw	r30, r22
     4fa:	e9 01       	movw	r28, r18
	
	//creating a fraction to determine if the joystick is mostly x or y oriented
	double frac = pos.X/pos.Y;
     4fc:	cb 01       	movw	r24, r22
     4fe:	b9 01       	movw	r22, r18
     500:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__divmodhi4>
     504:	cb 01       	movw	r24, r22
	
	
	//creating an area near neutral position where small changes does not make a change in direction
	if (abs(pos.X) <= 25 && abs(pos.Y) <= 25) {
     506:	a8 01       	movw	r20, r16
     508:	47 5e       	subi	r20, 0xE7	; 231
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
     50c:	43 33       	cpi	r20, 0x33	; 51
     50e:	51 05       	cpc	r21, r1
     510:	28 f4       	brcc	.+10     	; 0x51c <__stack+0x1d>
     512:	27 5e       	subi	r18, 0xE7	; 231
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	23 33       	cpi	r18, 0x33	; 51
     518:	31 05       	cpc	r19, r1
     51a:	20 f1       	brcs	.+72     	; 0x564 <__stack+0x65>
		return neutral;
	}
	
	if (pos.X > 0 && abs(frac) > 1) {
     51c:	1e 16       	cp	r1, r30
     51e:	1f 06       	cpc	r1, r31
     520:	54 f4       	brge	.+20     	; 0x536 <__stack+0x37>
     522:	9b 01       	movw	r18, r22
     524:	99 23       	and	r25, r25
     526:	24 f4       	brge	.+8      	; 0x530 <__stack+0x31>
     528:	22 27       	eor	r18, r18
     52a:	33 27       	eor	r19, r19
     52c:	26 1b       	sub	r18, r22
     52e:	37 0b       	sbc	r19, r23
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	cc f4       	brge	.+50     	; 0x568 <__stack+0x69>
		return right;
	}
	else if (pos.X < 0 && abs(frac) > 1) {
     536:	ff 23       	and	r31, r31
     538:	54 f4       	brge	.+20     	; 0x54e <__stack+0x4f>
     53a:	9b 01       	movw	r18, r22
     53c:	99 23       	and	r25, r25
     53e:	24 f4       	brge	.+8      	; 0x548 <__stack+0x49>
     540:	22 27       	eor	r18, r18
     542:	33 27       	eor	r19, r19
     544:	26 1b       	sub	r18, r22
     546:	37 0b       	sbc	r19, r23
     548:	22 30       	cpi	r18, 0x02	; 2
     54a:	31 05       	cpc	r19, r1
     54c:	7c f4       	brge	.+30     	; 0x56c <__stack+0x6d>
		return left;
	}
	else if (pos.Y > 0 && abs(frac) < 1) {
     54e:	1c 16       	cp	r1, r28
     550:	1d 06       	cpc	r1, r29
     552:	1c f4       	brge	.+6      	; 0x55a <__stack+0x5b>
     554:	89 2b       	or	r24, r25
     556:	29 f4       	brne	.+10     	; 0x562 <__stack+0x63>
     558:	0b c0       	rjmp	.+22     	; 0x570 <__stack+0x71>
		return up;
	}
	else if (pos.Y < 0 && abs(frac) < 1) {
     55a:	dd 23       	and	r29, r29
     55c:	14 f4       	brge	.+4      	; 0x562 <__stack+0x63>
     55e:	89 2b       	or	r24, r25
     560:	49 f0       	breq	.+18     	; 0x574 <__stack+0x75>
     562:	09 c0       	rjmp	.+18     	; 0x576 <__stack+0x77>
	double frac = pos.X/pos.Y;
	
	
	//creating an area near neutral position where small changes does not make a change in direction
	if (abs(pos.X) <= 25 && abs(pos.Y) <= 25) {
		return neutral;
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	07 c0       	rjmp	.+14     	; 0x576 <__stack+0x77>
	}
	
	if (pos.X > 0 && abs(frac) > 1) {
		return right;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	05 c0       	rjmp	.+10     	; 0x576 <__stack+0x77>
	}
	else if (pos.X < 0 && abs(frac) > 1) {
		return left;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	03 c0       	rjmp	.+6      	; 0x576 <__stack+0x77>
	}
	else if (pos.Y > 0 && abs(frac) < 1) {
		return up;
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	01 c0       	rjmp	.+2      	; 0x576 <__stack+0x77>
	}
	else if (pos.Y < 0 && abs(frac) < 1) {
		return down;
     574:	83 e0       	ldi	r24, 0x03	; 3
	}

}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <MCP2515_read>:
	
	SPI_disable_chipselect();
	
	return val;
	
}
     580:	cf 93       	push	r28
     582:	c8 2f       	mov	r28, r24
     584:	c9 d6       	rcall	.+3474   	; 0x1318 <SPI_enable_chipselect>
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	bd d6       	rcall	.+3450   	; 0x1304 <SPI_send>
     58a:	8c 2f       	mov	r24, r28
     58c:	bb d6       	rcall	.+3446   	; 0x1304 <SPI_send>
     58e:	be d6       	rcall	.+3452   	; 0x130c <SPI_read>
     590:	c8 2f       	mov	r28, r24
     592:	c4 d6       	rcall	.+3464   	; 0x131c <SPI_disable_chipselect>
     594:	8c 2f       	mov	r24, r28
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <MCP2515_write>:
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	c8 2f       	mov	r28, r24
     5a0:	d6 2f       	mov	r29, r22
     5a2:	ba d6       	rcall	.+3444   	; 0x1318 <SPI_enable_chipselect>
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	ae d6       	rcall	.+3420   	; 0x1304 <SPI_send>
     5a8:	8d 2f       	mov	r24, r29
     5aa:	ac d6       	rcall	.+3416   	; 0x1304 <SPI_send>
     5ac:	8c 2f       	mov	r24, r28
     5ae:	aa d6       	rcall	.+3412   	; 0x1304 <SPI_send>
     5b0:	b5 d6       	rcall	.+3434   	; 0x131c <SPI_disable_chipselect>
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <MCP2515_request_to_send>:
     5b8:	cf 93       	push	r28
     5ba:	c8 2f       	mov	r28, r24
     5bc:	ad d6       	rcall	.+3418   	; 0x1318 <SPI_enable_chipselect>
     5be:	c1 30       	cpi	r28, 0x01	; 1
     5c0:	39 f0       	breq	.+14     	; 0x5d0 <MCP2515_request_to_send+0x18>
     5c2:	18 f0       	brcs	.+6      	; 0x5ca <MCP2515_request_to_send+0x12>
     5c4:	c2 30       	cpi	r28, 0x02	; 2
     5c6:	39 f0       	breq	.+14     	; 0x5d6 <MCP2515_request_to_send+0x1e>
     5c8:	09 c0       	rjmp	.+18     	; 0x5dc <MCP2515_request_to_send+0x24>
     5ca:	81 e8       	ldi	r24, 0x81	; 129
     5cc:	9b d6       	rcall	.+3382   	; 0x1304 <SPI_send>
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <MCP2515_request_to_send+0x28>
     5d0:	82 e8       	ldi	r24, 0x82	; 130
     5d2:	98 d6       	rcall	.+3376   	; 0x1304 <SPI_send>
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <MCP2515_request_to_send+0x28>
     5d6:	84 e8       	ldi	r24, 0x84	; 132
     5d8:	95 d6       	rcall	.+3370   	; 0x1304 <SPI_send>
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <MCP2515_request_to_send+0x28>
     5dc:	87 e8       	ldi	r24, 0x87	; 135
     5de:	92 d6       	rcall	.+3364   	; 0x1304 <SPI_send>
     5e0:	9d d6       	rcall	.+3386   	; 0x131c <SPI_disable_chipselect>
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t addr, uint8_t maskbyte, uint8_t databyte){
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	18 2f       	mov	r17, r24
     5ee:	d6 2f       	mov	r29, r22
     5f0:	c4 2f       	mov	r28, r20
	
	SPI_enable_chipselect();
     5f2:	92 d6       	rcall	.+3364   	; 0x1318 <SPI_enable_chipselect>
	
	SPI_send(MCP_BITMOD);
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	86 d6       	rcall	.+3340   	; 0x1304 <SPI_send>
	SPI_send(addr);
     5f8:	81 2f       	mov	r24, r17
     5fa:	84 d6       	rcall	.+3336   	; 0x1304 <SPI_send>
	SPI_send(maskbyte);
     5fc:	8d 2f       	mov	r24, r29
     5fe:	82 d6       	rcall	.+3332   	; 0x1304 <SPI_send>
	SPI_send(databyte);
     600:	8c 2f       	mov	r24, r28
     602:	80 d6       	rcall	.+3328   	; 0x1304 <SPI_send>
	
	SPI_disable_chipselect();
     604:	8b d6       	rcall	.+3350   	; 0x131c <SPI_disable_chipselect>
	
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	08 95       	ret

0000060e <MCP2515_reset>:


void MCP2515_reset(){
	
	//Pulling CS to low
	SPI_enable_chipselect();
     60e:	84 d6       	rcall	.+3336   	; 0x1318 <SPI_enable_chipselect>
			
	SPI_send(MCP_RESET);
     610:	80 ec       	ldi	r24, 0xC0	; 192
     612:	78 d6       	rcall	.+3312   	; 0x1304 <SPI_send>
	
	//Pulling CS to high
	SPI_disable_chipselect();		
     614:	83 c6       	rjmp	.+3334   	; 0x131c <SPI_disable_chipselect>
     616:	08 95       	ret

00000618 <MCP2515_init>:
#include <stdint.h>
#include <util/delay.h>

void MCP2515_init() {
	
	SPI_init();
     618:	6b d6       	rcall	.+3286   	; 0x12f0 <SPI_init>
	
	MCP2515_reset();
     61a:	f9 df       	rcall	.-14     	; 0x60e <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61c:	8c ec       	ldi	r24, 0xCC	; 204
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <MCP2515_init+0x8>
     624:	00 c0       	rjmp	.+0      	; 0x626 <MCP2515_init+0xe>
     626:	00 00       	nop
	_delay_ms(1);
	
	//Test configuration mode after reset
	uint8_t val;
	val = MCP2515_read(MCP_CANSTAT);
     628:	8e e0       	ldi	r24, 0x0E	; 14
     62a:	aa df       	rcall	.-172    	; 0x580 <MCP2515_read>
	if((val & MODE_MASK) != MODE_CONFIG) {
     62c:	80 7e       	andi	r24, 0xE0	; 224
     62e:	80 38       	cpi	r24, 0x80	; 128
     630:	21 f0       	breq	.+8      	; 0x63a <MCP2515_init+0x22>
		printf("MCP2515 in NOT in configuration mode after reset!\n");
     632:	8b e0       	ldi	r24, 0x0B	; 11
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <puts>
     63a:	08 95       	ret

0000063c <MENU_scream_mode>:

void MENU_clear_highscores(void){
	
	EEPROM_write(HIGHSCORE_1_ADDRESS,0);
	EEPROM_write(HIGHSCORE_2_ADDRESS,0);
	EEPROM_write(HIGHSCORE_3_ADDRESS,0);
     63c:	bb 9a       	sbi	0x17, 3	; 23
     63e:	c3 98       	cbi	0x18, 3	; 24
     640:	08 95       	ret

00000642 <MENU_normal_mode>:
     642:	bb 9a       	sbi	0x17, 3	; 23
     644:	c3 9a       	sbi	0x18, 3	; 24
     646:	08 95       	ret

00000648 <MENU_print_highscores>:
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	03 df       	rcall	.-506    	; 0x458 <EEPROM_read>
     652:	80 93 25 02 	sts	0x0225, r24
     656:	8e e1       	ldi	r24, 0x1E	; 30
     658:	ff de       	rcall	.-514    	; 0x458 <EEPROM_read>
     65a:	80 93 26 02 	sts	0x0226, r24
     65e:	82 e3       	ldi	r24, 0x32	; 50
     660:	fb de       	rcall	.-522    	; 0x458 <EEPROM_read>
     662:	80 93 27 02 	sts	0x0227, r24
     666:	e7 d4       	rcall	.+2510   	; 0x1036 <OLED_clear_display>
     668:	8d e3       	ldi	r24, 0x3D	; 61
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	86 d5       	rcall	.+2828   	; 0x117a <OLED_print_header>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	d7 d4       	rcall	.+2478   	; 0x1020 <OLED_goto_line>
     672:	c5 e2       	ldi	r28, 0x25	; 37
     674:	d2 e0       	ldi	r29, 0x02	; 2
     676:	11 e0       	ldi	r17, 0x01	; 1
     678:	89 91       	ld	r24, Y+
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	bb d5       	rcall	.+2934   	; 0x11f4 <OLED_int_to_string>
     67e:	48 d5       	rcall	.+2704   	; 0x1110 <OLED_print_string>
     680:	1f 5f       	subi	r17, 0xFF	; 255
     682:	81 2f       	mov	r24, r17
     684:	cd d4       	rcall	.+2458   	; 0x1020 <OLED_goto_line>
     686:	14 30       	cpi	r17, 0x04	; 4
     688:	b9 f7       	brne	.-18     	; 0x678 <MENU_print_highscores+0x30>
     68a:	2f df       	rcall	.-418    	; 0x4ea <JOY_getDirection>
     68c:	81 11       	cpse	r24, r1
     68e:	fd cf       	rjmp	.-6      	; 0x68a <MENU_print_highscores+0x42>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	08 95       	ret

00000698 <MENU_add_submenu>:
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	7c 01       	movw	r14, r24
     6aa:	8b 01       	movw	r16, r22
     6ac:	ea 01       	movw	r28, r20
     6ae:	cc 80       	ldd	r12, Y+4	; 0x04
     6b0:	d1 2c       	mov	r13, r1
     6b2:	cc 0c       	add	r12, r12
     6b4:	dd 1c       	adc	r13, r13
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	c8 0e       	add	r12, r24
     6bc:	d9 1e       	adc	r13, r25
     6be:	84 e2       	ldi	r24, 0x24	; 36
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 a5 0c 	call	0x194a	; 0x194a <malloc>
     6c6:	f6 01       	movw	r30, r12
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
     6cc:	ec 81       	ldd	r30, Y+4	; 0x04
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	e8 0f       	add	r30, r24
     6da:	f9 1f       	adc	r31, r25
     6dc:	01 90       	ld	r0, Z+
     6de:	f0 81       	ld	r31, Z
     6e0:	e0 2d       	mov	r30, r0
     6e2:	f1 82       	std	Z+1, r15	; 0x01
     6e4:	e0 82       	st	Z, r14
     6e6:	ec 81       	ldd	r30, Y+4	; 0x04
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	8d 81       	ldd	r24, Y+5	; 0x05
     6f0:	9e 81       	ldd	r25, Y+6	; 0x06
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	01 90       	ld	r0, Z+
     6f8:	f0 81       	ld	r31, Z
     6fa:	e0 2d       	mov	r30, r0
     6fc:	14 82       	std	Z+4, r1	; 0x04
     6fe:	ec 81       	ldd	r30, Y+4	; 0x04
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	9e 81       	ldd	r25, Y+6	; 0x06
     70a:	e8 0f       	add	r30, r24
     70c:	f9 1f       	adc	r31, r25
     70e:	01 90       	ld	r0, Z+
     710:	f0 81       	ld	r31, Z
     712:	e0 2d       	mov	r30, r0
     714:	13 83       	std	Z+3, r17	; 0x03
     716:	02 83       	std	Z+2, r16	; 0x02
     718:	ec 81       	ldd	r30, Y+4	; 0x04
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	8d 81       	ldd	r24, Y+5	; 0x05
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
     728:	01 90       	ld	r0, Z+
     72a:	f0 81       	ld	r31, Z
     72c:	e0 2d       	mov	r30, r0
     72e:	d0 87       	std	Z+8, r29	; 0x08
     730:	c7 83       	std	Z+7, r28	; 0x07
     732:	ec 81       	ldd	r30, Y+4	; 0x04
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	00 81       	ld	r16, Z
     744:	11 81       	ldd	r17, Z+1	; 0x01
     746:	84 e2       	ldi	r24, 0x24	; 36
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 a5 0c 	call	0x194a	; 0x194a <malloc>
     74e:	f8 01       	movw	r30, r16
     750:	96 83       	std	Z+6, r25	; 0x06
     752:	85 83       	std	Z+5, r24	; 0x05
     754:	ec 81       	ldd	r30, Y+4	; 0x04
     756:	ef 5f       	subi	r30, 0xFF	; 255
     758:	ec 83       	std	Y+4, r30	; 0x04
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e1 50       	subi	r30, 0x01	; 1
     75e:	f0 48       	sbci	r31, 0x80	; 128
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	9e 81       	ldd	r25, Y+6	; 0x06
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <MENU_back>:
     782:	ef 92       	push	r14
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	29 97       	sbiw	r28, 0x09	; 9
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	09 83       	std	Y+1, r16	; 0x01
     79e:	1a 83       	std	Y+2, r17	; 0x02
     7a0:	2b 83       	std	Y+3, r18	; 0x03
     7a2:	3c 83       	std	Y+4, r19	; 0x04
     7a4:	4d 83       	std	Y+5, r20	; 0x05
     7a6:	5e 83       	std	Y+6, r21	; 0x06
     7a8:	6f 83       	std	Y+7, r22	; 0x07
     7aa:	78 87       	std	Y+8, r23	; 0x08
     7ac:	89 87       	std	Y+9, r24	; 0x09
     7ae:	e8 85       	ldd	r30, Y+8	; 0x08
     7b0:	f9 85       	ldd	r31, Y+9	; 0x09
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	59 f0       	breq	.+22     	; 0x7cc <MENU_back+0x4a>
     7b6:	e1 2c       	mov	r14, r1
     7b8:	00 81       	ld	r16, Z
     7ba:	11 81       	ldd	r17, Z+1	; 0x01
     7bc:	22 81       	ldd	r18, Z+2	; 0x02
     7be:	33 81       	ldd	r19, Z+3	; 0x03
     7c0:	44 81       	ldd	r20, Z+4	; 0x04
     7c2:	55 81       	ldd	r21, Z+5	; 0x05
     7c4:	66 81       	ldd	r22, Z+6	; 0x06
     7c6:	77 81       	ldd	r23, Z+7	; 0x07
     7c8:	80 85       	ldd	r24, Z+8	; 0x08
     7ca:	0c d0       	rcall	.+24     	; 0x7e4 <MENU_display_menu>
     7cc:	29 96       	adiw	r28, 0x09	; 9
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ef 90       	pop	r14
     7e2:	08 95       	ret

000007e4 <MENU_display_menu>:
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	29 97       	sbiw	r28, 0x09	; 9
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	09 83       	std	Y+1, r16	; 0x01
     808:	1a 83       	std	Y+2, r17	; 0x02
     80a:	2b 83       	std	Y+3, r18	; 0x03
     80c:	3c 83       	std	Y+4, r19	; 0x04
     80e:	f4 2e       	mov	r15, r20
     810:	4d 83       	std	Y+5, r20	; 0x05
     812:	5e 83       	std	Y+6, r21	; 0x06
     814:	6f 83       	std	Y+7, r22	; 0x07
     816:	78 87       	std	Y+8, r23	; 0x08
     818:	89 87       	std	Y+9, r24	; 0x09
     81a:	0e 81       	ldd	r16, Y+6	; 0x06
     81c:	1f 81       	ldd	r17, Y+7	; 0x07
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	89 2b       	or	r24, r25
     824:	99 f0       	breq	.+38     	; 0x84c <MENU_display_menu+0x68>
     826:	e8 85       	ldd	r30, Y+8	; 0x08
     828:	f9 85       	ldd	r31, Y+9	; 0x09
     82a:	89 e0       	ldi	r24, 0x09	; 9
     82c:	a9 e2       	ldi	r26, 0x29	; 41
     82e:	b2 e0       	ldi	r27, 0x02	; 2
     830:	01 90       	ld	r0, Z+
     832:	0d 92       	st	X+, r0
     834:	8a 95       	dec	r24
     836:	e1 f7       	brne	.-8      	; 0x830 <MENU_display_menu+0x4c>
     838:	09 81       	ldd	r16, Y+1	; 0x01
     83a:	1a 81       	ldd	r17, Y+2	; 0x02
     83c:	2b 81       	ldd	r18, Y+3	; 0x03
     83e:	3c 81       	ldd	r19, Y+4	; 0x04
     840:	5e 81       	ldd	r21, Y+6	; 0x06
     842:	6f 81       	ldd	r22, Y+7	; 0x07
     844:	78 85       	ldd	r23, Y+8	; 0x08
     846:	89 85       	ldd	r24, Y+9	; 0x09
     848:	9c df       	rcall	.-200    	; 0x782 <MENU_back>
     84a:	26 c0       	rjmp	.+76     	; 0x898 <MENU_display_menu+0xb4>
     84c:	f4 d3       	rcall	.+2024   	; 0x1036 <OLED_clear_display>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	93 d4       	rcall	.+2342   	; 0x117a <OLED_print_header>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	e4 d3       	rcall	.+1992   	; 0x1020 <OLED_goto_line>
     858:	ff 20       	and	r15, r15
     85a:	f1 f0       	breq	.+60     	; 0x898 <MENU_display_menu+0xb4>
     85c:	ce 2c       	mov	r12, r14
     85e:	d1 2c       	mov	r13, r1
     860:	cc 0c       	add	r12, r12
     862:	dd 1c       	adc	r13, r13
     864:	c0 0e       	add	r12, r16
     866:	d1 1e       	adc	r13, r17
     868:	b1 2c       	mov	r11, r1
     86a:	be 10       	cpse	r11, r14
     86c:	07 c0       	rjmp	.+14     	; 0x87c <MENU_display_menu+0x98>
     86e:	d6 01       	movw	r26, r12
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	fd d4       	rcall	.+2554   	; 0x1274 <OLED_print_inverted_string>
     87a:	06 c0       	rjmp	.+12     	; 0x888 <MENU_display_menu+0xa4>
     87c:	d8 01       	movw	r26, r16
     87e:	ed 91       	ld	r30, X+
     880:	fc 91       	ld	r31, X
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	44 d4       	rcall	.+2184   	; 0x1110 <OLED_print_string>
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	8b 0d       	add	r24, r11
     88c:	c9 d3       	rcall	.+1938   	; 0x1020 <OLED_goto_line>
     88e:	b3 94       	inc	r11
     890:	0e 5f       	subi	r16, 0xFE	; 254
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	bf 10       	cpse	r11, r15
     896:	e9 cf       	rjmp	.-46     	; 0x86a <MENU_display_menu+0x86>
     898:	29 96       	adiw	r28, 0x09	; 9
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	08 95       	ret

000008b8 <MENU_choose>:
     8b8:	ef 92       	push	r14
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	29 97       	sbiw	r28, 0x09	; 9
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	09 83       	std	Y+1, r16	; 0x01
     8d4:	1a 83       	std	Y+2, r17	; 0x02
     8d6:	2b 83       	std	Y+3, r18	; 0x03
     8d8:	3c 83       	std	Y+4, r19	; 0x04
     8da:	4d 83       	std	Y+5, r20	; 0x05
     8dc:	5e 83       	std	Y+6, r21	; 0x06
     8de:	6f 83       	std	Y+7, r22	; 0x07
     8e0:	78 87       	std	Y+8, r23	; 0x08
     8e2:	89 87       	std	Y+9, r24	; 0x09
     8e4:	0b 81       	ldd	r16, Y+3	; 0x03
     8e6:	1c 81       	ldd	r17, Y+4	; 0x04
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	8f e7       	ldi	r24, 0x7F	; 127
     8ec:	97 e0       	ldi	r25, 0x07	; 7
     8ee:	21 50       	subi	r18, 0x01	; 1
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <MENU_choose+0x36>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <MENU_choose+0x40>
     8f8:	00 00       	nop
     8fa:	01 15       	cp	r16, r1
     8fc:	11 05       	cpc	r17, r1
     8fe:	91 f4       	brne	.+36     	; 0x924 <MENU_choose+0x6c>
     900:	ee 81       	ldd	r30, Y+6	; 0x06
     902:	ff 81       	ldd	r31, Y+7	; 0x07
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	89 2b       	or	r24, r25
     90a:	79 f0       	breq	.+30     	; 0x92a <MENU_choose+0x72>
     90c:	e1 2c       	mov	r14, r1
     90e:	09 81       	ldd	r16, Y+1	; 0x01
     910:	1a 81       	ldd	r17, Y+2	; 0x02
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	3c 81       	ldd	r19, Y+4	; 0x04
     916:	4d 81       	ldd	r20, Y+5	; 0x05
     918:	5e 81       	ldd	r21, Y+6	; 0x06
     91a:	6f 81       	ldd	r22, Y+7	; 0x07
     91c:	78 85       	ldd	r23, Y+8	; 0x08
     91e:	89 85       	ldd	r24, Y+9	; 0x09
     920:	61 df       	rcall	.-318    	; 0x7e4 <MENU_display_menu>
     922:	03 c0       	rjmp	.+6      	; 0x92a <MENU_choose+0x72>
     924:	88 d3       	rcall	.+1808   	; 0x1036 <OLED_clear_display>
     926:	f8 01       	movw	r30, r16
     928:	09 95       	icall
     92a:	29 96       	adiw	r28, 0x09	; 9
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ef 90       	pop	r14
     940:	08 95       	ret

00000942 <MENU_print_rocket>:
     942:	bf 92       	push	r11
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	8c e4       	ldi	r24, 0x4C	; 76
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	10 d4       	rcall	.+2080   	; 0x117a <OLED_print_header>
     95a:	87 e0       	ldi	r24, 0x07	; 7
     95c:	61 d3       	rcall	.+1730   	; 0x1020 <OLED_goto_line>
     95e:	86 e5       	ldi	r24, 0x56	; 86
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	d6 d3       	rcall	.+1964   	; 0x1110 <OLED_print_string>
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	5c d3       	rcall	.+1720   	; 0x1020 <OLED_goto_line>
     968:	82 e3       	ldi	r24, 0x32	; 50
     96a:	7e d3       	rcall	.+1788   	; 0x1068 <OLED_goto_column>
     96c:	8d e2       	ldi	r24, 0x2D	; 45
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f2 e1       	ldi	r31, 0x12	; 18
     972:	90 ec       	ldi	r25, 0xC0	; 192
     974:	90 83       	st	Z, r25
     976:	81 50       	subi	r24, 0x01	; 1
     978:	e9 f7       	brne	.-6      	; 0x974 <MENU_print_rocket+0x32>
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	51 d3       	rcall	.+1698   	; 0x1020 <OLED_goto_line>
     97e:	82 e3       	ldi	r24, 0x32	; 50
     980:	73 d3       	rcall	.+1766   	; 0x1068 <OLED_goto_column>
     982:	8d e2       	ldi	r24, 0x2D	; 45
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f2 e1       	ldi	r31, 0x12	; 18
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	90 83       	st	Z, r25
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	e9 f7       	brne	.-6      	; 0x98a <MENU_print_rocket+0x48>
     990:	13 e0       	ldi	r17, 0x03	; 3
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d2 e1       	ldi	r29, 0x12	; 18
     996:	0f ef       	ldi	r16, 0xFF	; 255
     998:	81 2f       	mov	r24, r17
     99a:	42 d3       	rcall	.+1668   	; 0x1020 <OLED_goto_line>
     99c:	82 e3       	ldi	r24, 0x32	; 50
     99e:	64 d3       	rcall	.+1736   	; 0x1068 <OLED_goto_column>
     9a0:	08 83       	st	Y, r16
     9a2:	08 83       	st	Y, r16
     9a4:	1f 5f       	subi	r17, 0xFF	; 255
     9a6:	16 30       	cpi	r17, 0x06	; 6
     9a8:	b9 f7       	brne	.-18     	; 0x998 <MENU_print_rocket+0x56>
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	39 d3       	rcall	.+1650   	; 0x1020 <OLED_goto_line>
     9ae:	8f e5       	ldi	r24, 0x5F	; 95
     9b0:	5b d3       	rcall	.+1718   	; 0x1068 <OLED_goto_column>
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d2 e1       	ldi	r29, 0x12	; 18
     9b6:	13 e0       	ldi	r17, 0x03	; 3
     9b8:	18 83       	st	Y, r17
     9ba:	06 e0       	ldi	r16, 0x06	; 6
     9bc:	08 83       	st	Y, r16
     9be:	0f 2e       	mov	r0, r31
     9c0:	fc e0       	ldi	r31, 0x0C	; 12
     9c2:	ff 2e       	mov	r15, r31
     9c4:	f0 2d       	mov	r31, r0
     9c6:	f8 82       	st	Y, r15
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f8 e1       	ldi	r31, 0x18	; 24
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	e8 82       	st	Y, r14
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f0 e3       	ldi	r31, 0x30	; 48
     9d6:	df 2e       	mov	r13, r31
     9d8:	f0 2d       	mov	r31, r0
     9da:	d8 82       	st	Y, r13
     9dc:	0f 2e       	mov	r0, r31
     9de:	f0 e6       	ldi	r31, 0x60	; 96
     9e0:	cf 2e       	mov	r12, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	c8 82       	st	Y, r12
     9e6:	0f 2e       	mov	r0, r31
     9e8:	f0 ec       	ldi	r31, 0xC0	; 192
     9ea:	bf 2e       	mov	r11, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	b8 82       	st	Y, r11
     9f0:	80 e8       	ldi	r24, 0x80	; 128
     9f2:	88 83       	st	Y, r24
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	14 d3       	rcall	.+1576   	; 0x1020 <OLED_goto_line>
     9f8:	86 e6       	ldi	r24, 0x66	; 102
     9fa:	36 d3       	rcall	.+1644   	; 0x1068 <OLED_goto_column>
     9fc:	81 e8       	ldi	r24, 0x81	; 129
     9fe:	88 83       	st	Y, r24
     a00:	83 ec       	ldi	r24, 0xC3	; 195
     a02:	88 83       	st	Y, r24
     a04:	86 e6       	ldi	r24, 0x66	; 102
     a06:	88 83       	st	Y, r24
     a08:	8c e3       	ldi	r24, 0x3C	; 60
     a0a:	88 83       	st	Y, r24
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	08 d3       	rcall	.+1552   	; 0x1020 <OLED_goto_line>
     a10:	8f e5       	ldi	r24, 0x5F	; 95
     a12:	2a d3       	rcall	.+1620   	; 0x1068 <OLED_goto_column>
     a14:	b8 82       	st	Y, r11
     a16:	c8 82       	st	Y, r12
     a18:	d8 82       	st	Y, r13
     a1a:	e8 82       	st	Y, r14
     a1c:	f8 82       	st	Y, r15
     a1e:	08 83       	st	Y, r16
     a20:	18 83       	st	Y, r17
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	88 83       	st	Y, r24
     a26:	61 dd       	rcall	.-1342   	; 0x4ea <JOY_getDirection>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	31 f1       	breq	.+76     	; 0xa78 <MENU_print_rocket+0x136>
     a2c:	0f 2e       	mov	r0, r31
     a2e:	f3 e0       	ldi	r31, 0x03	; 3
     a30:	df 2e       	mov	r13, r31
     a32:	f0 2d       	mov	r31, r0
     a34:	0f ef       	ldi	r16, 0xFF	; 255
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	1d c0       	rjmp	.+58     	; 0xa74 <MENU_print_rocket+0x132>
     a3a:	8e 2d       	mov	r24, r14
     a3c:	f1 d2       	rcall	.+1506   	; 0x1020 <OLED_goto_line>
     a3e:	0f 2e       	mov	r0, r31
     a40:	f2 e3       	ldi	r31, 0x32	; 50
     a42:	ff 2e       	mov	r15, r31
     a44:	f0 2d       	mov	r31, r0
     a46:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <rand>
     a4a:	b8 01       	movw	r22, r16
     a4c:	57 d7       	rcall	.+3758   	; 0x18fc <__divmodhi4>
     a4e:	88 83       	st	Y, r24
     a50:	fa 94       	dec	r15
     a52:	c9 f7       	brne	.-14     	; 0xa46 <MENU_print_rocket+0x104>
     a54:	e3 94       	inc	r14
     a56:	26 e0       	ldi	r18, 0x06	; 6
     a58:	e2 12       	cpse	r14, r18
     a5a:	ef cf       	rjmp	.-34     	; 0xa3a <MENU_print_rocket+0xf8>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	9f e7       	ldi	r25, 0x7F	; 127
     a60:	27 e0       	ldi	r18, 0x07	; 7
     a62:	81 50       	subi	r24, 0x01	; 1
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	20 40       	sbci	r18, 0x00	; 0
     a68:	e1 f7       	brne	.-8      	; 0xa62 <MENU_print_rocket+0x120>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <MENU_print_rocket+0x12a>
     a6c:	00 00       	nop
     a6e:	3d dd       	rcall	.-1414   	; 0x4ea <JOY_getDirection>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	11 f0       	breq	.+4      	; 0xa78 <MENU_print_rocket+0x136>
     a74:	ed 2c       	mov	r14, r13
     a76:	e1 cf       	rjmp	.-62     	; 0xa3a <MENU_print_rocket+0xf8>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	08 95       	ret

00000a8c <MENU_update_highscores>:
	while(JOY_getDirection()!=left){ 
	}
}

//Returning rank and writing to EEPROM if highscore reaches top 3.
uint8_t MENU_update_highscores(uint8_t time) { 
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	c8 2f       	mov	r28, r24
	
	uint8_t highscore_1 = EEPROM_read(HIGHSCORE_1_ADDRESS);
     a94:	8a e0       	ldi	r24, 0x0A	; 10
     a96:	e0 dc       	rcall	.-1600   	; 0x458 <EEPROM_read>
     a98:	d8 2f       	mov	r29, r24
	uint8_t highscore_2 = EEPROM_read(HIGHSCORE_2_ADDRESS);
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	dd dc       	rcall	.-1606   	; 0x458 <EEPROM_read>
     a9e:	18 2f       	mov	r17, r24
	uint8_t highscore_3 = EEPROM_read(HIGHSCORE_3_ADDRESS);
     aa0:	82 e3       	ldi	r24, 0x32	; 50
     aa2:	da dc       	rcall	.-1612   	; 0x458 <EEPROM_read>
		
		if (time > highscore_1){
     aa4:	dc 17       	cp	r29, r28
     aa6:	28 f4       	brcc	.+10     	; 0xab2 <MENU_update_highscores+0x26>
			EEPROM_write(HIGHSCORE_1_ADDRESS,time);
     aa8:	6c 2f       	mov	r22, r28
     aaa:	8a e0       	ldi	r24, 0x0A	; 10
     aac:	cc dc       	rcall	.-1640   	; 0x446 <EEPROM_write>
			return 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <MENU_update_highscores+0x44>
		}
		else if(time > highscore_2){
     ab2:	1c 17       	cp	r17, r28
     ab4:	28 f4       	brcc	.+10     	; 0xac0 <MENU_update_highscores+0x34>
			EEPROM_write(HIGHSCORE_2_ADDRESS,time);
     ab6:	6c 2f       	mov	r22, r28
     ab8:	8e e1       	ldi	r24, 0x1E	; 30
     aba:	c5 dc       	rcall	.-1654   	; 0x446 <EEPROM_write>
			return 2;
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <MENU_update_highscores+0x44>
		}
		else if(time > highscore_3){
     ac0:	8c 17       	cp	r24, r28
     ac2:	28 f4       	brcc	.+10     	; 0xace <MENU_update_highscores+0x42>
			EEPROM_write(HIGHSCORE_3_ADDRESS,time);
     ac4:	6c 2f       	mov	r22, r28
     ac6:	82 e3       	ldi	r24, 0x32	; 50
     ac8:	be dc       	rcall	.-1668   	; 0x446 <EEPROM_write>
			return 3;
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <MENU_update_highscores+0x44>
		}
		return 0;
     ace:	80 e0       	ldi	r24, 0x00	; 0
		
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	08 95       	ret

00000ad8 <MENU_gameover>:
	EEPROM_write(HIGHSCORE_3_ADDRESS,0);
	
}


void MENU_gameover(void){
     ad8:	ef 92       	push	r14
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
	
	//Stops the highscore timer
	TIMER_stop();
     ae2:	58 d4       	rcall	.+2224   	; 0x1394 <TIMER_stop>
	
	uint8_t rank = MENU_update_highscores(TIMER_get_time());
     ae4:	5b d4       	rcall	.+2230   	; 0x139c <TIMER_get_time>
     ae6:	d2 df       	rcall	.-92     	; 0xa8c <MENU_update_highscores>
     ae8:	18 2f       	mov	r17, r24
	uint8_t time = TIMER_get_time();
     aea:	58 d4       	rcall	.+2224   	; 0x139c <TIMER_get_time>
     aec:	ec 01       	movw	r28, r24
	OLED_clear_display();
     aee:	a3 d2       	rcall	.+1350   	; 0x1036 <OLED_clear_display>
	OLED_print_string("GAME OVER");
     af0:	85 e6       	ldi	r24, 0x65	; 101
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0d d3       	rcall	.+1562   	; 0x1110 <OLED_print_string>
	OLED_goto_line(3);
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	93 d2       	rcall	.+1318   	; 0x1020 <OLED_goto_line>
	OLED_print_string("Your score:");
     afa:	8f e6       	ldi	r24, 0x6F	; 111
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	08 d3       	rcall	.+1552   	; 0x1110 <OLED_print_string>
	OLED_goto_line(4);
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	8e d2       	rcall	.+1308   	; 0x1020 <OLED_goto_line>
	OLED_print_string(OLED_int_to_string(time));
     b04:	ce 01       	movw	r24, r28
     b06:	99 27       	eor	r25, r25
     b08:	75 d3       	rcall	.+1770   	; 0x11f4 <OLED_int_to_string>
     b0a:	02 d3       	rcall	.+1540   	; 0x1110 <OLED_print_string>
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	9a e4       	ldi	r25, 0x4A	; 74
     b12:	21 50       	subi	r18, 0x01	; 1
     b14:	80 40       	sbci	r24, 0x00	; 0
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	e1 f7       	brne	.-8      	; 0xb12 <MENU_gameover+0x3a>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <MENU_gameover+0x44>
     b1c:	00 00       	nop
	_delay_ms(5000);
	
	
	if (rank) {
     b1e:	11 23       	and	r17, r17
     b20:	09 f4       	brne	.+2      	; 0xb24 <MENU_gameover+0x4c>
     b22:	36 c0       	rjmp	.+108    	; 0xb90 <MENU_gameover+0xb8>
		OLED_clear_display();
     b24:	88 d2       	rcall	.+1296   	; 0x1036 <OLED_clear_display>
		
		OLED_print_string("Congratulations!");
     b26:	8b e7       	ldi	r24, 0x7B	; 123
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	f2 d2       	rcall	.+1508   	; 0x1110 <OLED_print_string>
		
		OLED_goto_line(2);
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	78 d2       	rcall	.+1264   	; 0x1020 <OLED_goto_line>
		OLED_print_string("Your score reached");
     b30:	8c e8       	ldi	r24, 0x8C	; 140
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	ed d2       	rcall	.+1498   	; 0x1110 <OLED_print_string>
		
		OLED_goto_line(3);
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	73 d2       	rcall	.+1254   	; 0x1020 <OLED_goto_line>
		OLED_print_string("the highscore list.");
     b3a:	8f e9       	ldi	r24, 0x9F	; 159
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	e8 d2       	rcall	.+1488   	; 0x1110 <OLED_print_string>
		
		OLED_goto_line(4);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	6e d2       	rcall	.+1244   	; 0x1020 <OLED_goto_line>
		OLED_print_string("Current rank:");
     b44:	83 eb       	ldi	r24, 0xB3	; 179
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	e3 d2       	rcall	.+1478   	; 0x1110 <OLED_print_string>
		
		OLED_goto_line(5);
     b4a:	85 e0       	ldi	r24, 0x05	; 5
     b4c:	69 d2       	rcall	.+1234   	; 0x1020 <OLED_goto_line>
		OLED_print_string(OLED_int_to_string(rank));
     b4e:	81 2f       	mov	r24, r17
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	50 d3       	rcall	.+1696   	; 0x11f4 <OLED_int_to_string>
     b54:	dd d2       	rcall	.+1466   	; 0x1110 <OLED_print_string>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	98 e6       	ldi	r25, 0x68	; 104
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <MENU_gameover+0x84>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <MENU_gameover+0x8e>
     b66:	00 00       	nop
		
		_delay_ms(7000);
		MENU_display_menu(main_menu,0);
     b68:	e1 2c       	mov	r14, r1
     b6a:	00 91 32 02 	lds	r16, 0x0232
     b6e:	10 91 33 02 	lds	r17, 0x0233
     b72:	20 91 34 02 	lds	r18, 0x0234
     b76:	30 91 35 02 	lds	r19, 0x0235
     b7a:	40 91 36 02 	lds	r20, 0x0236
     b7e:	50 91 37 02 	lds	r21, 0x0237
     b82:	60 91 38 02 	lds	r22, 0x0238
     b86:	70 91 39 02 	lds	r23, 0x0239
     b8a:	80 91 3a 02 	lds	r24, 0x023A
     b8e:	2a de       	rcall	.-940    	; 0x7e4 <MENU_display_menu>
	}
	gameover = FALSE;
     b90:	10 92 24 02 	sts	0x0224, r1
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <MENU_play_game>:
	}
	
}

//Playing the game with the P1000 multifunction board
void MENU_play_game(void){
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	66 97       	sbiw	r28, 0x16	; 22
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	can_message_t receive_msg;	
	
	
	//Initializing the message containing the control references
	can_message_t control_msg;
	control_msg = *(CAN_create_message(&control_msg,GAME_ID,7,0));
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	47 e0       	ldi	r20, 0x07	; 7
     bbc:	64 e6       	ldi	r22, 0x64	; 100
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	ce 01       	movw	r24, r28
     bc2:	0c 96       	adiw	r24, 0x0c	; 12
     bc4:	2e dc       	rcall	.-1956   	; 0x422 <CAN_create_message>
     bc6:	2b e0       	ldi	r18, 0x0B	; 11
     bc8:	fc 01       	movw	r30, r24
     bca:	de 01       	movw	r26, r28
     bcc:	1c 96       	adiw	r26, 0x0c	; 12
     bce:	01 90       	ld	r0, Z+
     bd0:	0d 92       	st	X+, r0
     bd2:	2a 95       	dec	r18
     bd4:	e1 f7       	brne	.-8      	; 0xbce <MENU_play_game+0x2e>
	
	uint8_t gameover = FALSE;
	
	//Starting the higscore timer
	TIMER_start();
     bd6:	d4 d3       	rcall	.+1960   	; 0x1380 <TIMER_start>
		control_msg.data[1] = ADC_read(joyY);
		control_msg.data[2] = ADC_read(right_slider);
		control_msg.data[3] = PINB & RIGHT_BUTTON;
		control_msg.data[4] = PINB & LEFT_BUTTON;
		control_msg.data[5] = PINB & JOY_BUTTON;
		control_msg.data[7] = gameover ? 0:1;
     bd8:	11 e0       	ldi	r17, 0x01	; 1
	
	//Running until the IR is triggered
	while(!gameover){
		
		
		control_msg.data[0] = ADC_read(joyX);
     bda:	85 e0       	ldi	r24, 0x05	; 5
     bdc:	93 db       	rcall	.-2266   	; 0x304 <ADC_read>
     bde:	8f 87       	std	Y+15, r24	; 0x0f
		control_msg.data[1] = ADC_read(joyY);
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	90 db       	rcall	.-2272   	; 0x304 <ADC_read>
     be4:	88 8b       	std	Y+16, r24	; 0x10
		control_msg.data[2] = ADC_read(right_slider);
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	8d db       	rcall	.-2278   	; 0x304 <ADC_read>
     bea:	89 8b       	std	Y+17, r24	; 0x11
		control_msg.data[3] = PINB & RIGHT_BUTTON;
     bec:	86 b3       	in	r24, 0x16	; 22
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	8a 8b       	std	Y+18, r24	; 0x12
		control_msg.data[4] = PINB & LEFT_BUTTON;
     bf2:	86 b3       	in	r24, 0x16	; 22
     bf4:	82 70       	andi	r24, 0x02	; 2
     bf6:	8b 8b       	std	Y+19, r24	; 0x13
		control_msg.data[5] = PINB & JOY_BUTTON;
     bf8:	86 b3       	in	r24, 0x16	; 22
     bfa:	84 70       	andi	r24, 0x04	; 4
     bfc:	8c 8b       	std	Y+20, r24	; 0x14
		control_msg.data[7] = gameover ? 0:1;
     bfe:	1e 8b       	std	Y+22, r17	; 0x16
		
		CAN_send_message(&control_msg);
     c00:	ce 01       	movw	r24, r28
     c02:	0c 96       	adiw	r24, 0x0c	; 12
     c04:	a3 db       	rcall	.-2234   	; 0x34c <CAN_send_message>
	
		
		//Checking if IR is triggered
		CAN_recieve_data(&receive_msg);
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	d0 db       	rcall	.-2144   	; 0x3ac <CAN_recieve_data>
		
		if (receive_msg.id == GAMEOVER_DATA_ID) {
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	8a 35       	cpi	r24, 0x5A	; 90
     c12:	91 05       	cpc	r25, r1
     c14:	11 f7       	brne	.-60     	; 0xbda <MENU_play_game+0x3a>
	
			gameover = TRUE;
			MENU_gameover();
     c16:	60 df       	rcall	.-320    	; 0xad8 <MENU_gameover>
			receive_msg.id = 0;
		}
	
	}
	
}
     c18:	66 96       	adiw	r28, 0x16	; 22
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	08 95       	ret

00000c2c <MENU_wireless_mode>:
	PORTB |=(1<<PB3);
	
}

//Enabling the bluetooth device to send control data from the "Byggolini" app
void MENU_wireless_mode (void){
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	66 97       	sbiw	r28, 0x16	; 22
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
	TIMER_start();
     c40:	9f d3       	rcall	.+1854   	; 0x1380 <TIMER_start>
	can_message_t receive_msg;
	CAN_create_message(&receive_msg,GAME_ID,7,0);
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	47 e0       	ldi	r20, 0x07	; 7
     c48:	64 e6       	ldi	r22, 0x64	; 100
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	e8 db       	rcall	.-2096   	; 0x422 <CAN_create_message>
	
	
	while(!gameover){
     c52:	80 91 24 02 	lds	r24, 0x0224
     c56:	81 11       	cpse	r24, r1
     c58:	1b c0       	rjmp	.+54     	; 0xc90 <MENU_wireless_mode+0x64>
		
		can_message_t msg;
		CAN_create_message(&msg, WIRELESS_ID,1,1);
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	60 e5       	ldi	r22, 0x50	; 80
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	ce 01       	movw	r24, r28
     c66:	0c 96       	adiw	r24, 0x0c	; 12
     c68:	dc db       	rcall	.-2120   	; 0x422 <CAN_create_message>
		CAN_send_message(&msg);
     c6a:	ce 01       	movw	r24, r28
     c6c:	0c 96       	adiw	r24, 0x0c	; 12
     c6e:	6e db       	rcall	.-2340   	; 0x34c <CAN_send_message>
		
		//Checking if IR is triggered
		CAN_recieve_data(&receive_msg);
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	9b db       	rcall	.-2250   	; 0x3ac <CAN_recieve_data>
		
		if (receive_msg.id == GAMEOVER_DATA_ID) {
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	8a 35       	cpi	r24, 0x5A	; 90
     c7c:	91 05       	cpc	r25, r1
     c7e:	21 f4       	brne	.+8      	; 0xc88 <MENU_wireless_mode+0x5c>
			
			gameover = TRUE;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 24 02 	sts	0x0224, r24
			
			MENU_gameover();
     c86:	28 df       	rcall	.-432    	; 0xad8 <MENU_gameover>
	TIMER_start();
	can_message_t receive_msg;
	CAN_create_message(&receive_msg,GAME_ID,7,0);
	
	
	while(!gameover){
     c88:	80 91 24 02 	lds	r24, 0x0224
     c8c:	88 23       	and	r24, r24
     c8e:	29 f3       	breq	.-54     	; 0xc5a <MENU_wireless_mode+0x2e>
			MENU_gameover();
		}
		
	}
	
}
     c90:	66 96       	adiw	r28, 0x16	; 22
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <MENU_create>:

void MENU_create(){
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29

	//Initializing Main Menu
	main_menu.title = "Main Menu";
     ca6:	81 ec       	ldi	r24, 0xC1	; 193
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	90 93 33 02 	sts	0x0233, r25
     cae:	80 93 32 02 	sts	0x0232, r24
	main_menu.number_of_submenus = 0;
     cb2:	10 92 36 02 	sts	0x0236, r1
	main_menu.item = NULL_PTR;
     cb6:	10 92 35 02 	sts	0x0235, r1
     cba:	10 92 34 02 	sts	0x0234, r1
	main_menu.parent = NULL_PTR;
     cbe:	10 92 3a 02 	sts	0x023A, r1
     cc2:	10 92 39 02 	sts	0x0239, r1
	main_menu.submenus = malloc(sizeof(menu_t)*4);
     cc6:	84 e2       	ldi	r24, 0x24	; 36
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	3f d6       	rcall	.+3198   	; 0x194a <malloc>
     ccc:	90 93 38 02 	sts	0x0238, r25
     cd0:	80 93 37 02 	sts	0x0237, r24

	
	//Adding submenus and functions
	menu_t* playgame_f = MENU_add_submenu("Play game", &MENU_play_game, &main_menu);
     cd4:	42 e3       	ldi	r20, 0x32	; 50
     cd6:	52 e0       	ldi	r21, 0x02	; 2
     cd8:	60 ed       	ldi	r22, 0xD0	; 208
     cda:	75 e0       	ldi	r23, 0x05	; 5
     cdc:	8b ec       	ldi	r24, 0xCB	; 203
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	db dc       	rcall	.-1610   	; 0x698 <MENU_add_submenu>
	menu_t* highscores_m = MENU_add_submenu("Highscores", &MENU_print_highscores, &main_menu);
     ce2:	42 e3       	ldi	r20, 0x32	; 50
     ce4:	52 e0       	ldi	r21, 0x02	; 2
     ce6:	64 e2       	ldi	r22, 0x24	; 36
     ce8:	73 e0       	ldi	r23, 0x03	; 3
     cea:	85 ed       	ldi	r24, 0xD5	; 213
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	d4 dc       	rcall	.-1624   	; 0x698 <MENU_add_submenu>
	menu_t* settings_m = MENU_add_submenu("Settings", NULL_PTR, &main_menu);
     cf0:	42 e3       	ldi	r20, 0x32	; 50
     cf2:	52 e0       	ldi	r21, 0x02	; 2
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 ee       	ldi	r24, 0xE0	; 224
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	cd dc       	rcall	.-1638   	; 0x698 <MENU_add_submenu>
     cfe:	ec 01       	movw	r28, r24
	
	menu_t* scream_mode_f = MENU_add_submenu("Scream Mode", &MENU_scream_mode, settings_m);
     d00:	ac 01       	movw	r20, r24
     d02:	6e e1       	ldi	r22, 0x1E	; 30
     d04:	73 e0       	ldi	r23, 0x03	; 3
     d06:	89 ee       	ldi	r24, 0xE9	; 233
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	c6 dc       	rcall	.-1652   	; 0x698 <MENU_add_submenu>
	menu_t* normal_mode_f = MENU_add_submenu("Normal Mode", &MENU_normal_mode, settings_m);
     d0c:	ae 01       	movw	r20, r28
     d0e:	61 e2       	ldi	r22, 0x21	; 33
     d10:	73 e0       	ldi	r23, 0x03	; 3
     d12:	85 ef       	ldi	r24, 0xF5	; 245
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	c0 dc       	rcall	.-1664   	; 0x698 <MENU_add_submenu>
	menu_t* wireless_mode_f = MENU_add_submenu("Wireless Mode", &MENU_wireless_mode, settings_m);
     d18:	ae 01       	movw	r20, r28
     d1a:	66 e1       	ldi	r22, 0x16	; 22
     d1c:	76 e0       	ldi	r23, 0x06	; 6
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	ba dc       	rcall	.-1676   	; 0x698 <MENU_add_submenu>
	
	//Setting current menu to main menu
	current_menu = main_menu;
     d24:	89 e0       	ldi	r24, 0x09	; 9
     d26:	e2 e3       	ldi	r30, 0x32	; 50
     d28:	f2 e0       	ldi	r31, 0x02	; 2
     d2a:	a9 e2       	ldi	r26, 0x29	; 41
     d2c:	b2 e0       	ldi	r27, 0x02	; 2
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	8a 95       	dec	r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <MENU_create+0x8c>
	
	
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <MENU_run_menu>:


//Navigating in the menus
void MENU_run_menu(void){
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	29 97       	sbiw	r28, 0x09	; 9
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
	
	MENU_display_menu(main_menu,0);
     d50:	e1 2c       	mov	r14, r1
     d52:	00 91 32 02 	lds	r16, 0x0232
     d56:	10 91 33 02 	lds	r17, 0x0233
     d5a:	20 91 34 02 	lds	r18, 0x0234
     d5e:	30 91 35 02 	lds	r19, 0x0235
     d62:	40 91 36 02 	lds	r20, 0x0236
     d66:	50 91 37 02 	lds	r21, 0x0237
     d6a:	60 91 38 02 	lds	r22, 0x0238
     d6e:	70 91 39 02 	lds	r23, 0x0239
     d72:	80 91 3a 02 	lds	r24, 0x023A
     d76:	36 dd       	rcall	.-1428   	; 0x7e4 <MENU_display_menu>
	while(1) {
			
		JOY_position_t pos = JOY_getPosition();
		JOY_direction_t dir = JOY_getDirection();
		
		menu_t choice = *current_menu.submenus[current_line];		
     d78:	0f 2e       	mov	r0, r31
     d7a:	f9 e0       	ldi	r31, 0x09	; 9
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
					//Ensuring that the user returns the joystick to neutral position before making another choice
					if (current_line > 0 && last_direction == neutral) {
						current_line--;
						MENU_display_menu(current_menu, current_line);
					}
					last_direction = dir;
     d80:	68 94       	set
     d82:	44 24       	eor	r4, r4
     d84:	41 f8       	bld	r4, 1
					_delay_ms(100);
					break;
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
     d86:	0f 2e       	mov	r0, r31
     d88:	fd e2       	ldi	r31, 0x2D	; 45
     d8a:	cf 2e       	mov	r12, r31
     d8c:	f2 e0       	ldi	r31, 0x02	; 2
     d8e:	df 2e       	mov	r13, r31
     d90:	f0 2d       	mov	r31, r0
						current_line++;
						printf("current line = %d\n", current_line);
						
						MENU_display_menu(current_menu, current_line);
					}
					last_direction = dir;
     d92:	0f 2e       	mov	r0, r31
     d94:	f3 e0       	ldi	r31, 0x03	; 3
     d96:	5f 2e       	mov	r5, r31
     d98:	f0 2d       	mov	r31, r0
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
						current_line++;
						printf("current line = %d\n", current_line);
     d9a:	0f 2e       	mov	r0, r31
     d9c:	ff e0       	ldi	r31, 0x0F	; 15
     d9e:	8f 2e       	mov	r8, r31
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	9f 2e       	mov	r9, r31
     da4:	f0 2d       	mov	r31, r0
					
					_delay_ms(100);
					break;
					
				case neutral:
					last_direction = dir;
     da6:	68 94       	set
     da8:	66 24       	eor	r6, r6
     daa:	62 f8       	bld	r6, 2
				
				//Enabling going to the previous menu by moving the joystick left
				case left:	
					if(last_direction == neutral){
					MENU_back(current_menu);
						if (current_menu.parent != NULL_PTR) {
     dac:	0f 2e       	mov	r0, r31
     dae:	f0 e3       	ldi	r31, 0x30	; 48
     db0:	af 2e       	mov	r10, r31
     db2:	f2 e0       	ldi	r31, 0x02	; 2
     db4:	bf 2e       	mov	r11, r31
     db6:	f0 2d       	mov	r31, r0
						current_menu = choice;
						current_line = 0;
						MENU_display_menu(current_menu, current_line);
						
					}
					last_direction = dir;
     db8:	77 24       	eor	r7, r7
     dba:	73 94       	inc	r7
	
	MENU_display_menu(main_menu,0);
	
	while(1) {
			
		JOY_position_t pos = JOY_getPosition();
     dbc:	5c db       	rcall	.-2376   	; 0x476 <JOY_getPosition>
		JOY_direction_t dir = JOY_getDirection();
     dbe:	95 db       	rcall	.-2262   	; 0x4ea <JOY_getDirection>
		
		menu_t choice = *current_menu.submenus[current_line];		
     dc0:	40 91 28 02 	lds	r20, 0x0228
     dc4:	e4 2f       	mov	r30, r20
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	20 91 2e 02 	lds	r18, 0x022E
     dd0:	30 91 2f 02 	lds	r19, 0x022F
     dd4:	e2 0f       	add	r30, r18
     dd6:	f3 1f       	adc	r31, r19
     dd8:	01 90       	ld	r0, Z+
     dda:	f0 81       	ld	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	de 01       	movw	r26, r28
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	9f 2d       	mov	r25, r15
     de4:	01 90       	ld	r0, Z+
     de6:	0d 92       	st	X+, r0
     de8:	9a 95       	dec	r25
     dea:	e1 f7       	brne	.-8      	; 0xde4 <MENU_run_menu+0xa8>
		
			//Establishing the joystick commands
			switch (dir) {	
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	71 f0       	breq	.+28     	; 0xe0c <MENU_run_menu+0xd0>
     df0:	38 f4       	brcc	.+14     	; 0xe00 <MENU_run_menu+0xc4>
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <MENU_run_menu+0xbc>
     df6:	a7 c0       	rjmp	.+334    	; 0xf46 <MENU_run_menu+0x20a>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <MENU_run_menu+0xc2>
     dfc:	6b c0       	rjmp	.+214    	; 0xed4 <MENU_run_menu+0x198>
     dfe:	de cf       	rjmp	.-68     	; 0xdbc <MENU_run_menu+0x80>
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	71 f1       	breq	.+92     	; 0xe60 <MENU_run_menu+0x124>
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	09 f4       	brne	.+2      	; 0xe0a <MENU_run_menu+0xce>
     e08:	cf c0       	rjmp	.+414    	; 0xfa8 <MENU_run_menu+0x26c>
     e0a:	d8 cf       	rjmp	.-80     	; 0xdbc <MENU_run_menu+0x80>
					
					
				case up:
						
					//Ensuring that the user returns the joystick to neutral position before making another choice
					if (current_line > 0 && last_direction == neutral) {
     e0c:	44 23       	and	r20, r20
     e0e:	e1 f0       	breq	.+56     	; 0xe48 <MENU_run_menu+0x10c>
     e10:	80 91 0a 01 	lds	r24, 0x010A
     e14:	84 30       	cpi	r24, 0x04	; 4
     e16:	c1 f4       	brne	.+48     	; 0xe48 <MENU_run_menu+0x10c>
						current_line--;
     e18:	ee 24       	eor	r14, r14
     e1a:	ea 94       	dec	r14
     e1c:	e4 0e       	add	r14, r20
     e1e:	e0 92 28 02 	sts	0x0228, r14
						MENU_display_menu(current_menu, current_line);
     e22:	00 91 29 02 	lds	r16, 0x0229
     e26:	10 91 2a 02 	lds	r17, 0x022A
     e2a:	20 91 2b 02 	lds	r18, 0x022B
     e2e:	30 91 2c 02 	lds	r19, 0x022C
     e32:	40 91 2d 02 	lds	r20, 0x022D
     e36:	50 91 2e 02 	lds	r21, 0x022E
     e3a:	60 91 2f 02 	lds	r22, 0x022F
     e3e:	70 91 30 02 	lds	r23, 0x0230
     e42:	80 91 31 02 	lds	r24, 0x0231
     e46:	ce dc       	rcall	.-1636   	; 0x7e4 <MENU_display_menu>
					}
					last_direction = dir;
     e48:	40 92 0a 01 	sts	0x010A, r4
     e4c:	2f ef       	ldi	r18, 0xFF	; 255
     e4e:	8f e7       	ldi	r24, 0x7F	; 127
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	80 40       	sbci	r24, 0x00	; 0
     e56:	90 40       	sbci	r25, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <MENU_run_menu+0x116>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <MENU_run_menu+0x120>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <MENU_run_menu+0x122>
     e5e:	ae cf       	rjmp	.-164    	; 0xdbc <MENU_run_menu+0x80>
					_delay_ms(100);
					break;
				
				case down:
	
					if ((current_line < (current_menu.number_of_submenus-1)) && last_direction == neutral) {
     e60:	24 2f       	mov	r18, r20
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	d6 01       	movw	r26, r12
     e66:	8c 91       	ld	r24, X
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	2c f5       	brge	.+74     	; 0xebc <MENU_run_menu+0x180>
     e72:	80 91 0a 01 	lds	r24, 0x010A
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	09 f5       	brne	.+66     	; 0xebc <MENU_run_menu+0x180>
						current_line++;
     e7a:	4f 5f       	subi	r20, 0xFF	; 255
     e7c:	40 93 28 02 	sts	0x0228, r20
						printf("current line = %d\n", current_line);
     e80:	1f 92       	push	r1
     e82:	4f 93       	push	r20
     e84:	9f 92       	push	r9
     e86:	8f 92       	push	r8
     e88:	4b d7       	rcall	.+3734   	; 0x1d20 <printf>
						
						MENU_display_menu(current_menu, current_line);
     e8a:	e0 90 28 02 	lds	r14, 0x0228
     e8e:	00 91 29 02 	lds	r16, 0x0229
     e92:	10 91 2a 02 	lds	r17, 0x022A
     e96:	20 91 2b 02 	lds	r18, 0x022B
     e9a:	30 91 2c 02 	lds	r19, 0x022C
     e9e:	40 91 2d 02 	lds	r20, 0x022D
     ea2:	50 91 2e 02 	lds	r21, 0x022E
     ea6:	60 91 2f 02 	lds	r22, 0x022F
     eaa:	70 91 30 02 	lds	r23, 0x0230
     eae:	80 91 31 02 	lds	r24, 0x0231
     eb2:	98 dc       	rcall	.-1744   	; 0x7e4 <MENU_display_menu>
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
					}
					last_direction = dir;
     ebc:	50 92 0a 01 	sts	0x010A, r5
     ec0:	bf ef       	ldi	r27, 0xFF	; 255
     ec2:	ef e7       	ldi	r30, 0x7F	; 127
     ec4:	f1 e0       	ldi	r31, 0x01	; 1
     ec6:	b1 50       	subi	r27, 0x01	; 1
     ec8:	e0 40       	sbci	r30, 0x00	; 0
     eca:	f0 40       	sbci	r31, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <MENU_run_menu+0x18a>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <MENU_run_menu+0x194>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <MENU_run_menu+0x196>
     ed2:	74 cf       	rjmp	.-280    	; 0xdbc <MENU_run_menu+0x80>
					_delay_ms(100);
					break;
					
				//Enabling a choice to be made by moving the joystick right
				case right:
					if (last_direction == neutral) {
     ed4:	80 91 0a 01 	lds	r24, 0x010A
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	49 f5       	brne	.+82     	; 0xf2e <MENU_run_menu+0x1f2>
						MENU_choose(choice);
     edc:	09 81       	ldd	r16, Y+1	; 0x01
     ede:	1a 81       	ldd	r17, Y+2	; 0x02
     ee0:	2b 81       	ldd	r18, Y+3	; 0x03
     ee2:	3c 81       	ldd	r19, Y+4	; 0x04
     ee4:	4d 81       	ldd	r20, Y+5	; 0x05
     ee6:	5e 81       	ldd	r21, Y+6	; 0x06
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	e4 dc       	rcall	.-1592   	; 0x8b8 <MENU_choose>
						current_menu = choice;
     ef0:	fe 01       	movw	r30, r28
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	a9 e2       	ldi	r26, 0x29	; 41
     ef6:	b2 e0       	ldi	r27, 0x02	; 2
     ef8:	8f 2d       	mov	r24, r15
     efa:	01 90       	ld	r0, Z+
     efc:	0d 92       	st	X+, r0
     efe:	8a 95       	dec	r24
     f00:	e1 f7       	brne	.-8      	; 0xefa <MENU_run_menu+0x1be>
						current_line = 0;
     f02:	10 92 28 02 	sts	0x0228, r1
						MENU_display_menu(current_menu, current_line);
     f06:	e1 2c       	mov	r14, r1
     f08:	00 91 29 02 	lds	r16, 0x0229
     f0c:	10 91 2a 02 	lds	r17, 0x022A
     f10:	20 91 2b 02 	lds	r18, 0x022B
     f14:	30 91 2c 02 	lds	r19, 0x022C
     f18:	40 91 2d 02 	lds	r20, 0x022D
     f1c:	50 91 2e 02 	lds	r21, 0x022E
     f20:	60 91 2f 02 	lds	r22, 0x022F
     f24:	70 91 30 02 	lds	r23, 0x0230
     f28:	80 91 31 02 	lds	r24, 0x0231
     f2c:	5b dc       	rcall	.-1866   	; 0x7e4 <MENU_display_menu>
						
					}
					last_direction = dir;
     f2e:	70 92 0a 01 	sts	0x010A, r7
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	8f e7       	ldi	r24, 0x7F	; 127
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	21 50       	subi	r18, 0x01	; 1
     f3a:	80 40       	sbci	r24, 0x00	; 0
     f3c:	90 40       	sbci	r25, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <MENU_run_menu+0x1fc>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <MENU_run_menu+0x206>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <MENU_run_menu+0x208>
     f44:	3b cf       	rjmp	.-394    	; 0xdbc <MENU_run_menu+0x80>
					_delay_ms(100);
					break;
				
				//Enabling going to the previous menu by moving the joystick left
				case left:	
					if(last_direction == neutral){
     f46:	80 91 0a 01 	lds	r24, 0x010A
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	09 f5       	brne	.+66     	; 0xf90 <MENU_run_menu+0x254>
					MENU_back(current_menu);
     f4e:	00 91 29 02 	lds	r16, 0x0229
     f52:	10 91 2a 02 	lds	r17, 0x022A
     f56:	20 91 2b 02 	lds	r18, 0x022B
     f5a:	30 91 2c 02 	lds	r19, 0x022C
     f5e:	40 91 2d 02 	lds	r20, 0x022D
     f62:	50 91 2e 02 	lds	r21, 0x022E
     f66:	60 91 2f 02 	lds	r22, 0x022F
     f6a:	70 91 30 02 	lds	r23, 0x0230
     f6e:	80 91 31 02 	lds	r24, 0x0231
     f72:	07 dc       	rcall	.-2034   	; 0x782 <MENU_back>
						if (current_menu.parent != NULL_PTR) {
     f74:	d5 01       	movw	r26, r10
     f76:	ed 91       	ld	r30, X+
     f78:	fc 91       	ld	r31, X
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	39 f0       	breq	.+14     	; 0xf8c <MENU_run_menu+0x250>
							current_menu = *current_menu.parent;
     f7e:	a9 e2       	ldi	r26, 0x29	; 41
     f80:	b2 e0       	ldi	r27, 0x02	; 2
     f82:	8f 2d       	mov	r24, r15
     f84:	01 90       	ld	r0, Z+
     f86:	0d 92       	st	X+, r0
     f88:	8a 95       	dec	r24
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <MENU_run_menu+0x248>
						}
							
						current_line = 0;
     f8c:	10 92 28 02 	sts	0x0228, r1
					}
					
					last_direction = dir;
     f90:	10 92 0a 01 	sts	0x010A, r1
     f94:	bf ef       	ldi	r27, 0xFF	; 255
     f96:	ef e7       	ldi	r30, 0x7F	; 127
     f98:	f1 e0       	ldi	r31, 0x01	; 1
     f9a:	b1 50       	subi	r27, 0x01	; 1
     f9c:	e0 40       	sbci	r30, 0x00	; 0
     f9e:	f0 40       	sbci	r31, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <MENU_run_menu+0x25e>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <MENU_run_menu+0x268>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <MENU_run_menu+0x26a>
     fa6:	0a cf       	rjmp	.-492    	; 0xdbc <MENU_run_menu+0x80>
					
					_delay_ms(100);
					break;
					
				case neutral:
					last_direction = dir;
     fa8:	60 92 0a 01 	sts	0x010A, r6
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	8f e7       	ldi	r24, 0x7F	; 127
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	90 40       	sbci	r25, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <MENU_run_menu+0x276>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <MENU_run_menu+0x280>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <MENU_run_menu+0x282>
					_delay_ms(100);
					break;
						
			}
	
		}
     fbe:	fe ce       	rjmp	.-516    	; 0xdbc <MENU_run_menu+0x80>

00000fc0 <OLED_init>:
	}
}

uint8_t OLED_pos(uint8_t row){
	return current_line;
}
     fc0:	e0 e0       	ldi	r30, 0x00	; 0
     fc2:	f0 e1       	ldi	r31, 0x10	; 16
     fc4:	8e ea       	ldi	r24, 0xAE	; 174
     fc6:	80 83       	st	Z, r24
     fc8:	81 ea       	ldi	r24, 0xA1	; 161
     fca:	80 83       	st	Z, r24
     fcc:	8a ed       	ldi	r24, 0xDA	; 218
     fce:	80 83       	st	Z, r24
     fd0:	82 e1       	ldi	r24, 0x12	; 18
     fd2:	80 83       	st	Z, r24
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	80 83       	st	Z, r24
     fd8:	88 ea       	ldi	r24, 0xA8	; 168
     fda:	80 83       	st	Z, r24
     fdc:	8f e3       	ldi	r24, 0x3F	; 63
     fde:	80 83       	st	Z, r24
     fe0:	85 ed       	ldi	r24, 0xD5	; 213
     fe2:	80 83       	st	Z, r24
     fe4:	80 e8       	ldi	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24
     fe8:	81 e8       	ldi	r24, 0x81	; 129
     fea:	80 83       	st	Z, r24
     fec:	80 e5       	ldi	r24, 0x50	; 80
     fee:	80 83       	st	Z, r24
     ff0:	89 ed       	ldi	r24, 0xD9	; 217
     ff2:	80 83       	st	Z, r24
     ff4:	81 e2       	ldi	r24, 0x21	; 33
     ff6:	80 83       	st	Z, r24
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	80 83       	st	Z, r24
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	80 83       	st	Z, r24
    1000:	8b ed       	ldi	r24, 0xDB	; 219
    1002:	80 83       	st	Z, r24
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	80 83       	st	Z, r24
    1008:	8d ea       	ldi	r24, 0xAD	; 173
    100a:	80 83       	st	Z, r24
    100c:	10 82       	st	Z, r1
    100e:	84 ea       	ldi	r24, 0xA4	; 164
    1010:	80 83       	st	Z, r24
    1012:	86 ea       	ldi	r24, 0xA6	; 166
    1014:	80 83       	st	Z, r24
    1016:	8f ea       	ldi	r24, 0xAF	; 175
    1018:	80 83       	st	Z, r24
    101a:	b9 98       	cbi	0x17, 1	; 23
    101c:	ba 98       	cbi	0x17, 2	; 23
    101e:	08 95       	ret

00001020 <OLED_goto_line>:
    1020:	90 eb       	ldi	r25, 0xB0	; 176
    1022:	98 0f       	add	r25, r24
    1024:	e0 e0       	ldi	r30, 0x00	; 0
    1026:	f0 e1       	ldi	r31, 0x10	; 16
    1028:	90 83       	st	Z, r25
    102a:	90 e1       	ldi	r25, 0x10	; 16
    102c:	90 83       	st	Z, r25
    102e:	10 82       	st	Z, r1
    1030:	80 93 3b 02 	sts	0x023B, r24
    1034:	08 95       	ret

00001036 <OLED_clear_display>:
    1036:	80 eb       	ldi	r24, 0xB0	; 176
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e1       	ldi	r27, 0x10	; 16
    103c:	20 e1       	ldi	r18, 0x10	; 16
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	f2 e1       	ldi	r31, 0x12	; 18
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	98 0f       	add	r25, r24
    1046:	8c 93       	st	X, r24
    1048:	2c 93       	st	X, r18
    104a:	1c 92       	st	X, r1
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	10 82       	st	Z, r1
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 38       	cpi	r24, 0x80	; 128
    1054:	e1 f7       	brne	.-8      	; 0x104e <OLED_clear_display+0x18>
    1056:	98 3b       	cpi	r25, 0xB8	; 184
    1058:	11 f0       	breq	.+4      	; 0x105e <OLED_clear_display+0x28>
    105a:	89 2f       	mov	r24, r25
    105c:	f2 cf       	rjmp	.-28     	; 0x1042 <OLED_clear_display+0xc>
    105e:	10 92 3b 02 	sts	0x023B, r1
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	dd cf       	rjmp	.-70     	; 0x1020 <OLED_goto_line>
    1066:	08 95       	ret

00001068 <OLED_goto_column>:
    1068:	98 2f       	mov	r25, r24
    106a:	92 95       	swap	r25
    106c:	9f 70       	andi	r25, 0x0F	; 15
    106e:	90 5f       	subi	r25, 0xF0	; 240
    1070:	e0 e0       	ldi	r30, 0x00	; 0
    1072:	f0 e1       	ldi	r31, 0x10	; 16
    1074:	90 83       	st	Z, r25
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	80 83       	st	Z, r24
    107a:	08 95       	ret

0000107c <OLED_print_char>:

//Printing a character to the OLED
void OLED_print_char(char c){
    107c:	e8 2f       	mov	r30, r24
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	b0 97       	sbiw	r30, 0x20	; 32
    1082:	cf 01       	movw	r24, r30
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	e8 0f       	add	r30, r24
    108e:	f9 1f       	adc	r31, r25
    1090:	e6 53       	subi	r30, 0x36	; 54
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET][i]));
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b2 e1       	ldi	r27, 0x12	; 18
    109c:	24 91       	lpm	r18, Z
    109e:	2c 93       	st	X, r18
	return current_line;
}

//Printing a character to the OLED
void OLED_print_char(char c){
	for (int i = 0; i < font5_size; i++) {
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	31 96       	adiw	r30, 0x01	; 1
    10a4:	85 30       	cpi	r24, 0x05	; 5
    10a6:	91 05       	cpc	r25, r1
    10a8:	c9 f7       	brne	.-14     	; 0x109c <OLED_print_char+0x20>
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET][i]));
	}

}
    10aa:	08 95       	ret

000010ac <OLED_print_capital_char>:


void OLED_print_capital_char(char c){
    10ac:	e8 2f       	mov	r30, r24
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	e0 54       	subi	r30, 0x40	; 64
    10b2:	f1 09       	sbc	r31, r1
    10b4:	cf 01       	movw	r24, r30
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	e6 53       	subi	r30, 0x36	; 54
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET - CAPITAL_LETTER_OFFSET][i]));
    10ca:	a0 e0       	ldi	r26, 0x00	; 0
    10cc:	b2 e1       	ldi	r27, 0x12	; 18
    10ce:	24 91       	lpm	r18, Z
    10d0:	2c 93       	st	X, r18

}


void OLED_print_capital_char(char c){
	for (int i = 0; i < font5_size; i++) {
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	31 96       	adiw	r30, 0x01	; 1
    10d6:	85 30       	cpi	r24, 0x05	; 5
    10d8:	91 05       	cpc	r25, r1
    10da:	c9 f7       	brne	.-14     	; 0x10ce <OLED_print_capital_char+0x22>
		*ext_oled_data = pgm_read_byte(&(font5[c - ASCII_OFFSET - CAPITAL_LETTER_OFFSET][i]));
	}

}
    10dc:	08 95       	ret

000010de <OLED_print_inverted_char>:

//Printing a character in black with a white bacground
void OLED_print_inverted_char(char c){
    10de:	e8 2f       	mov	r30, r24
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	b0 97       	sbiw	r30, 0x20	; 32
    10e4:	cf 01       	movw	r24, r30
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	e8 0f       	add	r30, r24
    10f0:	f9 1f       	adc	r31, r25
    10f2:	e6 53       	subi	r30, 0x36	; 54
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
	for (int i = 0; i < font5_size; i++) {
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
		*ext_oled_data = ~pgm_read_byte(&((font5[c - ASCII_OFFSET][i])));
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b2 e1       	ldi	r27, 0x12	; 18
    10fe:	24 91       	lpm	r18, Z
    1100:	20 95       	com	r18
    1102:	2c 93       	st	X, r18

}

//Printing a character in black with a white bacground
void OLED_print_inverted_char(char c){
	for (int i = 0; i < font5_size; i++) {
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	31 96       	adiw	r30, 0x01	; 1
    1108:	85 30       	cpi	r24, 0x05	; 5
    110a:	91 05       	cpc	r25, r1
    110c:	c1 f7       	brne	.-16     	; 0x10fe <OLED_print_inverted_char+0x20>
		*ext_oled_data = ~pgm_read_byte(&((font5[c - ASCII_OFFSET][i])));
	}

}
    110e:	08 95       	ret

00001110 <OLED_print_string>:

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
    111c:	fc 01       	movw	r30, r24
    111e:	01 90       	ld	r0, Z+
    1120:	00 20       	and	r0, r0
    1122:	e9 f7       	brne	.-6      	; 0x111e <OLED_print_string+0xe>
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	e8 1b       	sub	r30, r24
    1128:	f9 0b       	sbc	r31, r25
    112a:	cf 01       	movw	r24, r30
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	f6 95       	lsr	r31
    113a:	e7 95       	ror	r30
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	8e 1b       	sub	r24, r30
    1140:	93 df       	rcall	.-218    	; 0x1068 <OLED_goto_column>

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    1142:	10 e0       	ldi	r17, 0x00	; 0
}

//Printing a string to the OLEd	
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
    1144:	00 e0       	ldi	r16, 0x00	; 0
	while (c[str_index] != '\0') {
		line_index++;
		
		OLED_print_char(c[str_index++]);
		if (line_index > 122/font5_size) {
			line_index = 0;
    1146:	f1 2c       	mov	r15, r1
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
	while (c[str_index] != '\0') {
    1148:	0c c0       	rjmp	.+24     	; 0x1162 <OLED_print_string+0x52>
		line_index++;
    114a:	1f 5f       	subi	r17, 0xFF	; 255
		
		OLED_print_char(c[str_index++]);
    114c:	0f 5f       	subi	r16, 0xFF	; 255
    114e:	96 df       	rcall	.-212    	; 0x107c <OLED_print_char>
		if (line_index > 122/font5_size) {
    1150:	19 31       	cpi	r17, 0x19	; 25
    1152:	38 f0       	brcs	.+14     	; 0x1162 <OLED_print_string+0x52>
			line_index = 0;
			OLED_goto_line(++current_line);
    1154:	80 91 3b 02 	lds	r24, 0x023B
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 3b 02 	sts	0x023B, r24
    115e:	60 df       	rcall	.-320    	; 0x1020 <OLED_goto_line>
	while (c[str_index] != '\0') {
		line_index++;
		
		OLED_print_char(c[str_index++]);
		if (line_index > 122/font5_size) {
			line_index = 0;
    1160:	1f 2d       	mov	r17, r15
void OLED_print_string(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*font5_size)/2));
	while (c[str_index] != '\0') {
    1162:	fe 01       	movw	r30, r28
    1164:	e0 0f       	add	r30, r16
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	81 11       	cpse	r24, r1
    116c:	ee cf       	rjmp	.-36     	; 0x114a <OLED_print_string+0x3a>
			
		}
	}
	
	
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	08 95       	ret

0000117a <OLED_print_header>:

//Printing a string in all caps at the top of the OLED
void OLED_print_header(char c[]){
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
    1186:	fc 01       	movw	r30, r24
    1188:	01 90       	ld	r0, Z+
    118a:	00 20       	and	r0, r0
    118c:	e9 f7       	brne	.-6      	; 0x1188 <OLED_print_header+0xe>
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	e8 1b       	sub	r30, r24
    1192:	f9 0b       	sbc	r31, r25
    1194:	cf 01       	movw	r24, r30
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	e8 0f       	add	r30, r24
    11a0:	f9 1f       	adc	r31, r25
    11a2:	f6 95       	lsr	r31
    11a4:	e7 95       	ror	r30
    11a6:	80 e4       	ldi	r24, 0x40	; 64
    11a8:	8e 1b       	sub	r24, r30
    11aa:	5e df       	rcall	.-324    	; 0x1068 <OLED_goto_column>
	
	while (c[str_index] != '\0') {
    11ac:	01 e0       	ldi	r16, 0x01	; 1

//Printing a string in all caps at the top of the OLED
void OLED_print_header(char c[]){
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    11ae:	10 e0       	ldi	r17, 0x00	; 0
		}
		else {
			OLED_print_char(c[str_index++]);
		}
		if (line_index > 122/font5_size) {
			line_index = 0;
    11b0:	f1 2c       	mov	r15, r1
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
	
	while (c[str_index] != '\0') {
    11b2:	12 c0       	rjmp	.+36     	; 0x11d8 <OLED_print_header+0x5e>
		line_index++;
    11b4:	1f 5f       	subi	r17, 0xFF	; 255
		if (c[str_index] >= 97 && c[str_index] <= 122) {
    11b6:	9f e9       	ldi	r25, 0x9F	; 159
    11b8:	98 0f       	add	r25, r24
    11ba:	9a 31       	cpi	r25, 0x1A	; 26
    11bc:	10 f4       	brcc	.+4      	; 0x11c2 <OLED_print_header+0x48>
			OLED_print_capital_char(c[str_index++]);
    11be:	76 df       	rcall	.-276    	; 0x10ac <OLED_print_capital_char>
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <OLED_print_header+0x4a>
		}
		else {
			OLED_print_char(c[str_index++]);
    11c2:	5c df       	rcall	.-328    	; 0x107c <OLED_print_char>
		}
		if (line_index > 122/font5_size) {
    11c4:	19 31       	cpi	r17, 0x19	; 25
    11c6:	38 f0       	brcs	.+14     	; 0x11d6 <OLED_print_header+0x5c>
			line_index = 0;
			OLED_goto_line(++current_line);
    11c8:	80 91 3b 02 	lds	r24, 0x023B
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	80 93 3b 02 	sts	0x023B, r24
    11d2:	26 df       	rcall	.-436    	; 0x1020 <OLED_goto_line>
		}
		else {
			OLED_print_char(c[str_index++]);
		}
		if (line_index > 122/font5_size) {
			line_index = 0;
    11d4:	1f 2d       	mov	r17, r15
    11d6:	0f 5f       	subi	r16, 0xFF	; 255
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	80 0f       	add	r24, r16
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	OLED_goto_column(64-((strlen(c)*5)/2));
	
	while (c[str_index] != '\0') {
    11dc:	fe 01       	movw	r30, r28
    11de:	e8 0f       	add	r30, r24
    11e0:	f1 1d       	adc	r31, r1
    11e2:	80 81       	ld	r24, Z
    11e4:	81 11       	cpse	r24, r1
    11e6:	e6 cf       	rjmp	.-52     	; 0x11b4 <OLED_print_header+0x3a>
			
		}
	}
	
	
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	08 95       	ret

000011f4 <OLED_int_to_string>:

//Converting an integer to a string
char* OLED_int_to_string(int integer){
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	8c 01       	movw	r16, r24
	}
	char result[n+1];
	itoa(integer,result, 10);
	return result;
	
}
    120a:	ed b6       	in	r14, 0x3d	; 61
    120c:	fe b6       	in	r15, 0x3e	; 62
}

//Converting an integer to a string
char* OLED_int_to_string(int integer){
	int n;
	if (integer == 0){
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	79 f0       	breq	.+30     	; 0x1230 <OLED_int_to_string+0x3c>
		n = 1;
	}
	else{
		n = floor(log10(integer)+1);
    1212:	bc 01       	movw	r22, r24
    1214:	88 27       	eor	r24, r24
    1216:	77 fd       	sbrc	r23, 7
    1218:	80 95       	com	r24
    121a:	98 2f       	mov	r25, r24
    121c:	bd d1       	rcall	.+890    	; 0x1598 <__floatsisf>
    121e:	9b d2       	rcall	.+1334   	; 0x1756 <log10>
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	20 d1       	rcall	.+576    	; 0x146a <__addsf3>
    122a:	f1 d1       	rcall	.+994    	; 0x160e <floor>
    122c:	82 d1       	rcall	.+772    	; 0x1532 <__fixsfsi>
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <OLED_int_to_string+0x40>

//Converting an integer to a string
char* OLED_int_to_string(int integer){
	int n;
	if (integer == 0){
		n = 1;
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	70 e0       	ldi	r23, 0x00	; 0
	}
	else{
		n = floor(log10(integer)+1);
	}
	char result[n+1];
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8d b7       	in	r24, 0x3d	; 61
    123a:	9e b7       	in	r25, 0x3e	; 62
    123c:	86 1b       	sub	r24, r22
    123e:	97 0b       	sbc	r25, r23
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	9e bf       	out	0x3e, r25	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	8d bf       	out	0x3d, r24	; 61
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    124e:	4a e0       	ldi	r20, 0x0A	; 10
    1250:	bc 01       	movw	r22, r24
    1252:	c8 01       	movw	r24, r16
    1254:	f8 d4       	rcall	.+2544   	; 0x1c46 <__itoa_ncheck>
	itoa(integer,result, 10);
	return result;
	
}
    1256:	c6 01       	movw	r24, r12
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	fe be       	out	0x3e, r15	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	ed be       	out	0x3d, r14	; 61
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <OLED_print_inverted_string>:


//Printing a black string with white background
void OLED_print_inverted_string(char c[]) {
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
	
	for (uint8_t i = 0; i < columns_in_line; i++) {
    1280:	80 e0       	ldi	r24, 0x00	; 0
		*ext_oled_data = FILL;
    1282:	e0 e0       	ldi	r30, 0x00	; 0
    1284:	f2 e1       	ldi	r31, 0x12	; 18
    1286:	9f ef       	ldi	r25, 0xFF	; 255
    1288:	90 83       	st	Z, r25


//Printing a black string with white background
void OLED_print_inverted_string(char c[]) {
	
	for (uint8_t i = 0; i < columns_in_line; i++) {
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 38       	cpi	r24, 0x80	; 128
    128e:	e1 f7       	brne	.-8      	; 0x1288 <OLED_print_inverted_string+0x14>
	}
	
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
    1290:	fe 01       	movw	r30, r28
    1292:	01 90       	ld	r0, Z+
    1294:	00 20       	and	r0, r0
    1296:	e9 f7       	brne	.-6      	; 0x1292 <OLED_print_inverted_string+0x1e>
    1298:	31 97       	sbiw	r30, 0x01	; 1
    129a:	ec 1b       	sub	r30, r28
    129c:	fd 0b       	sbc	r31, r29
    129e:	9f 01       	movw	r18, r30
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	9f 01       	movw	r18, r30
    12ae:	36 95       	lsr	r19
    12b0:	27 95       	ror	r18
	OLED_goto_column(start_index_centralized);
    12b2:	80 e4       	ldi	r24, 0x40	; 64
    12b4:	82 1b       	sub	r24, r18
    12b6:	d8 de       	rcall	.-592    	; 0x1068 <OLED_goto_column>
	
	}
	
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
    12b8:	10 e0       	ldi	r17, 0x00	; 0
		*ext_oled_data = FILL;
	
	}
	
	
	uint8_t str_index = 0;
    12ba:	00 e0       	ldi	r16, 0x00	; 0
	while (c[str_index] != '\0') {
		line_index++;
		OLED_print_inverted_char(c[str_index++]);
		
		if (line_index > 122/font5_size) {
			line_index = 0;
    12bc:	f1 2c       	mov	r15, r1
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
	OLED_goto_column(start_index_centralized);
	while (c[str_index] != '\0') {
    12be:	0c c0       	rjmp	.+24     	; 0x12d8 <OLED_print_inverted_string+0x64>
		line_index++;
    12c0:	1f 5f       	subi	r17, 0xFF	; 255
		OLED_print_inverted_char(c[str_index++]);
    12c2:	0f 5f       	subi	r16, 0xFF	; 255
    12c4:	0c df       	rcall	.-488    	; 0x10de <OLED_print_inverted_char>
		
		if (line_index > 122/font5_size) {
    12c6:	19 31       	cpi	r17, 0x19	; 25
    12c8:	38 f0       	brcs	.+14     	; 0x12d8 <OLED_print_inverted_string+0x64>
			line_index = 0;
			OLED_goto_line(++current_line);
    12ca:	80 91 3b 02 	lds	r24, 0x023B
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	80 93 3b 02 	sts	0x023B, r24
    12d4:	a5 de       	rcall	.-694    	; 0x1020 <OLED_goto_line>
	while (c[str_index] != '\0') {
		line_index++;
		OLED_print_inverted_char(c[str_index++]);
		
		if (line_index > 122/font5_size) {
			line_index = 0;
    12d6:	1f 2d       	mov	r17, r15
	
	uint8_t str_index = 0;
	uint8_t line_index = 0;
	uint8_t start_index_centralized = 64-((strlen(c)*font5_size)/2);
	OLED_goto_column(start_index_centralized);
	while (c[str_index] != '\0') {
    12d8:	fe 01       	movw	r30, r28
    12da:	e0 0f       	add	r30, r16
    12dc:	f1 1d       	adc	r31, r1
    12de:	80 81       	ld	r24, Z
    12e0:	81 11       	cpse	r24, r1
    12e2:	ee cf       	rjmp	.-36     	; 0x12c0 <OLED_print_inverted_string+0x4c>
			
		}
	
	
	}
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	08 95       	ret

000012f0 <SPI_init>:


void SPI_init() {
	
	#ifdef __AVR_ATmega162__
	DDRB |= (1<<DDB7);						//SCK
    12f0:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1<<DDB5);						//MOSI
    12f2:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1<<DDB4);						//SS
    12f4:	bc 9a       	sbi	0x17, 4	; 23
	DDRB &= ~(1<<DDB6);						//MISO
    12f6:	be 98       	cbi	0x17, 6	; 23
	DDRB &= ~(1<<DDB3);						//MISO
	
	#endif
	
	
	SPCR &= ~(1<<DORD);						//MSB of data word transmitted first
    12f8:	6d 98       	cbi	0x0d, 5	; 13
	SPCR |= (1<<MSTR);						//Master mode enable
    12fa:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR |= (1<<SPE);						//SPI Enable
    12fc:	6e 9a       	sbi	0x0d, 6	; 13
	SPCR |= (1<<SPR0);						//SCK frequency = F_OSC/16 
    12fe:	68 9a       	sbi	0x0d, 0	; 13
	SPCR &= ~(1<<SPR1);
    1300:	69 98       	cbi	0x0d, 1	; 13
    1302:	08 95       	ret

00001304 <SPI_send>:


void SPI_send(uint8_t message) {
	
	//Start transmission
	SPDR = message;							
    1304:	8f b9       	out	0x0f, r24	; 15

	//Wait until transmission is complete
	while (!(SPSR & (1<<SPIF))) {}			
    1306:	77 9b       	sbis	0x0e, 7	; 14
    1308:	fe cf       	rjmp	.-4      	; 0x1306 <SPI_send+0x2>
}
    130a:	08 95       	ret

0000130c <SPI_read>:


uint8_t SPI_read() {
	
	//Transmisson of dummy byte, to be able to read from slave
	SPI_send(0x01);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	fa df       	rcall	.-12     	; 0x1304 <SPI_send>
								
	//Wait until transmission is complete
	while (!(SPSR & (1<<SPIF))) {}			
    1310:	77 9b       	sbis	0x0e, 7	; 14
    1312:	fe cf       	rjmp	.-4      	; 0x1310 <SPI_read+0x4>
	
	return SPDR;							
    1314:	8f b1       	in	r24, 0x0f	; 15
	
}
    1316:	08 95       	ret

00001318 <SPI_enable_chipselect>:


void SPI_enable_chipselect(void) { 
	PORTB &= ~(1<<PB4);
    1318:	c4 98       	cbi	0x18, 4	; 24
    131a:	08 95       	ret

0000131c <SPI_disable_chipselect>:
}



void SPI_disable_chipselect(void) { 
	PORTB |= (1<<PB4);
    131c:	c4 9a       	sbi	0x18, 4	; 24
    131e:	08 95       	ret

00001320 <SRAM_init>:

void SRAM_init(void){
	
	#ifdef __AVR_ATmega162__
	// enable external reset
	MCUCR |= (1 << SRE);
    1320:	85 b7       	in	r24, 0x35	; 53
    1322:	80 68       	ori	r24, 0x80	; 128
    1324:	85 bf       	out	0x35, r24	; 53
	
	SFIOR |= (1 << XMM2);
    1326:	80 b7       	in	r24, 0x30	; 48
    1328:	80 62       	ori	r24, 0x20	; 32
    132a:	80 bf       	out	0x30, r24	; 48
    132c:	08 95       	ret

0000132e <__vector_13>:

uint16_t volatile static stopwatch = 0;
uint8_t counter = 0;


ISR(TIMER1_COMPA_vect) {
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
	
	stopwatch = stopwatch + 1;
    133c:	80 91 3c 02 	lds	r24, 0x023C
    1340:	90 91 3d 02 	lds	r25, 0x023D
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	90 93 3d 02 	sts	0x023D, r25
    134a:	80 93 3c 02 	sts	0x023C, r24
    134e:	8c ec       	ldi	r24, 0xCC	; 204
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <__vector_13+0x24>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <__vector_13+0x2a>
    1358:	00 00       	nop
	_delay_ms(1);
} 
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <TIMER_init>:

void TIMER_init() {
	
	
	//CTC mode for highscore_timer
	TCCR1B |= (1 << WGM12);
    1368:	8e b5       	in	r24, 0x2e	; 46
    136a:	88 60       	ori	r24, 0x08	; 8
    136c:	8e bd       	out	0x2e, r24	; 46
	
	//Want to count each second:
	//Clock frequency = 16 000 000 and prescaler = 1024 ---> 4915200/1024 = 4800 ticks per sec
	
	//Defining top value of counter for highscore_timer --> reset each second
	OCR1A = 4800;
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	92 e1       	ldi	r25, 0x12	; 18
    1372:	9b bd       	out	0x2b, r25	; 43
    1374:	8a bd       	out	0x2a, r24	; 42

	
	//Enable global interrupt
	sei();
    1376:	78 94       	sei
	
	//Enable Timer Output Compare Match A Interrupt for highscore_timer
	TIMSK |= (1 << OCIE1A);
    1378:	89 b7       	in	r24, 0x39	; 57
    137a:	80 64       	ori	r24, 0x40	; 64
    137c:	89 bf       	out	0x39, r24	; 57
    137e:	08 95       	ret

00001380 <TIMER_start>:
	
}

void TIMER_start(){
	
	stopwatch = 0;
    1380:	10 92 3d 02 	sts	0x023D, r1
    1384:	10 92 3c 02 	sts	0x023C, r1
	
	// initialize counter
	TCNT1 = 0;
    1388:	1d bc       	out	0x2d, r1	; 45
    138a:	1c bc       	out	0x2c, r1	; 44
	
	//Prescaler = 1024
	TCCR1B |= (1 << CS12)|(1 << CS10);
    138c:	8e b5       	in	r24, 0x2e	; 46
    138e:	85 60       	ori	r24, 0x05	; 5
    1390:	8e bd       	out	0x2e, r24	; 46
    1392:	08 95       	ret

00001394 <TIMER_stop>:


void TIMER_stop() {
	
	//Turning off clock source
	TCCR0 &= ~(1<<CS12) & ~(1 << CS11) & ~(1 << CS10);
    1394:	83 b7       	in	r24, 0x33	; 51
    1396:	88 7f       	andi	r24, 0xF8	; 248
    1398:	83 bf       	out	0x33, r24	; 51
    139a:	08 95       	ret

0000139c <TIMER_get_time>:
}



uint16_t TIMER_get_time() {
	return stopwatch;
    139c:	80 91 3c 02 	lds	r24, 0x023C
    13a0:	90 91 3d 02 	lds	r25, 0x023D
}
    13a4:	08 95       	ret

000013a6 <UART_Init>:
    13a6:	90 bd       	out	0x20, r25	; 32
    13a8:	89 b9       	out	0x09, r24	; 9
    13aa:	88 e1       	ldi	r24, 0x18	; 24
    13ac:	8a b9       	out	0x0a, r24	; 10
    13ae:	59 98       	cbi	0x0b, 1	; 11
    13b0:	f8 94       	cli
    13b2:	57 9a       	sbi	0x0a, 7	; 10
    13b4:	5f 9a       	sbi	0x0b, 7	; 11
    13b6:	78 94       	sei
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	08 95       	ret

000013be <UART_Transmit>:
    13be:	5d 9b       	sbis	0x0b, 5	; 11
    13c0:	fe cf       	rjmp	.-4      	; 0x13be <UART_Transmit>
    13c2:	8c b9       	out	0x0c, r24	; 12
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	08 95       	ret

000013ca <UART_Recieve>:
    13ca:	5f 9b       	sbis	0x0b, 7	; 11
    13cc:	fe cf       	rjmp	.-4      	; 0x13ca <UART_Recieve>
    13ce:	8c b1       	in	r24, 0x0c	; 12
    13d0:	08 95       	ret

000013d2 <__vector_19>:


uint8_t RECEIVED = 0;

ISR(USART0_RXC_vect)
{
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	6f 93       	push	r22
    13e6:	7f 93       	push	r23
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
	RECEIVED = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 3e 02 	sts	0x023E, r24
	
	unsigned char temp = UDR0;
    13fa:	8c b1       	in	r24, 0x0c	; 12
	UART_Transmit(temp);
    13fc:	e0 df       	rcall	.-64     	; 0x13be <UART_Transmit>
}
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <main>:
{
	
	//_delay_ms(10);
	
	//Setting port A as output	
	DDRA = 0xFF;
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	8a bb       	out	0x1a, r24	; 26
	
	//Initializing drivers
	UART_Init(UBRR);
    1424:	8f e1       	ldi	r24, 0x1F	; 31
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	be df       	rcall	.-132    	; 0x13a6 <UART_Init>
	fdevopen(&UART_Transmit, &UART_Recieve);
    142a:	65 ee       	ldi	r22, 0xE5	; 229
    142c:	79 e0       	ldi	r23, 0x09	; 9
    142e:	8f ed       	ldi	r24, 0xDF	; 223
    1430:	99 e0       	ldi	r25, 0x09	; 9
    1432:	2c d4       	rcall	.+2136   	; 0x1c8c <fdevopen>
	SRAM_init();
    1434:	75 df       	rcall	.-278    	; 0x1320 <SRAM_init>
	CAN_init();
    1436:	0e 94 98 01 	call	0x330	; 0x330 <CAN_init>
	JOY_init();
    143a:	17 d8       	rcall	.-4050   	; 0x46a <JOY_init>
    143c:	2f ef       	ldi	r18, 0xFF	; 255
    143e:	8f e7       	ldi	r24, 0x7F	; 127
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	80 40       	sbci	r24, 0x00	; 0
    1446:	90 40       	sbci	r25, 0x00	; 0
    1448:	e1 f7       	brne	.-8      	; 0x1442 <main+0x22>
    144a:	00 c0       	rjmp	.+0      	; 0x144c <main+0x2c>
    144c:	00 c0       	rjmp	.+0      	; 0x144e <main+0x2e>
	_delay_ms(100);
	OLED_init();
    144e:	b8 dd       	rcall	.-1168   	; 0xfc0 <OLED_init>
	OLED_clear_display();
    1450:	f2 dd       	rcall	.-1052   	; 0x1036 <OLED_clear_display>
	OLED_goto_line(0);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	e5 dd       	rcall	.-1078   	; 0x1020 <OLED_goto_line>
	OLED_goto_column(0);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	07 de       	rcall	.-1010   	; 0x1068 <OLED_goto_column>
	MENU_print_rocket();
    145a:	73 da       	rcall	.-2842   	; 0x942 <MENU_print_rocket>
	TIMER_init();
    145c:	85 df       	rcall	.-246    	; 0x1368 <TIMER_init>
	
	MENU_create();
    145e:	21 dc       	rcall	.-1982   	; 0xca2 <MENU_create>

	MENU_run_menu();
    1460:	6d dc       	rcall	.-1830   	; 0xd3c <MENU_run_menu>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	08 95       	ret

00001468 <__subsf3>:
    1468:	50 58       	subi	r21, 0x80	; 128

0000146a <__addsf3>:
    146a:	bb 27       	eor	r27, r27
    146c:	aa 27       	eor	r26, r26
    146e:	0e d0       	rcall	.+28     	; 0x148c <__addsf3x>
    1470:	21 c1       	rjmp	.+578    	; 0x16b4 <__fp_round>
    1472:	12 d1       	rcall	.+548    	; 0x1698 <__fp_pscA>
    1474:	30 f0       	brcs	.+12     	; 0x1482 <__addsf3+0x18>
    1476:	17 d1       	rcall	.+558    	; 0x16a6 <__fp_pscB>
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__addsf3+0x18>
    147a:	31 f4       	brne	.+12     	; 0x1488 <__addsf3+0x1e>
    147c:	9f 3f       	cpi	r25, 0xFF	; 255
    147e:	11 f4       	brne	.+4      	; 0x1484 <__addsf3+0x1a>
    1480:	1e f4       	brtc	.+6      	; 0x1488 <__addsf3+0x1e>
    1482:	07 c1       	rjmp	.+526    	; 0x1692 <__fp_nan>
    1484:	0e f4       	brtc	.+2      	; 0x1488 <__addsf3+0x1e>
    1486:	e0 95       	com	r30
    1488:	e7 fb       	bst	r30, 7
    148a:	d4 c0       	rjmp	.+424    	; 0x1634 <__fp_inf>

0000148c <__addsf3x>:
    148c:	e9 2f       	mov	r30, r25
    148e:	23 d1       	rcall	.+582    	; 0x16d6 <__fp_split3>
    1490:	80 f3       	brcs	.-32     	; 0x1472 <__addsf3+0x8>
    1492:	ba 17       	cp	r27, r26
    1494:	62 07       	cpc	r22, r18
    1496:	73 07       	cpc	r23, r19
    1498:	84 07       	cpc	r24, r20
    149a:	95 07       	cpc	r25, r21
    149c:	18 f0       	brcs	.+6      	; 0x14a4 <__addsf3x+0x18>
    149e:	71 f4       	brne	.+28     	; 0x14bc <__addsf3x+0x30>
    14a0:	9e f5       	brtc	.+102    	; 0x1508 <__addsf3x+0x7c>
    14a2:	52 c1       	rjmp	.+676    	; 0x1748 <__fp_zero>
    14a4:	0e f4       	brtc	.+2      	; 0x14a8 <__addsf3x+0x1c>
    14a6:	e0 95       	com	r30
    14a8:	0b 2e       	mov	r0, r27
    14aa:	ba 2f       	mov	r27, r26
    14ac:	a0 2d       	mov	r26, r0
    14ae:	0b 01       	movw	r0, r22
    14b0:	b9 01       	movw	r22, r18
    14b2:	90 01       	movw	r18, r0
    14b4:	0c 01       	movw	r0, r24
    14b6:	ca 01       	movw	r24, r20
    14b8:	a0 01       	movw	r20, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	ff 27       	eor	r31, r31
    14be:	59 1b       	sub	r21, r25
    14c0:	99 f0       	breq	.+38     	; 0x14e8 <__addsf3x+0x5c>
    14c2:	59 3f       	cpi	r21, 0xF9	; 249
    14c4:	50 f4       	brcc	.+20     	; 0x14da <__addsf3x+0x4e>
    14c6:	50 3e       	cpi	r21, 0xE0	; 224
    14c8:	68 f1       	brcs	.+90     	; 0x1524 <__addsf3x+0x98>
    14ca:	1a 16       	cp	r1, r26
    14cc:	f0 40       	sbci	r31, 0x00	; 0
    14ce:	a2 2f       	mov	r26, r18
    14d0:	23 2f       	mov	r18, r19
    14d2:	34 2f       	mov	r19, r20
    14d4:	44 27       	eor	r20, r20
    14d6:	58 5f       	subi	r21, 0xF8	; 248
    14d8:	f3 cf       	rjmp	.-26     	; 0x14c0 <__addsf3x+0x34>
    14da:	46 95       	lsr	r20
    14dc:	37 95       	ror	r19
    14de:	27 95       	ror	r18
    14e0:	a7 95       	ror	r26
    14e2:	f0 40       	sbci	r31, 0x00	; 0
    14e4:	53 95       	inc	r21
    14e6:	c9 f7       	brne	.-14     	; 0x14da <__addsf3x+0x4e>
    14e8:	7e f4       	brtc	.+30     	; 0x1508 <__addsf3x+0x7c>
    14ea:	1f 16       	cp	r1, r31
    14ec:	ba 0b       	sbc	r27, r26
    14ee:	62 0b       	sbc	r22, r18
    14f0:	73 0b       	sbc	r23, r19
    14f2:	84 0b       	sbc	r24, r20
    14f4:	ba f0       	brmi	.+46     	; 0x1524 <__addsf3x+0x98>
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	a1 f0       	breq	.+40     	; 0x1522 <__addsf3x+0x96>
    14fa:	ff 0f       	add	r31, r31
    14fc:	bb 1f       	adc	r27, r27
    14fe:	66 1f       	adc	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	c2 f7       	brpl	.-16     	; 0x14f6 <__addsf3x+0x6a>
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <__addsf3x+0x98>
    1508:	ba 0f       	add	r27, r26
    150a:	62 1f       	adc	r22, r18
    150c:	73 1f       	adc	r23, r19
    150e:	84 1f       	adc	r24, r20
    1510:	48 f4       	brcc	.+18     	; 0x1524 <__addsf3x+0x98>
    1512:	87 95       	ror	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b7 95       	ror	r27
    151a:	f7 95       	ror	r31
    151c:	9e 3f       	cpi	r25, 0xFE	; 254
    151e:	08 f0       	brcs	.+2      	; 0x1522 <__addsf3x+0x96>
    1520:	b3 cf       	rjmp	.-154    	; 0x1488 <__addsf3+0x1e>
    1522:	93 95       	inc	r25
    1524:	88 0f       	add	r24, r24
    1526:	08 f0       	brcs	.+2      	; 0x152a <__addsf3x+0x9e>
    1528:	99 27       	eor	r25, r25
    152a:	ee 0f       	add	r30, r30
    152c:	97 95       	ror	r25
    152e:	87 95       	ror	r24
    1530:	08 95       	ret

00001532 <__fixsfsi>:
    1532:	04 d0       	rcall	.+8      	; 0x153c <__fixunssfsi>
    1534:	68 94       	set
    1536:	b1 11       	cpse	r27, r1
    1538:	08 c1       	rjmp	.+528    	; 0x174a <__fp_szero>
    153a:	08 95       	ret

0000153c <__fixunssfsi>:
    153c:	d4 d0       	rcall	.+424    	; 0x16e6 <__fp_splitA>
    153e:	88 f0       	brcs	.+34     	; 0x1562 <__fixunssfsi+0x26>
    1540:	9f 57       	subi	r25, 0x7F	; 127
    1542:	90 f0       	brcs	.+36     	; 0x1568 <__fixunssfsi+0x2c>
    1544:	b9 2f       	mov	r27, r25
    1546:	99 27       	eor	r25, r25
    1548:	b7 51       	subi	r27, 0x17	; 23
    154a:	a0 f0       	brcs	.+40     	; 0x1574 <__fixunssfsi+0x38>
    154c:	d1 f0       	breq	.+52     	; 0x1582 <__fixunssfsi+0x46>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	1a f0       	brmi	.+6      	; 0x155e <__fixunssfsi+0x22>
    1558:	ba 95       	dec	r27
    155a:	c9 f7       	brne	.-14     	; 0x154e <__fixunssfsi+0x12>
    155c:	12 c0       	rjmp	.+36     	; 0x1582 <__fixunssfsi+0x46>
    155e:	b1 30       	cpi	r27, 0x01	; 1
    1560:	81 f0       	breq	.+32     	; 0x1582 <__fixunssfsi+0x46>
    1562:	f2 d0       	rcall	.+484    	; 0x1748 <__fp_zero>
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	08 95       	ret
    1568:	ef c0       	rjmp	.+478    	; 0x1748 <__fp_zero>
    156a:	67 2f       	mov	r22, r23
    156c:	78 2f       	mov	r23, r24
    156e:	88 27       	eor	r24, r24
    1570:	b8 5f       	subi	r27, 0xF8	; 248
    1572:	39 f0       	breq	.+14     	; 0x1582 <__fixunssfsi+0x46>
    1574:	b9 3f       	cpi	r27, 0xF9	; 249
    1576:	cc f3       	brlt	.-14     	; 0x156a <__fixunssfsi+0x2e>
    1578:	86 95       	lsr	r24
    157a:	77 95       	ror	r23
    157c:	67 95       	ror	r22
    157e:	b3 95       	inc	r27
    1580:	d9 f7       	brne	.-10     	; 0x1578 <__fixunssfsi+0x3c>
    1582:	3e f4       	brtc	.+14     	; 0x1592 <__fixunssfsi+0x56>
    1584:	90 95       	com	r25
    1586:	80 95       	com	r24
    1588:	70 95       	com	r23
    158a:	61 95       	neg	r22
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	8f 4f       	sbci	r24, 0xFF	; 255
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	08 95       	ret

00001594 <__floatunsisf>:
    1594:	e8 94       	clt
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <__floatsisf+0x12>

00001598 <__floatsisf>:
    1598:	97 fb       	bst	r25, 7
    159a:	3e f4       	brtc	.+14     	; 0x15aa <__floatsisf+0x12>
    159c:	90 95       	com	r25
    159e:	80 95       	com	r24
    15a0:	70 95       	com	r23
    15a2:	61 95       	neg	r22
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	99 23       	and	r25, r25
    15ac:	a9 f0       	breq	.+42     	; 0x15d8 <__floatsisf+0x40>
    15ae:	f9 2f       	mov	r31, r25
    15b0:	96 e9       	ldi	r25, 0x96	; 150
    15b2:	bb 27       	eor	r27, r27
    15b4:	93 95       	inc	r25
    15b6:	f6 95       	lsr	r31
    15b8:	87 95       	ror	r24
    15ba:	77 95       	ror	r23
    15bc:	67 95       	ror	r22
    15be:	b7 95       	ror	r27
    15c0:	f1 11       	cpse	r31, r1
    15c2:	f8 cf       	rjmp	.-16     	; 0x15b4 <__floatsisf+0x1c>
    15c4:	fa f4       	brpl	.+62     	; 0x1604 <__floatsisf+0x6c>
    15c6:	bb 0f       	add	r27, r27
    15c8:	11 f4       	brne	.+4      	; 0x15ce <__floatsisf+0x36>
    15ca:	60 ff       	sbrs	r22, 0
    15cc:	1b c0       	rjmp	.+54     	; 0x1604 <__floatsisf+0x6c>
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <__floatsisf+0x6c>
    15d8:	88 23       	and	r24, r24
    15da:	11 f0       	breq	.+4      	; 0x15e0 <__floatsisf+0x48>
    15dc:	96 e9       	ldi	r25, 0x96	; 150
    15de:	11 c0       	rjmp	.+34     	; 0x1602 <__floatsisf+0x6a>
    15e0:	77 23       	and	r23, r23
    15e2:	21 f0       	breq	.+8      	; 0x15ec <__floatsisf+0x54>
    15e4:	9e e8       	ldi	r25, 0x8E	; 142
    15e6:	87 2f       	mov	r24, r23
    15e8:	76 2f       	mov	r23, r22
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <__floatsisf+0x5e>
    15ec:	66 23       	and	r22, r22
    15ee:	71 f0       	breq	.+28     	; 0x160c <__floatsisf+0x74>
    15f0:	96 e8       	ldi	r25, 0x86	; 134
    15f2:	86 2f       	mov	r24, r22
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	2a f0       	brmi	.+10     	; 0x1604 <__floatsisf+0x6c>
    15fa:	9a 95       	dec	r25
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	88 1f       	adc	r24, r24
    1602:	da f7       	brpl	.-10     	; 0x15fa <__floatsisf+0x62>
    1604:	88 0f       	add	r24, r24
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <floor>:
    160e:	85 d0       	rcall	.+266    	; 0x171a <__fp_trunc>
    1610:	80 f0       	brcs	.+32     	; 0x1632 <floor+0x24>
    1612:	9f 37       	cpi	r25, 0x7F	; 127
    1614:	40 f4       	brcc	.+16     	; 0x1626 <floor+0x18>
    1616:	91 11       	cpse	r25, r1
    1618:	0e f0       	brts	.+2      	; 0x161c <floor+0xe>
    161a:	97 c0       	rjmp	.+302    	; 0x174a <__fp_szero>
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	80 e8       	ldi	r24, 0x80	; 128
    1622:	9f eb       	ldi	r25, 0xBF	; 191
    1624:	08 95       	ret
    1626:	26 f4       	brtc	.+8      	; 0x1630 <floor+0x22>
    1628:	1b 16       	cp	r1, r27
    162a:	61 1d       	adc	r22, r1
    162c:	71 1d       	adc	r23, r1
    162e:	81 1d       	adc	r24, r1
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <__fp_mintl>
    1632:	21 c0       	rjmp	.+66     	; 0x1676 <__fp_mpack>

00001634 <__fp_inf>:
    1634:	97 f9       	bld	r25, 7
    1636:	9f 67       	ori	r25, 0x7F	; 127
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	08 95       	ret

00001640 <__fp_mintl>:
    1640:	88 23       	and	r24, r24
    1642:	71 f4       	brne	.+28     	; 0x1660 <__fp_mintl+0x20>
    1644:	77 23       	and	r23, r23
    1646:	21 f0       	breq	.+8      	; 0x1650 <__fp_mintl+0x10>
    1648:	98 50       	subi	r25, 0x08	; 8
    164a:	87 2b       	or	r24, r23
    164c:	76 2f       	mov	r23, r22
    164e:	07 c0       	rjmp	.+14     	; 0x165e <__fp_mintl+0x1e>
    1650:	66 23       	and	r22, r22
    1652:	11 f4       	brne	.+4      	; 0x1658 <__fp_mintl+0x18>
    1654:	99 27       	eor	r25, r25
    1656:	0d c0       	rjmp	.+26     	; 0x1672 <__fp_mintl+0x32>
    1658:	90 51       	subi	r25, 0x10	; 16
    165a:	86 2b       	or	r24, r22
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	2a f0       	brmi	.+10     	; 0x166c <__fp_mintl+0x2c>
    1662:	9a 95       	dec	r25
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	da f7       	brpl	.-10     	; 0x1662 <__fp_mintl+0x22>
    166c:	88 0f       	add	r24, r24
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__fp_mpack>:
    1676:	9f 3f       	cpi	r25, 0xFF	; 255
    1678:	31 f0       	breq	.+12     	; 0x1686 <__fp_mpack_finite+0xc>

0000167a <__fp_mpack_finite>:
    167a:	91 50       	subi	r25, 0x01	; 1
    167c:	20 f4       	brcc	.+8      	; 0x1686 <__fp_mpack_finite+0xc>
    167e:	87 95       	ror	r24
    1680:	77 95       	ror	r23
    1682:	67 95       	ror	r22
    1684:	b7 95       	ror	r27
    1686:	88 0f       	add	r24, r24
    1688:	91 1d       	adc	r25, r1
    168a:	96 95       	lsr	r25
    168c:	87 95       	ror	r24
    168e:	97 f9       	bld	r25, 7
    1690:	08 95       	ret

00001692 <__fp_nan>:
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	80 ec       	ldi	r24, 0xC0	; 192
    1696:	08 95       	ret

00001698 <__fp_pscA>:
    1698:	00 24       	eor	r0, r0
    169a:	0a 94       	dec	r0
    169c:	16 16       	cp	r1, r22
    169e:	17 06       	cpc	r1, r23
    16a0:	18 06       	cpc	r1, r24
    16a2:	09 06       	cpc	r0, r25
    16a4:	08 95       	ret

000016a6 <__fp_pscB>:
    16a6:	00 24       	eor	r0, r0
    16a8:	0a 94       	dec	r0
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	14 06       	cpc	r1, r20
    16b0:	05 06       	cpc	r0, r21
    16b2:	08 95       	ret

000016b4 <__fp_round>:
    16b4:	09 2e       	mov	r0, r25
    16b6:	03 94       	inc	r0
    16b8:	00 0c       	add	r0, r0
    16ba:	11 f4       	brne	.+4      	; 0x16c0 <__fp_round+0xc>
    16bc:	88 23       	and	r24, r24
    16be:	52 f0       	brmi	.+20     	; 0x16d4 <__fp_round+0x20>
    16c0:	bb 0f       	add	r27, r27
    16c2:	40 f4       	brcc	.+16     	; 0x16d4 <__fp_round+0x20>
    16c4:	bf 2b       	or	r27, r31
    16c6:	11 f4       	brne	.+4      	; 0x16cc <__fp_round+0x18>
    16c8:	60 ff       	sbrs	r22, 0
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <__fp_round+0x20>
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	08 95       	ret

000016d6 <__fp_split3>:
    16d6:	57 fd       	sbrc	r21, 7
    16d8:	90 58       	subi	r25, 0x80	; 128
    16da:	44 0f       	add	r20, r20
    16dc:	55 1f       	adc	r21, r21
    16de:	59 f0       	breq	.+22     	; 0x16f6 <__fp_splitA+0x10>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	71 f0       	breq	.+28     	; 0x1700 <__fp_splitA+0x1a>
    16e4:	47 95       	ror	r20

000016e6 <__fp_splitA>:
    16e6:	88 0f       	add	r24, r24
    16e8:	97 fb       	bst	r25, 7
    16ea:	99 1f       	adc	r25, r25
    16ec:	61 f0       	breq	.+24     	; 0x1706 <__fp_splitA+0x20>
    16ee:	9f 3f       	cpi	r25, 0xFF	; 255
    16f0:	79 f0       	breq	.+30     	; 0x1710 <__fp_splitA+0x2a>
    16f2:	87 95       	ror	r24
    16f4:	08 95       	ret
    16f6:	12 16       	cp	r1, r18
    16f8:	13 06       	cpc	r1, r19
    16fa:	14 06       	cpc	r1, r20
    16fc:	55 1f       	adc	r21, r21
    16fe:	f2 cf       	rjmp	.-28     	; 0x16e4 <__fp_split3+0xe>
    1700:	46 95       	lsr	r20
    1702:	f1 df       	rcall	.-30     	; 0x16e6 <__fp_splitA>
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <__fp_splitA+0x30>
    1706:	16 16       	cp	r1, r22
    1708:	17 06       	cpc	r1, r23
    170a:	18 06       	cpc	r1, r24
    170c:	99 1f       	adc	r25, r25
    170e:	f1 cf       	rjmp	.-30     	; 0x16f2 <__fp_splitA+0xc>
    1710:	86 95       	lsr	r24
    1712:	71 05       	cpc	r23, r1
    1714:	61 05       	cpc	r22, r1
    1716:	08 94       	sec
    1718:	08 95       	ret

0000171a <__fp_trunc>:
    171a:	e5 df       	rcall	.-54     	; 0x16e6 <__fp_splitA>
    171c:	a0 f0       	brcs	.+40     	; 0x1746 <__fp_trunc+0x2c>
    171e:	be e7       	ldi	r27, 0x7E	; 126
    1720:	b9 17       	cp	r27, r25
    1722:	88 f4       	brcc	.+34     	; 0x1746 <__fp_trunc+0x2c>
    1724:	bb 27       	eor	r27, r27
    1726:	9f 38       	cpi	r25, 0x8F	; 143
    1728:	60 f4       	brcc	.+24     	; 0x1742 <__fp_trunc+0x28>
    172a:	16 16       	cp	r1, r22
    172c:	b1 1d       	adc	r27, r1
    172e:	67 2f       	mov	r22, r23
    1730:	78 2f       	mov	r23, r24
    1732:	88 27       	eor	r24, r24
    1734:	98 5f       	subi	r25, 0xF8	; 248
    1736:	f7 cf       	rjmp	.-18     	; 0x1726 <__fp_trunc+0xc>
    1738:	86 95       	lsr	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b1 1d       	adc	r27, r1
    1740:	93 95       	inc	r25
    1742:	96 39       	cpi	r25, 0x96	; 150
    1744:	c8 f3       	brcs	.-14     	; 0x1738 <__fp_trunc+0x1e>
    1746:	08 95       	ret

00001748 <__fp_zero>:
    1748:	e8 94       	clt

0000174a <__fp_szero>:
    174a:	bb 27       	eor	r27, r27
    174c:	66 27       	eor	r22, r22
    174e:	77 27       	eor	r23, r23
    1750:	cb 01       	movw	r24, r22
    1752:	97 f9       	bld	r25, 7
    1754:	08 95       	ret

00001756 <log10>:
    1756:	0a d0       	rcall	.+20     	; 0x176c <log>
    1758:	29 ed       	ldi	r18, 0xD9	; 217
    175a:	3b e5       	ldi	r19, 0x5B	; 91
    175c:	4e ed       	ldi	r20, 0xDE	; 222
    175e:	5e e3       	ldi	r21, 0x3E	; 62
    1760:	45 c0       	rjmp	.+138    	; 0x17ec <__mulsf3>
    1762:	0e f0       	brts	.+2      	; 0x1766 <log10+0x10>
    1764:	88 cf       	rjmp	.-240    	; 0x1676 <__fp_mpack>
    1766:	95 cf       	rjmp	.-214    	; 0x1692 <__fp_nan>
    1768:	68 94       	set
    176a:	64 cf       	rjmp	.-312    	; 0x1634 <__fp_inf>

0000176c <log>:
    176c:	bc df       	rcall	.-136    	; 0x16e6 <__fp_splitA>
    176e:	c8 f3       	brcs	.-14     	; 0x1762 <log10+0xc>
    1770:	99 23       	and	r25, r25
    1772:	d1 f3       	breq	.-12     	; 0x1768 <log10+0x12>
    1774:	c6 f3       	brts	.-16     	; 0x1766 <log10+0x10>
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	1f 93       	push	r17
    177c:	0f 93       	push	r16
    177e:	ff 92       	push	r15
    1780:	c9 2f       	mov	r28, r25
    1782:	dd 27       	eor	r29, r29
    1784:	88 23       	and	r24, r24
    1786:	2a f0       	brmi	.+10     	; 0x1792 <log+0x26>
    1788:	21 97       	sbiw	r28, 0x01	; 1
    178a:	66 0f       	add	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	da f7       	brpl	.-10     	; 0x1788 <log+0x1c>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e8       	ldi	r20, 0x80	; 128
    1798:	5f eb       	ldi	r21, 0xBF	; 191
    179a:	9f e3       	ldi	r25, 0x3F	; 63
    179c:	88 39       	cpi	r24, 0x98	; 152
    179e:	20 f0       	brcs	.+8      	; 0x17a8 <log+0x3c>
    17a0:	80 3e       	cpi	r24, 0xE0	; 224
    17a2:	30 f0       	brcs	.+12     	; 0x17b0 <log+0x44>
    17a4:	21 96       	adiw	r28, 0x01	; 1
    17a6:	8f 77       	andi	r24, 0x7F	; 127
    17a8:	60 de       	rcall	.-832    	; 0x146a <__addsf3>
    17aa:	e0 e7       	ldi	r30, 0x70	; 112
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <log+0x4a>
    17b0:	5c de       	rcall	.-840    	; 0x146a <__addsf3>
    17b2:	ed e9       	ldi	r30, 0x9D	; 157
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	7d d0       	rcall	.+250    	; 0x18b2 <__fp_powser>
    17b8:	8b 01       	movw	r16, r22
    17ba:	be 01       	movw	r22, r28
    17bc:	ec 01       	movw	r28, r24
    17be:	fb 2e       	mov	r15, r27
    17c0:	6f 57       	subi	r22, 0x7F	; 127
    17c2:	71 09       	sbc	r23, r1
    17c4:	75 95       	asr	r23
    17c6:	77 1f       	adc	r23, r23
    17c8:	88 0b       	sbc	r24, r24
    17ca:	99 0b       	sbc	r25, r25
    17cc:	e5 de       	rcall	.-566    	; 0x1598 <__floatsisf>
    17ce:	28 e1       	ldi	r18, 0x18	; 24
    17d0:	32 e7       	ldi	r19, 0x72	; 114
    17d2:	41 e3       	ldi	r20, 0x31	; 49
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	16 d0       	rcall	.+44     	; 0x1804 <__mulsf3x>
    17d8:	af 2d       	mov	r26, r15
    17da:	98 01       	movw	r18, r16
    17dc:	ae 01       	movw	r20, r28
    17de:	ff 90       	pop	r15
    17e0:	0f 91       	pop	r16
    17e2:	1f 91       	pop	r17
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	51 de       	rcall	.-862    	; 0x148c <__addsf3x>
    17ea:	64 cf       	rjmp	.-312    	; 0x16b4 <__fp_round>

000017ec <__mulsf3>:
    17ec:	0b d0       	rcall	.+22     	; 0x1804 <__mulsf3x>
    17ee:	62 cf       	rjmp	.-316    	; 0x16b4 <__fp_round>
    17f0:	53 df       	rcall	.-346    	; 0x1698 <__fp_pscA>
    17f2:	28 f0       	brcs	.+10     	; 0x17fe <__mulsf3+0x12>
    17f4:	58 df       	rcall	.-336    	; 0x16a6 <__fp_pscB>
    17f6:	18 f0       	brcs	.+6      	; 0x17fe <__mulsf3+0x12>
    17f8:	95 23       	and	r25, r21
    17fa:	09 f0       	breq	.+2      	; 0x17fe <__mulsf3+0x12>
    17fc:	1b cf       	rjmp	.-458    	; 0x1634 <__fp_inf>
    17fe:	49 cf       	rjmp	.-366    	; 0x1692 <__fp_nan>
    1800:	11 24       	eor	r1, r1
    1802:	a3 cf       	rjmp	.-186    	; 0x174a <__fp_szero>

00001804 <__mulsf3x>:
    1804:	68 df       	rcall	.-304    	; 0x16d6 <__fp_split3>
    1806:	a0 f3       	brcs	.-24     	; 0x17f0 <__mulsf3+0x4>

00001808 <__mulsf3_pse>:
    1808:	95 9f       	mul	r25, r21
    180a:	d1 f3       	breq	.-12     	; 0x1800 <__mulsf3+0x14>
    180c:	95 0f       	add	r25, r21
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	55 1f       	adc	r21, r21
    1812:	62 9f       	mul	r22, r18
    1814:	f0 01       	movw	r30, r0
    1816:	72 9f       	mul	r23, r18
    1818:	bb 27       	eor	r27, r27
    181a:	f0 0d       	add	r31, r0
    181c:	b1 1d       	adc	r27, r1
    181e:	63 9f       	mul	r22, r19
    1820:	aa 27       	eor	r26, r26
    1822:	f0 0d       	add	r31, r0
    1824:	b1 1d       	adc	r27, r1
    1826:	aa 1f       	adc	r26, r26
    1828:	64 9f       	mul	r22, r20
    182a:	66 27       	eor	r22, r22
    182c:	b0 0d       	add	r27, r0
    182e:	a1 1d       	adc	r26, r1
    1830:	66 1f       	adc	r22, r22
    1832:	82 9f       	mul	r24, r18
    1834:	22 27       	eor	r18, r18
    1836:	b0 0d       	add	r27, r0
    1838:	a1 1d       	adc	r26, r1
    183a:	62 1f       	adc	r22, r18
    183c:	73 9f       	mul	r23, r19
    183e:	b0 0d       	add	r27, r0
    1840:	a1 1d       	adc	r26, r1
    1842:	62 1f       	adc	r22, r18
    1844:	83 9f       	mul	r24, r19
    1846:	a0 0d       	add	r26, r0
    1848:	61 1d       	adc	r22, r1
    184a:	22 1f       	adc	r18, r18
    184c:	74 9f       	mul	r23, r20
    184e:	33 27       	eor	r19, r19
    1850:	a0 0d       	add	r26, r0
    1852:	61 1d       	adc	r22, r1
    1854:	23 1f       	adc	r18, r19
    1856:	84 9f       	mul	r24, r20
    1858:	60 0d       	add	r22, r0
    185a:	21 1d       	adc	r18, r1
    185c:	82 2f       	mov	r24, r18
    185e:	76 2f       	mov	r23, r22
    1860:	6a 2f       	mov	r22, r26
    1862:	11 24       	eor	r1, r1
    1864:	9f 57       	subi	r25, 0x7F	; 127
    1866:	50 40       	sbci	r21, 0x00	; 0
    1868:	8a f0       	brmi	.+34     	; 0x188c <__mulsf3_pse+0x84>
    186a:	e1 f0       	breq	.+56     	; 0x18a4 <__mulsf3_pse+0x9c>
    186c:	88 23       	and	r24, r24
    186e:	4a f0       	brmi	.+18     	; 0x1882 <__mulsf3_pse+0x7a>
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	bb 1f       	adc	r27, r27
    1876:	66 1f       	adc	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	91 50       	subi	r25, 0x01	; 1
    187e:	50 40       	sbci	r21, 0x00	; 0
    1880:	a9 f7       	brne	.-22     	; 0x186c <__mulsf3_pse+0x64>
    1882:	9e 3f       	cpi	r25, 0xFE	; 254
    1884:	51 05       	cpc	r21, r1
    1886:	70 f0       	brcs	.+28     	; 0x18a4 <__mulsf3_pse+0x9c>
    1888:	d5 ce       	rjmp	.-598    	; 0x1634 <__fp_inf>
    188a:	5f cf       	rjmp	.-322    	; 0x174a <__fp_szero>
    188c:	5f 3f       	cpi	r21, 0xFF	; 255
    188e:	ec f3       	brlt	.-6      	; 0x188a <__mulsf3_pse+0x82>
    1890:	98 3e       	cpi	r25, 0xE8	; 232
    1892:	dc f3       	brlt	.-10     	; 0x188a <__mulsf3_pse+0x82>
    1894:	86 95       	lsr	r24
    1896:	77 95       	ror	r23
    1898:	67 95       	ror	r22
    189a:	b7 95       	ror	r27
    189c:	f7 95       	ror	r31
    189e:	e7 95       	ror	r30
    18a0:	9f 5f       	subi	r25, 0xFF	; 255
    18a2:	c1 f7       	brne	.-16     	; 0x1894 <__mulsf3_pse+0x8c>
    18a4:	fe 2b       	or	r31, r30
    18a6:	88 0f       	add	r24, r24
    18a8:	91 1d       	adc	r25, r1
    18aa:	96 95       	lsr	r25
    18ac:	87 95       	ror	r24
    18ae:	97 f9       	bld	r25, 7
    18b0:	08 95       	ret

000018b2 <__fp_powser>:
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	1f 93       	push	r17
    18b8:	0f 93       	push	r16
    18ba:	ff 92       	push	r15
    18bc:	ef 92       	push	r14
    18be:	df 92       	push	r13
    18c0:	7b 01       	movw	r14, r22
    18c2:	8c 01       	movw	r16, r24
    18c4:	68 94       	set
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <__fp_powser+0x20>
    18c8:	da 2e       	mov	r13, r26
    18ca:	ef 01       	movw	r28, r30
    18cc:	9b df       	rcall	.-202    	; 0x1804 <__mulsf3x>
    18ce:	fe 01       	movw	r30, r28
    18d0:	e8 94       	clt
    18d2:	a5 91       	lpm	r26, Z+
    18d4:	25 91       	lpm	r18, Z+
    18d6:	35 91       	lpm	r19, Z+
    18d8:	45 91       	lpm	r20, Z+
    18da:	55 91       	lpm	r21, Z+
    18dc:	ae f3       	brts	.-22     	; 0x18c8 <__fp_powser+0x16>
    18de:	ef 01       	movw	r28, r30
    18e0:	d5 dd       	rcall	.-1110   	; 0x148c <__addsf3x>
    18e2:	fe 01       	movw	r30, r28
    18e4:	97 01       	movw	r18, r14
    18e6:	a8 01       	movw	r20, r16
    18e8:	da 94       	dec	r13
    18ea:	79 f7       	brne	.-34     	; 0x18ca <__fp_powser+0x18>
    18ec:	df 90       	pop	r13
    18ee:	ef 90       	pop	r14
    18f0:	ff 90       	pop	r15
    18f2:	0f 91       	pop	r16
    18f4:	1f 91       	pop	r17
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <__divmodhi4>:
    18fc:	97 fb       	bst	r25, 7
    18fe:	07 2e       	mov	r0, r23
    1900:	16 f4       	brtc	.+4      	; 0x1906 <__divmodhi4+0xa>
    1902:	00 94       	com	r0
    1904:	06 d0       	rcall	.+12     	; 0x1912 <__divmodhi4_neg1>
    1906:	77 fd       	sbrc	r23, 7
    1908:	08 d0       	rcall	.+16     	; 0x191a <__divmodhi4_neg2>
    190a:	0b d0       	rcall	.+22     	; 0x1922 <__udivmodhi4>
    190c:	07 fc       	sbrc	r0, 7
    190e:	05 d0       	rcall	.+10     	; 0x191a <__divmodhi4_neg2>
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__divmodhi4_exit>

00001912 <__divmodhi4_neg1>:
    1912:	90 95       	com	r25
    1914:	81 95       	neg	r24
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__divmodhi4_neg2>:
    191a:	70 95       	com	r23
    191c:	61 95       	neg	r22
    191e:	7f 4f       	sbci	r23, 0xFF	; 255

00001920 <__divmodhi4_exit>:
    1920:	08 95       	ret

00001922 <__udivmodhi4>:
    1922:	aa 1b       	sub	r26, r26
    1924:	bb 1b       	sub	r27, r27
    1926:	51 e1       	ldi	r21, 0x11	; 17
    1928:	07 c0       	rjmp	.+14     	; 0x1938 <__udivmodhi4_ep>

0000192a <__udivmodhi4_loop>:
    192a:	aa 1f       	adc	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	a6 17       	cp	r26, r22
    1930:	b7 07       	cpc	r27, r23
    1932:	10 f0       	brcs	.+4      	; 0x1938 <__udivmodhi4_ep>
    1934:	a6 1b       	sub	r26, r22
    1936:	b7 0b       	sbc	r27, r23

00001938 <__udivmodhi4_ep>:
    1938:	88 1f       	adc	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	5a 95       	dec	r21
    193e:	a9 f7       	brne	.-22     	; 0x192a <__udivmodhi4_loop>
    1940:	80 95       	com	r24
    1942:	90 95       	com	r25
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	08 95       	ret

0000194a <malloc>:
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	91 05       	cpc	r25, r1
    1952:	10 f4       	brcc	.+4      	; 0x1958 <malloc+0xe>
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	e0 91 42 02 	lds	r30, 0x0242
    195c:	f0 91 43 02 	lds	r31, 0x0243
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	a0 e0       	ldi	r26, 0x00	; 0
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	30 97       	sbiw	r30, 0x00	; 0
    196a:	39 f1       	breq	.+78     	; 0x19ba <malloc+0x70>
    196c:	40 81       	ld	r20, Z
    196e:	51 81       	ldd	r21, Z+1	; 0x01
    1970:	48 17       	cp	r20, r24
    1972:	59 07       	cpc	r21, r25
    1974:	b8 f0       	brcs	.+46     	; 0x19a4 <malloc+0x5a>
    1976:	48 17       	cp	r20, r24
    1978:	59 07       	cpc	r21, r25
    197a:	71 f4       	brne	.+28     	; 0x1998 <malloc+0x4e>
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	10 97       	sbiw	r26, 0x00	; 0
    1982:	29 f0       	breq	.+10     	; 0x198e <malloc+0x44>
    1984:	13 96       	adiw	r26, 0x03	; 3
    1986:	9c 93       	st	X, r25
    1988:	8e 93       	st	-X, r24
    198a:	12 97       	sbiw	r26, 0x02	; 2
    198c:	2c c0       	rjmp	.+88     	; 0x19e6 <malloc+0x9c>
    198e:	90 93 43 02 	sts	0x0243, r25
    1992:	80 93 42 02 	sts	0x0242, r24
    1996:	27 c0       	rjmp	.+78     	; 0x19e6 <malloc+0x9c>
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	31 f0       	breq	.+12     	; 0x19aa <malloc+0x60>
    199e:	42 17       	cp	r20, r18
    19a0:	53 07       	cpc	r21, r19
    19a2:	18 f0       	brcs	.+6      	; 0x19aa <malloc+0x60>
    19a4:	a9 01       	movw	r20, r18
    19a6:	db 01       	movw	r26, r22
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <malloc+0x62>
    19aa:	ef 01       	movw	r28, r30
    19ac:	9a 01       	movw	r18, r20
    19ae:	bd 01       	movw	r22, r26
    19b0:	df 01       	movw	r26, r30
    19b2:	02 80       	ldd	r0, Z+2	; 0x02
    19b4:	f3 81       	ldd	r31, Z+3	; 0x03
    19b6:	e0 2d       	mov	r30, r0
    19b8:	d7 cf       	rjmp	.-82     	; 0x1968 <malloc+0x1e>
    19ba:	21 15       	cp	r18, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	f9 f0       	breq	.+62     	; 0x19fe <malloc+0xb4>
    19c0:	28 1b       	sub	r18, r24
    19c2:	39 0b       	sbc	r19, r25
    19c4:	24 30       	cpi	r18, 0x04	; 4
    19c6:	31 05       	cpc	r19, r1
    19c8:	80 f4       	brcc	.+32     	; 0x19ea <malloc+0xa0>
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	21 f0       	breq	.+8      	; 0x19dc <malloc+0x92>
    19d4:	fb 01       	movw	r30, r22
    19d6:	93 83       	std	Z+3, r25	; 0x03
    19d8:	82 83       	std	Z+2, r24	; 0x02
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <malloc+0x9a>
    19dc:	90 93 43 02 	sts	0x0243, r25
    19e0:	80 93 42 02 	sts	0x0242, r24
    19e4:	fe 01       	movw	r30, r28
    19e6:	32 96       	adiw	r30, 0x02	; 2
    19e8:	44 c0       	rjmp	.+136    	; 0x1a72 <malloc+0x128>
    19ea:	fe 01       	movw	r30, r28
    19ec:	e2 0f       	add	r30, r18
    19ee:	f3 1f       	adc	r31, r19
    19f0:	81 93       	st	Z+, r24
    19f2:	91 93       	st	Z+, r25
    19f4:	22 50       	subi	r18, 0x02	; 2
    19f6:	31 09       	sbc	r19, r1
    19f8:	39 83       	std	Y+1, r19	; 0x01
    19fa:	28 83       	st	Y, r18
    19fc:	3a c0       	rjmp	.+116    	; 0x1a72 <malloc+0x128>
    19fe:	20 91 40 02 	lds	r18, 0x0240
    1a02:	30 91 41 02 	lds	r19, 0x0241
    1a06:	23 2b       	or	r18, r19
    1a08:	41 f4       	brne	.+16     	; 0x1a1a <malloc+0xd0>
    1a0a:	20 91 02 01 	lds	r18, 0x0102
    1a0e:	30 91 03 01 	lds	r19, 0x0103
    1a12:	30 93 41 02 	sts	0x0241, r19
    1a16:	20 93 40 02 	sts	0x0240, r18
    1a1a:	20 91 00 01 	lds	r18, 0x0100
    1a1e:	30 91 01 01 	lds	r19, 0x0101
    1a22:	21 15       	cp	r18, r1
    1a24:	31 05       	cpc	r19, r1
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <malloc+0xee>
    1a28:	2d b7       	in	r18, 0x3d	; 61
    1a2a:	3e b7       	in	r19, 0x3e	; 62
    1a2c:	40 91 04 01 	lds	r20, 0x0104
    1a30:	50 91 05 01 	lds	r21, 0x0105
    1a34:	24 1b       	sub	r18, r20
    1a36:	35 0b       	sbc	r19, r21
    1a38:	e0 91 40 02 	lds	r30, 0x0240
    1a3c:	f0 91 41 02 	lds	r31, 0x0241
    1a40:	e2 17       	cp	r30, r18
    1a42:	f3 07       	cpc	r31, r19
    1a44:	a0 f4       	brcc	.+40     	; 0x1a6e <malloc+0x124>
    1a46:	2e 1b       	sub	r18, r30
    1a48:	3f 0b       	sbc	r19, r31
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	78 f0       	brcs	.+30     	; 0x1a6e <malloc+0x124>
    1a50:	ac 01       	movw	r20, r24
    1a52:	4e 5f       	subi	r20, 0xFE	; 254
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	24 17       	cp	r18, r20
    1a58:	35 07       	cpc	r19, r21
    1a5a:	48 f0       	brcs	.+18     	; 0x1a6e <malloc+0x124>
    1a5c:	4e 0f       	add	r20, r30
    1a5e:	5f 1f       	adc	r21, r31
    1a60:	50 93 41 02 	sts	0x0241, r21
    1a64:	40 93 40 02 	sts	0x0240, r20
    1a68:	81 93       	st	Z+, r24
    1a6a:	91 93       	st	Z+, r25
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <malloc+0x128>
    1a6e:	e0 e0       	ldi	r30, 0x00	; 0
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	cf 01       	movw	r24, r30
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <free>:
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <free+0xa>
    1a82:	87 c0       	rjmp	.+270    	; 0x1b92 <free+0x118>
    1a84:	fc 01       	movw	r30, r24
    1a86:	32 97       	sbiw	r30, 0x02	; 2
    1a88:	13 82       	std	Z+3, r1	; 0x03
    1a8a:	12 82       	std	Z+2, r1	; 0x02
    1a8c:	c0 91 42 02 	lds	r28, 0x0242
    1a90:	d0 91 43 02 	lds	r29, 0x0243
    1a94:	20 97       	sbiw	r28, 0x00	; 0
    1a96:	81 f4       	brne	.+32     	; 0x1ab8 <free+0x3e>
    1a98:	20 81       	ld	r18, Z
    1a9a:	31 81       	ldd	r19, Z+1	; 0x01
    1a9c:	28 0f       	add	r18, r24
    1a9e:	39 1f       	adc	r19, r25
    1aa0:	80 91 40 02 	lds	r24, 0x0240
    1aa4:	90 91 41 02 	lds	r25, 0x0241
    1aa8:	82 17       	cp	r24, r18
    1aaa:	93 07       	cpc	r25, r19
    1aac:	79 f5       	brne	.+94     	; 0x1b0c <free+0x92>
    1aae:	f0 93 41 02 	sts	0x0241, r31
    1ab2:	e0 93 40 02 	sts	0x0240, r30
    1ab6:	6d c0       	rjmp	.+218    	; 0x1b92 <free+0x118>
    1ab8:	de 01       	movw	r26, r28
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	ae 17       	cp	r26, r30
    1ac0:	bf 07       	cpc	r27, r31
    1ac2:	50 f4       	brcc	.+20     	; 0x1ad8 <free+0x5e>
    1ac4:	12 96       	adiw	r26, 0x02	; 2
    1ac6:	4d 91       	ld	r20, X+
    1ac8:	5c 91       	ld	r21, X
    1aca:	13 97       	sbiw	r26, 0x03	; 3
    1acc:	9d 01       	movw	r18, r26
    1ace:	41 15       	cp	r20, r1
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	09 f1       	breq	.+66     	; 0x1b16 <free+0x9c>
    1ad4:	da 01       	movw	r26, r20
    1ad6:	f3 cf       	rjmp	.-26     	; 0x1abe <free+0x44>
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	40 81       	ld	r20, Z
    1ade:	51 81       	ldd	r21, Z+1	; 0x01
    1ae0:	84 0f       	add	r24, r20
    1ae2:	95 1f       	adc	r25, r21
    1ae4:	8a 17       	cp	r24, r26
    1ae6:	9b 07       	cpc	r25, r27
    1ae8:	71 f4       	brne	.+28     	; 0x1b06 <free+0x8c>
    1aea:	8d 91       	ld	r24, X+
    1aec:	9c 91       	ld	r25, X
    1aee:	11 97       	sbiw	r26, 0x01	; 1
    1af0:	84 0f       	add	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	02 96       	adiw	r24, 0x02	; 2
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	93 83       	std	Z+3, r25	; 0x03
    1b04:	82 83       	std	Z+2, r24	; 0x02
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	29 f4       	brne	.+10     	; 0x1b16 <free+0x9c>
    1b0c:	f0 93 43 02 	sts	0x0243, r31
    1b10:	e0 93 42 02 	sts	0x0242, r30
    1b14:	3e c0       	rjmp	.+124    	; 0x1b92 <free+0x118>
    1b16:	d9 01       	movw	r26, r18
    1b18:	13 96       	adiw	r26, 0x03	; 3
    1b1a:	fc 93       	st	X, r31
    1b1c:	ee 93       	st	-X, r30
    1b1e:	12 97       	sbiw	r26, 0x02	; 2
    1b20:	4d 91       	ld	r20, X+
    1b22:	5d 91       	ld	r21, X+
    1b24:	a4 0f       	add	r26, r20
    1b26:	b5 1f       	adc	r27, r21
    1b28:	ea 17       	cp	r30, r26
    1b2a:	fb 07       	cpc	r31, r27
    1b2c:	79 f4       	brne	.+30     	; 0x1b4c <free+0xd2>
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	84 0f       	add	r24, r20
    1b34:	95 1f       	adc	r25, r21
    1b36:	02 96       	adiw	r24, 0x02	; 2
    1b38:	d9 01       	movw	r26, r18
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	13 96       	adiw	r26, 0x03	; 3
    1b46:	9c 93       	st	X, r25
    1b48:	8e 93       	st	-X, r24
    1b4a:	12 97       	sbiw	r26, 0x02	; 2
    1b4c:	e0 e0       	ldi	r30, 0x00	; 0
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <free+0xe4>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	f9 cf       	rjmp	.-14     	; 0x1b50 <free+0xd6>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	28 81       	ld	r18, Y
    1b64:	39 81       	ldd	r19, Y+1	; 0x01
    1b66:	82 0f       	add	r24, r18
    1b68:	93 1f       	adc	r25, r19
    1b6a:	20 91 40 02 	lds	r18, 0x0240
    1b6e:	30 91 41 02 	lds	r19, 0x0241
    1b72:	28 17       	cp	r18, r24
    1b74:	39 07       	cpc	r19, r25
    1b76:	69 f4       	brne	.+26     	; 0x1b92 <free+0x118>
    1b78:	30 97       	sbiw	r30, 0x00	; 0
    1b7a:	29 f4       	brne	.+10     	; 0x1b86 <free+0x10c>
    1b7c:	10 92 43 02 	sts	0x0243, r1
    1b80:	10 92 42 02 	sts	0x0242, r1
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <free+0x110>
    1b86:	13 82       	std	Z+3, r1	; 0x03
    1b88:	12 82       	std	Z+2, r1	; 0x02
    1b8a:	d0 93 41 02 	sts	0x0241, r29
    1b8e:	c0 93 40 02 	sts	0x0240, r28
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <do_rand>:
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	ec 01       	movw	r28, r24
    1bae:	68 81       	ld	r22, Y
    1bb0:	79 81       	ldd	r23, Y+1	; 0x01
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	61 15       	cp	r22, r1
    1bb8:	71 05       	cpc	r23, r1
    1bba:	81 05       	cpc	r24, r1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <do_rand+0x30>
    1bc0:	64 e2       	ldi	r22, 0x24	; 36
    1bc2:	79 ed       	ldi	r23, 0xD9	; 217
    1bc4:	8b e5       	ldi	r24, 0x5B	; 91
    1bc6:	97 e0       	ldi	r25, 0x07	; 7
    1bc8:	2d e1       	ldi	r18, 0x1D	; 29
    1bca:	33 ef       	ldi	r19, 0xF3	; 243
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	7f d3       	rcall	.+1790   	; 0x22d0 <__divmodsi4>
    1bd2:	49 01       	movw	r8, r18
    1bd4:	5a 01       	movw	r10, r20
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	a7 ea       	ldi	r26, 0xA7	; 167
    1bdc:	b1 e4       	ldi	r27, 0x41	; 65
    1bde:	94 d3       	rcall	.+1832   	; 0x2308 <__muluhisi3>
    1be0:	6b 01       	movw	r12, r22
    1be2:	7c 01       	movw	r14, r24
    1be4:	ac ee       	ldi	r26, 0xEC	; 236
    1be6:	b4 ef       	ldi	r27, 0xF4	; 244
    1be8:	a5 01       	movw	r20, r10
    1bea:	94 01       	movw	r18, r8
    1bec:	99 d3       	rcall	.+1842   	; 0x2320 <__mulohisi3>
    1bee:	c6 0e       	add	r12, r22
    1bf0:	d7 1e       	adc	r13, r23
    1bf2:	e8 1e       	adc	r14, r24
    1bf4:	f9 1e       	adc	r15, r25
    1bf6:	f7 fe       	sbrs	r15, 7
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <do_rand+0x6e>
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	c8 1a       	sub	r12, r24
    1bfe:	d1 08       	sbc	r13, r1
    1c00:	e1 08       	sbc	r14, r1
    1c02:	80 e8       	ldi	r24, 0x80	; 128
    1c04:	f8 0a       	sbc	r15, r24
    1c06:	c8 82       	st	Y, r12
    1c08:	d9 82       	std	Y+1, r13	; 0x01
    1c0a:	ea 82       	std	Y+2, r14	; 0x02
    1c0c:	fb 82       	std	Y+3, r15	; 0x03
    1c0e:	c6 01       	movw	r24, r12
    1c10:	9f 77       	andi	r25, 0x7F	; 127
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	bf 90       	pop	r11
    1c20:	af 90       	pop	r10
    1c22:	9f 90       	pop	r9
    1c24:	8f 90       	pop	r8
    1c26:	08 95       	ret

00001c28 <rand_r>:
    1c28:	b7 cf       	rjmp	.-146    	; 0x1b98 <do_rand>

00001c2a <rand>:
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	b4 cf       	rjmp	.-152    	; 0x1b98 <do_rand>

00001c30 <srand>:
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	80 93 06 01 	sts	0x0106, r24
    1c38:	90 93 07 01 	sts	0x0107, r25
    1c3c:	a0 93 08 01 	sts	0x0108, r26
    1c40:	b0 93 09 01 	sts	0x0109, r27
    1c44:	08 95       	ret

00001c46 <__itoa_ncheck>:
    1c46:	bb 27       	eor	r27, r27
    1c48:	4a 30       	cpi	r20, 0x0A	; 10
    1c4a:	31 f4       	brne	.+12     	; 0x1c58 <__itoa_ncheck+0x12>
    1c4c:	99 23       	and	r25, r25
    1c4e:	22 f4       	brpl	.+8      	; 0x1c58 <__itoa_ncheck+0x12>
    1c50:	bd e2       	ldi	r27, 0x2D	; 45
    1c52:	90 95       	com	r25
    1c54:	81 95       	neg	r24
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <__utoa_common>

00001c5a <__utoa_ncheck>:
    1c5a:	bb 27       	eor	r27, r27

00001c5c <__utoa_common>:
    1c5c:	fb 01       	movw	r30, r22
    1c5e:	55 27       	eor	r21, r21
    1c60:	aa 27       	eor	r26, r26
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	aa 1f       	adc	r26, r26
    1c68:	a4 17       	cp	r26, r20
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <__utoa_common+0x14>
    1c6c:	a4 1b       	sub	r26, r20
    1c6e:	83 95       	inc	r24
    1c70:	50 51       	subi	r21, 0x10	; 16
    1c72:	b9 f7       	brne	.-18     	; 0x1c62 <__utoa_common+0x6>
    1c74:	a0 5d       	subi	r26, 0xD0	; 208
    1c76:	aa 33       	cpi	r26, 0x3A	; 58
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <__utoa_common+0x20>
    1c7a:	a9 5d       	subi	r26, 0xD9	; 217
    1c7c:	a1 93       	st	Z+, r26
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	79 f7       	brne	.-34     	; 0x1c60 <__utoa_common+0x4>
    1c82:	b1 11       	cpse	r27, r1
    1c84:	b1 93       	st	Z+, r27
    1c86:	11 92       	st	Z+, r1
    1c88:	cb 01       	movw	r24, r22
    1c8a:	82 c2       	rjmp	.+1284   	; 0x2190 <strrev>

00001c8c <fdevopen>:
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
    1c96:	8b 01       	movw	r16, r22
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	31 f4       	brne	.+12     	; 0x1ca8 <fdevopen+0x1c>
    1c9c:	61 15       	cp	r22, r1
    1c9e:	71 05       	cpc	r23, r1
    1ca0:	19 f4       	brne	.+6      	; 0x1ca8 <fdevopen+0x1c>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	37 c0       	rjmp	.+110    	; 0x1d16 <fdevopen+0x8a>
    1ca8:	6e e0       	ldi	r22, 0x0E	; 14
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	38 d2       	rcall	.+1136   	; 0x2122 <calloc>
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	a9 f3       	breq	.-22     	; 0x1ca2 <fdevopen+0x16>
    1cb8:	80 e8       	ldi	r24, 0x80	; 128
    1cba:	83 83       	std	Z+3, r24	; 0x03
    1cbc:	01 15       	cp	r16, r1
    1cbe:	11 05       	cpc	r17, r1
    1cc0:	71 f0       	breq	.+28     	; 0x1cde <fdevopen+0x52>
    1cc2:	13 87       	std	Z+11, r17	; 0x0b
    1cc4:	02 87       	std	Z+10, r16	; 0x0a
    1cc6:	81 e8       	ldi	r24, 0x81	; 129
    1cc8:	83 83       	std	Z+3, r24	; 0x03
    1cca:	80 91 44 02 	lds	r24, 0x0244
    1cce:	90 91 45 02 	lds	r25, 0x0245
    1cd2:	89 2b       	or	r24, r25
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <fdevopen+0x52>
    1cd6:	f0 93 45 02 	sts	0x0245, r31
    1cda:	e0 93 44 02 	sts	0x0244, r30
    1cde:	20 97       	sbiw	r28, 0x00	; 0
    1ce0:	c9 f0       	breq	.+50     	; 0x1d14 <fdevopen+0x88>
    1ce2:	d1 87       	std	Z+9, r29	; 0x09
    1ce4:	c0 87       	std	Z+8, r28	; 0x08
    1ce6:	83 81       	ldd	r24, Z+3	; 0x03
    1ce8:	82 60       	ori	r24, 0x02	; 2
    1cea:	83 83       	std	Z+3, r24	; 0x03
    1cec:	80 91 46 02 	lds	r24, 0x0246
    1cf0:	90 91 47 02 	lds	r25, 0x0247
    1cf4:	89 2b       	or	r24, r25
    1cf6:	71 f4       	brne	.+28     	; 0x1d14 <fdevopen+0x88>
    1cf8:	f0 93 47 02 	sts	0x0247, r31
    1cfc:	e0 93 46 02 	sts	0x0246, r30
    1d00:	80 91 48 02 	lds	r24, 0x0248
    1d04:	90 91 49 02 	lds	r25, 0x0249
    1d08:	89 2b       	or	r24, r25
    1d0a:	21 f4       	brne	.+8      	; 0x1d14 <fdevopen+0x88>
    1d0c:	f0 93 49 02 	sts	0x0249, r31
    1d10:	e0 93 48 02 	sts	0x0248, r30
    1d14:	cf 01       	movw	r24, r30
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <printf>:
    1d20:	a0 e0       	ldi	r26, 0x00	; 0
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e5 e9       	ldi	r30, 0x95	; 149
    1d26:	fe e0       	ldi	r31, 0x0E	; 14
    1d28:	0f c3       	rjmp	.+1566   	; 0x2348 <__prologue_saves__+0x20>
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	35 96       	adiw	r30, 0x05	; 5
    1d2e:	61 91       	ld	r22, Z+
    1d30:	71 91       	ld	r23, Z+
    1d32:	af 01       	movw	r20, r30
    1d34:	80 91 46 02 	lds	r24, 0x0246
    1d38:	90 91 47 02 	lds	r25, 0x0247
    1d3c:	2f d0       	rcall	.+94     	; 0x1d9c <vfprintf>
    1d3e:	e2 e0       	ldi	r30, 0x02	; 2
    1d40:	1f c3       	rjmp	.+1598   	; 0x2380 <__epilogue_restores__+0x20>

00001d42 <puts>:
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	e0 91 46 02 	lds	r30, 0x0246
    1d4e:	f0 91 47 02 	lds	r31, 0x0247
    1d52:	23 81       	ldd	r18, Z+3	; 0x03
    1d54:	21 ff       	sbrs	r18, 1
    1d56:	1b c0       	rjmp	.+54     	; 0x1d8e <puts+0x4c>
    1d58:	ec 01       	movw	r28, r24
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	89 91       	ld	r24, Y+
    1d60:	60 91 46 02 	lds	r22, 0x0246
    1d64:	70 91 47 02 	lds	r23, 0x0247
    1d68:	db 01       	movw	r26, r22
    1d6a:	18 96       	adiw	r26, 0x08	; 8
    1d6c:	ed 91       	ld	r30, X+
    1d6e:	fc 91       	ld	r31, X
    1d70:	19 97       	sbiw	r26, 0x09	; 9
    1d72:	88 23       	and	r24, r24
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <puts+0x40>
    1d76:	09 95       	icall
    1d78:	89 2b       	or	r24, r25
    1d7a:	89 f3       	breq	.-30     	; 0x1d5e <puts+0x1c>
    1d7c:	0f ef       	ldi	r16, 0xFF	; 255
    1d7e:	1f ef       	ldi	r17, 0xFF	; 255
    1d80:	ee cf       	rjmp	.-36     	; 0x1d5e <puts+0x1c>
    1d82:	8a e0       	ldi	r24, 0x0A	; 10
    1d84:	09 95       	icall
    1d86:	89 2b       	or	r24, r25
    1d88:	11 f4       	brne	.+4      	; 0x1d8e <puts+0x4c>
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <puts+0x50>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <vfprintf>:
    1d9c:	ac e0       	ldi	r26, 0x0C	; 12
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e3 ed       	ldi	r30, 0xD3	; 211
    1da2:	fe e0       	ldi	r31, 0x0E	; 14
    1da4:	c1 c2       	rjmp	.+1410   	; 0x2328 <__prologue_saves__>
    1da6:	7c 01       	movw	r14, r24
    1da8:	6b 01       	movw	r12, r22
    1daa:	8a 01       	movw	r16, r20
    1dac:	fc 01       	movw	r30, r24
    1dae:	17 82       	std	Z+7, r1	; 0x07
    1db0:	16 82       	std	Z+6, r1	; 0x06
    1db2:	83 81       	ldd	r24, Z+3	; 0x03
    1db4:	81 ff       	sbrs	r24, 1
    1db6:	b0 c1       	rjmp	.+864    	; 0x2118 <vfprintf+0x37c>
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	4c 01       	movw	r8, r24
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	f6 01       	movw	r30, r12
    1dc4:	93 fd       	sbrc	r25, 3
    1dc6:	85 91       	lpm	r24, Z+
    1dc8:	93 ff       	sbrs	r25, 3
    1dca:	81 91       	ld	r24, Z+
    1dcc:	6f 01       	movw	r12, r30
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <vfprintf+0x38>
    1dd2:	9e c1       	rjmp	.+828    	; 0x2110 <vfprintf+0x374>
    1dd4:	85 32       	cpi	r24, 0x25	; 37
    1dd6:	39 f4       	brne	.+14     	; 0x1de6 <vfprintf+0x4a>
    1dd8:	93 fd       	sbrc	r25, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	93 ff       	sbrs	r25, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	6f 01       	movw	r12, r30
    1de2:	85 32       	cpi	r24, 0x25	; 37
    1de4:	21 f4       	brne	.+8      	; 0x1dee <vfprintf+0x52>
    1de6:	b7 01       	movw	r22, r14
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	e2 d1       	rcall	.+964    	; 0x21b0 <fputc>
    1dec:	e8 cf       	rjmp	.-48     	; 0x1dbe <vfprintf+0x22>
    1dee:	51 2c       	mov	r5, r1
    1df0:	31 2c       	mov	r3, r1
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	20 32       	cpi	r18, 0x20	; 32
    1df6:	a0 f4       	brcc	.+40     	; 0x1e20 <vfprintf+0x84>
    1df8:	8b 32       	cpi	r24, 0x2B	; 43
    1dfa:	69 f0       	breq	.+26     	; 0x1e16 <vfprintf+0x7a>
    1dfc:	30 f4       	brcc	.+12     	; 0x1e0a <vfprintf+0x6e>
    1dfe:	80 32       	cpi	r24, 0x20	; 32
    1e00:	59 f0       	breq	.+22     	; 0x1e18 <vfprintf+0x7c>
    1e02:	83 32       	cpi	r24, 0x23	; 35
    1e04:	69 f4       	brne	.+26     	; 0x1e20 <vfprintf+0x84>
    1e06:	20 61       	ori	r18, 0x10	; 16
    1e08:	2c c0       	rjmp	.+88     	; 0x1e62 <vfprintf+0xc6>
    1e0a:	8d 32       	cpi	r24, 0x2D	; 45
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <vfprintf+0x80>
    1e0e:	80 33       	cpi	r24, 0x30	; 48
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <vfprintf+0x84>
    1e12:	21 60       	ori	r18, 0x01	; 1
    1e14:	26 c0       	rjmp	.+76     	; 0x1e62 <vfprintf+0xc6>
    1e16:	22 60       	ori	r18, 0x02	; 2
    1e18:	24 60       	ori	r18, 0x04	; 4
    1e1a:	23 c0       	rjmp	.+70     	; 0x1e62 <vfprintf+0xc6>
    1e1c:	28 60       	ori	r18, 0x08	; 8
    1e1e:	21 c0       	rjmp	.+66     	; 0x1e62 <vfprintf+0xc6>
    1e20:	27 fd       	sbrc	r18, 7
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <vfprintf+0xd6>
    1e24:	30 ed       	ldi	r19, 0xD0	; 208
    1e26:	38 0f       	add	r19, r24
    1e28:	3a 30       	cpi	r19, 0x0A	; 10
    1e2a:	78 f4       	brcc	.+30     	; 0x1e4a <vfprintf+0xae>
    1e2c:	26 ff       	sbrs	r18, 6
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0xa0>
    1e30:	fa e0       	ldi	r31, 0x0A	; 10
    1e32:	5f 9e       	mul	r5, r31
    1e34:	30 0d       	add	r19, r0
    1e36:	11 24       	eor	r1, r1
    1e38:	53 2e       	mov	r5, r19
    1e3a:	13 c0       	rjmp	.+38     	; 0x1e62 <vfprintf+0xc6>
    1e3c:	8a e0       	ldi	r24, 0x0A	; 10
    1e3e:	38 9e       	mul	r3, r24
    1e40:	30 0d       	add	r19, r0
    1e42:	11 24       	eor	r1, r1
    1e44:	33 2e       	mov	r3, r19
    1e46:	20 62       	ori	r18, 0x20	; 32
    1e48:	0c c0       	rjmp	.+24     	; 0x1e62 <vfprintf+0xc6>
    1e4a:	8e 32       	cpi	r24, 0x2E	; 46
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <vfprintf+0xba>
    1e4e:	26 fd       	sbrc	r18, 6
    1e50:	5f c1       	rjmp	.+702    	; 0x2110 <vfprintf+0x374>
    1e52:	20 64       	ori	r18, 0x40	; 64
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <vfprintf+0xc6>
    1e56:	8c 36       	cpi	r24, 0x6C	; 108
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <vfprintf+0xc2>
    1e5a:	20 68       	ori	r18, 0x80	; 128
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <vfprintf+0xc6>
    1e5e:	88 36       	cpi	r24, 0x68	; 104
    1e60:	41 f4       	brne	.+16     	; 0x1e72 <vfprintf+0xd6>
    1e62:	f6 01       	movw	r30, r12
    1e64:	93 fd       	sbrc	r25, 3
    1e66:	85 91       	lpm	r24, Z+
    1e68:	93 ff       	sbrs	r25, 3
    1e6a:	81 91       	ld	r24, Z+
    1e6c:	6f 01       	movw	r12, r30
    1e6e:	81 11       	cpse	r24, r1
    1e70:	c1 cf       	rjmp	.-126    	; 0x1df4 <vfprintf+0x58>
    1e72:	98 2f       	mov	r25, r24
    1e74:	9f 7d       	andi	r25, 0xDF	; 223
    1e76:	95 54       	subi	r25, 0x45	; 69
    1e78:	93 30       	cpi	r25, 0x03	; 3
    1e7a:	28 f4       	brcc	.+10     	; 0x1e86 <vfprintf+0xea>
    1e7c:	0c 5f       	subi	r16, 0xFC	; 252
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ff e3       	ldi	r31, 0x3F	; 63
    1e82:	f9 83       	std	Y+1, r31	; 0x01
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <vfprintf+0x104>
    1e86:	83 36       	cpi	r24, 0x63	; 99
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <vfprintf+0xfa>
    1e8a:	83 37       	cpi	r24, 0x73	; 115
    1e8c:	71 f0       	breq	.+28     	; 0x1eaa <vfprintf+0x10e>
    1e8e:	83 35       	cpi	r24, 0x53	; 83
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <vfprintf+0xf8>
    1e92:	57 c0       	rjmp	.+174    	; 0x1f42 <vfprintf+0x1a6>
    1e94:	21 c0       	rjmp	.+66     	; 0x1ed8 <vfprintf+0x13c>
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 81       	ld	r24, Z
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	0e 5f       	subi	r16, 0xFE	; 254
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	44 24       	eor	r4, r4
    1ea2:	43 94       	inc	r4
    1ea4:	51 2c       	mov	r5, r1
    1ea6:	54 01       	movw	r10, r8
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <vfprintf+0x136>
    1eaa:	38 01       	movw	r6, r16
    1eac:	f2 e0       	ldi	r31, 0x02	; 2
    1eae:	6f 0e       	add	r6, r31
    1eb0:	71 1c       	adc	r7, r1
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	a0 80       	ld	r10, Z
    1eb6:	b1 80       	ldd	r11, Z+1	; 0x01
    1eb8:	26 ff       	sbrs	r18, 6
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <vfprintf+0x126>
    1ebc:	65 2d       	mov	r22, r5
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x12a>
    1ec2:	6f ef       	ldi	r22, 0xFF	; 255
    1ec4:	7f ef       	ldi	r23, 0xFF	; 255
    1ec6:	c5 01       	movw	r24, r10
    1ec8:	2c 87       	std	Y+12, r18	; 0x0c
    1eca:	57 d1       	rcall	.+686    	; 0x217a <strnlen>
    1ecc:	2c 01       	movw	r4, r24
    1ece:	83 01       	movw	r16, r6
    1ed0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed2:	2f 77       	andi	r18, 0x7F	; 127
    1ed4:	22 2e       	mov	r2, r18
    1ed6:	16 c0       	rjmp	.+44     	; 0x1f04 <vfprintf+0x168>
    1ed8:	38 01       	movw	r6, r16
    1eda:	f2 e0       	ldi	r31, 0x02	; 2
    1edc:	6f 0e       	add	r6, r31
    1ede:	71 1c       	adc	r7, r1
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	a0 80       	ld	r10, Z
    1ee4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ee6:	26 ff       	sbrs	r18, 6
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <vfprintf+0x154>
    1eea:	65 2d       	mov	r22, r5
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <vfprintf+0x158>
    1ef0:	6f ef       	ldi	r22, 0xFF	; 255
    1ef2:	7f ef       	ldi	r23, 0xFF	; 255
    1ef4:	c5 01       	movw	r24, r10
    1ef6:	2c 87       	std	Y+12, r18	; 0x0c
    1ef8:	2e d1       	rcall	.+604    	; 0x2156 <strnlen_P>
    1efa:	2c 01       	movw	r4, r24
    1efc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1efe:	20 68       	ori	r18, 0x80	; 128
    1f00:	22 2e       	mov	r2, r18
    1f02:	83 01       	movw	r16, r6
    1f04:	23 fc       	sbrc	r2, 3
    1f06:	19 c0       	rjmp	.+50     	; 0x1f3a <vfprintf+0x19e>
    1f08:	83 2d       	mov	r24, r3
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	48 16       	cp	r4, r24
    1f0e:	59 06       	cpc	r5, r25
    1f10:	a0 f4       	brcc	.+40     	; 0x1f3a <vfprintf+0x19e>
    1f12:	b7 01       	movw	r22, r14
    1f14:	80 e2       	ldi	r24, 0x20	; 32
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	4b d1       	rcall	.+662    	; 0x21b0 <fputc>
    1f1a:	3a 94       	dec	r3
    1f1c:	f5 cf       	rjmp	.-22     	; 0x1f08 <vfprintf+0x16c>
    1f1e:	f5 01       	movw	r30, r10
    1f20:	27 fc       	sbrc	r2, 7
    1f22:	85 91       	lpm	r24, Z+
    1f24:	27 fe       	sbrs	r2, 7
    1f26:	81 91       	ld	r24, Z+
    1f28:	5f 01       	movw	r10, r30
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	40 d1       	rcall	.+640    	; 0x21b0 <fputc>
    1f30:	31 10       	cpse	r3, r1
    1f32:	3a 94       	dec	r3
    1f34:	f1 e0       	ldi	r31, 0x01	; 1
    1f36:	4f 1a       	sub	r4, r31
    1f38:	51 08       	sbc	r5, r1
    1f3a:	41 14       	cp	r4, r1
    1f3c:	51 04       	cpc	r5, r1
    1f3e:	79 f7       	brne	.-34     	; 0x1f1e <vfprintf+0x182>
    1f40:	de c0       	rjmp	.+444    	; 0x20fe <vfprintf+0x362>
    1f42:	84 36       	cpi	r24, 0x64	; 100
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <vfprintf+0x1ae>
    1f46:	89 36       	cpi	r24, 0x69	; 105
    1f48:	31 f5       	brne	.+76     	; 0x1f96 <vfprintf+0x1fa>
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	27 ff       	sbrs	r18, 7
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <vfprintf+0x1c2>
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	0c 5f       	subi	r16, 0xFC	; 252
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	08 c0       	rjmp	.+16     	; 0x1f6e <vfprintf+0x1d2>
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	88 27       	eor	r24, r24
    1f64:	77 fd       	sbrc	r23, 7
    1f66:	80 95       	com	r24
    1f68:	98 2f       	mov	r25, r24
    1f6a:	0e 5f       	subi	r16, 0xFE	; 254
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	2f 76       	andi	r18, 0x6F	; 111
    1f70:	b2 2e       	mov	r11, r18
    1f72:	97 ff       	sbrs	r25, 7
    1f74:	09 c0       	rjmp	.+18     	; 0x1f88 <vfprintf+0x1ec>
    1f76:	90 95       	com	r25
    1f78:	80 95       	com	r24
    1f7a:	70 95       	com	r23
    1f7c:	61 95       	neg	r22
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	8f 4f       	sbci	r24, 0xFF	; 255
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	20 68       	ori	r18, 0x80	; 128
    1f86:	b2 2e       	mov	r11, r18
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	a4 01       	movw	r20, r8
    1f8e:	42 d1       	rcall	.+644    	; 0x2214 <__ultoa_invert>
    1f90:	a8 2e       	mov	r10, r24
    1f92:	a8 18       	sub	r10, r8
    1f94:	43 c0       	rjmp	.+134    	; 0x201c <vfprintf+0x280>
    1f96:	85 37       	cpi	r24, 0x75	; 117
    1f98:	29 f4       	brne	.+10     	; 0x1fa4 <vfprintf+0x208>
    1f9a:	2f 7e       	andi	r18, 0xEF	; 239
    1f9c:	b2 2e       	mov	r11, r18
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	25 c0       	rjmp	.+74     	; 0x1fee <vfprintf+0x252>
    1fa4:	f2 2f       	mov	r31, r18
    1fa6:	f9 7f       	andi	r31, 0xF9	; 249
    1fa8:	bf 2e       	mov	r11, r31
    1faa:	8f 36       	cpi	r24, 0x6F	; 111
    1fac:	c1 f0       	breq	.+48     	; 0x1fde <vfprintf+0x242>
    1fae:	18 f4       	brcc	.+6      	; 0x1fb6 <vfprintf+0x21a>
    1fb0:	88 35       	cpi	r24, 0x58	; 88
    1fb2:	79 f0       	breq	.+30     	; 0x1fd2 <vfprintf+0x236>
    1fb4:	ad c0       	rjmp	.+346    	; 0x2110 <vfprintf+0x374>
    1fb6:	80 37       	cpi	r24, 0x70	; 112
    1fb8:	19 f0       	breq	.+6      	; 0x1fc0 <vfprintf+0x224>
    1fba:	88 37       	cpi	r24, 0x78	; 120
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <vfprintf+0x22a>
    1fbe:	a8 c0       	rjmp	.+336    	; 0x2110 <vfprintf+0x374>
    1fc0:	2f 2f       	mov	r18, r31
    1fc2:	20 61       	ori	r18, 0x10	; 16
    1fc4:	b2 2e       	mov	r11, r18
    1fc6:	b4 fe       	sbrs	r11, 4
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <vfprintf+0x248>
    1fca:	8b 2d       	mov	r24, r11
    1fcc:	84 60       	ori	r24, 0x04	; 4
    1fce:	b8 2e       	mov	r11, r24
    1fd0:	09 c0       	rjmp	.+18     	; 0x1fe4 <vfprintf+0x248>
    1fd2:	24 ff       	sbrs	r18, 4
    1fd4:	0a c0       	rjmp	.+20     	; 0x1fea <vfprintf+0x24e>
    1fd6:	9f 2f       	mov	r25, r31
    1fd8:	96 60       	ori	r25, 0x06	; 6
    1fda:	b9 2e       	mov	r11, r25
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <vfprintf+0x24e>
    1fde:	28 e0       	ldi	r18, 0x08	; 8
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <vfprintf+0x252>
    1fe4:	20 e1       	ldi	r18, 0x10	; 16
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <vfprintf+0x252>
    1fea:	20 e1       	ldi	r18, 0x10	; 16
    1fec:	32 e0       	ldi	r19, 0x02	; 2
    1fee:	f8 01       	movw	r30, r16
    1ff0:	b7 fe       	sbrs	r11, 7
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <vfprintf+0x266>
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	0c 5f       	subi	r16, 0xFC	; 252
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	06 c0       	rjmp	.+12     	; 0x200e <vfprintf+0x272>
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 5f       	subi	r16, 0xFE	; 254
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	a4 01       	movw	r20, r8
    2010:	01 d1       	rcall	.+514    	; 0x2214 <__ultoa_invert>
    2012:	a8 2e       	mov	r10, r24
    2014:	a8 18       	sub	r10, r8
    2016:	fb 2d       	mov	r31, r11
    2018:	ff 77       	andi	r31, 0x7F	; 127
    201a:	bf 2e       	mov	r11, r31
    201c:	b6 fe       	sbrs	r11, 6
    201e:	0b c0       	rjmp	.+22     	; 0x2036 <vfprintf+0x29a>
    2020:	2b 2d       	mov	r18, r11
    2022:	2e 7f       	andi	r18, 0xFE	; 254
    2024:	a5 14       	cp	r10, r5
    2026:	50 f4       	brcc	.+20     	; 0x203c <vfprintf+0x2a0>
    2028:	b4 fe       	sbrs	r11, 4
    202a:	0a c0       	rjmp	.+20     	; 0x2040 <vfprintf+0x2a4>
    202c:	b2 fc       	sbrc	r11, 2
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <vfprintf+0x2a4>
    2030:	2b 2d       	mov	r18, r11
    2032:	2e 7e       	andi	r18, 0xEE	; 238
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <vfprintf+0x2a4>
    2036:	7a 2c       	mov	r7, r10
    2038:	2b 2d       	mov	r18, r11
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <vfprintf+0x2a6>
    203c:	7a 2c       	mov	r7, r10
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <vfprintf+0x2a6>
    2040:	75 2c       	mov	r7, r5
    2042:	24 ff       	sbrs	r18, 4
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <vfprintf+0x2c4>
    2046:	fe 01       	movw	r30, r28
    2048:	ea 0d       	add	r30, r10
    204a:	f1 1d       	adc	r31, r1
    204c:	80 81       	ld	r24, Z
    204e:	80 33       	cpi	r24, 0x30	; 48
    2050:	11 f4       	brne	.+4      	; 0x2056 <vfprintf+0x2ba>
    2052:	29 7e       	andi	r18, 0xE9	; 233
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x2cc>
    2056:	22 ff       	sbrs	r18, 2
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x2ca>
    205a:	73 94       	inc	r7
    205c:	73 94       	inc	r7
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <vfprintf+0x2cc>
    2060:	82 2f       	mov	r24, r18
    2062:	86 78       	andi	r24, 0x86	; 134
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x2cc>
    2066:	73 94       	inc	r7
    2068:	23 fd       	sbrc	r18, 3
    206a:	12 c0       	rjmp	.+36     	; 0x2090 <vfprintf+0x2f4>
    206c:	20 ff       	sbrs	r18, 0
    206e:	06 c0       	rjmp	.+12     	; 0x207c <vfprintf+0x2e0>
    2070:	5a 2c       	mov	r5, r10
    2072:	73 14       	cp	r7, r3
    2074:	18 f4       	brcc	.+6      	; 0x207c <vfprintf+0x2e0>
    2076:	53 0c       	add	r5, r3
    2078:	57 18       	sub	r5, r7
    207a:	73 2c       	mov	r7, r3
    207c:	73 14       	cp	r7, r3
    207e:	60 f4       	brcc	.+24     	; 0x2098 <vfprintf+0x2fc>
    2080:	b7 01       	movw	r22, r14
    2082:	80 e2       	ldi	r24, 0x20	; 32
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	2c 87       	std	Y+12, r18	; 0x0c
    2088:	93 d0       	rcall	.+294    	; 0x21b0 <fputc>
    208a:	73 94       	inc	r7
    208c:	2c 85       	ldd	r18, Y+12	; 0x0c
    208e:	f6 cf       	rjmp	.-20     	; 0x207c <vfprintf+0x2e0>
    2090:	73 14       	cp	r7, r3
    2092:	10 f4       	brcc	.+4      	; 0x2098 <vfprintf+0x2fc>
    2094:	37 18       	sub	r3, r7
    2096:	01 c0       	rjmp	.+2      	; 0x209a <vfprintf+0x2fe>
    2098:	31 2c       	mov	r3, r1
    209a:	24 ff       	sbrs	r18, 4
    209c:	11 c0       	rjmp	.+34     	; 0x20c0 <vfprintf+0x324>
    209e:	b7 01       	movw	r22, r14
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	2c 87       	std	Y+12, r18	; 0x0c
    20a6:	84 d0       	rcall	.+264    	; 0x21b0 <fputc>
    20a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20aa:	22 ff       	sbrs	r18, 2
    20ac:	16 c0       	rjmp	.+44     	; 0x20da <vfprintf+0x33e>
    20ae:	21 ff       	sbrs	r18, 1
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <vfprintf+0x31c>
    20b2:	88 e5       	ldi	r24, 0x58	; 88
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <vfprintf+0x320>
    20b8:	88 e7       	ldi	r24, 0x78	; 120
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	b7 01       	movw	r22, r14
    20be:	0c c0       	rjmp	.+24     	; 0x20d8 <vfprintf+0x33c>
    20c0:	82 2f       	mov	r24, r18
    20c2:	86 78       	andi	r24, 0x86	; 134
    20c4:	51 f0       	breq	.+20     	; 0x20da <vfprintf+0x33e>
    20c6:	21 fd       	sbrc	r18, 1
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <vfprintf+0x332>
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <vfprintf+0x334>
    20ce:	8b e2       	ldi	r24, 0x2B	; 43
    20d0:	27 fd       	sbrc	r18, 7
    20d2:	8d e2       	ldi	r24, 0x2D	; 45
    20d4:	b7 01       	movw	r22, r14
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	6b d0       	rcall	.+214    	; 0x21b0 <fputc>
    20da:	a5 14       	cp	r10, r5
    20dc:	30 f4       	brcc	.+12     	; 0x20ea <vfprintf+0x34e>
    20de:	b7 01       	movw	r22, r14
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	65 d0       	rcall	.+202    	; 0x21b0 <fputc>
    20e6:	5a 94       	dec	r5
    20e8:	f8 cf       	rjmp	.-16     	; 0x20da <vfprintf+0x33e>
    20ea:	aa 94       	dec	r10
    20ec:	f4 01       	movw	r30, r8
    20ee:	ea 0d       	add	r30, r10
    20f0:	f1 1d       	adc	r31, r1
    20f2:	80 81       	ld	r24, Z
    20f4:	b7 01       	movw	r22, r14
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	5b d0       	rcall	.+182    	; 0x21b0 <fputc>
    20fa:	a1 10       	cpse	r10, r1
    20fc:	f6 cf       	rjmp	.-20     	; 0x20ea <vfprintf+0x34e>
    20fe:	33 20       	and	r3, r3
    2100:	09 f4       	brne	.+2      	; 0x2104 <vfprintf+0x368>
    2102:	5d ce       	rjmp	.-838    	; 0x1dbe <vfprintf+0x22>
    2104:	b7 01       	movw	r22, r14
    2106:	80 e2       	ldi	r24, 0x20	; 32
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	52 d0       	rcall	.+164    	; 0x21b0 <fputc>
    210c:	3a 94       	dec	r3
    210e:	f7 cf       	rjmp	.-18     	; 0x20fe <vfprintf+0x362>
    2110:	f7 01       	movw	r30, r14
    2112:	86 81       	ldd	r24, Z+6	; 0x06
    2114:	97 81       	ldd	r25, Z+7	; 0x07
    2116:	02 c0       	rjmp	.+4      	; 0x211c <vfprintf+0x380>
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	9f ef       	ldi	r25, 0xFF	; 255
    211c:	2c 96       	adiw	r28, 0x0c	; 12
    211e:	e2 e1       	ldi	r30, 0x12	; 18
    2120:	1f c1       	rjmp	.+574    	; 0x2360 <__epilogue_restores__>

00002122 <calloc>:
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	86 9f       	mul	r24, r22
    212c:	80 01       	movw	r16, r0
    212e:	87 9f       	mul	r24, r23
    2130:	10 0d       	add	r17, r0
    2132:	96 9f       	mul	r25, r22
    2134:	10 0d       	add	r17, r0
    2136:	11 24       	eor	r1, r1
    2138:	c8 01       	movw	r24, r16
    213a:	07 dc       	rcall	.-2034   	; 0x194a <malloc>
    213c:	ec 01       	movw	r28, r24
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	21 f0       	breq	.+8      	; 0x214a <calloc+0x28>
    2142:	a8 01       	movw	r20, r16
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	11 d0       	rcall	.+34     	; 0x216c <memset>
    214a:	ce 01       	movw	r24, r28
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	08 95       	ret

00002156 <strnlen_P>:
    2156:	fc 01       	movw	r30, r24
    2158:	05 90       	lpm	r0, Z+
    215a:	61 50       	subi	r22, 0x01	; 1
    215c:	70 40       	sbci	r23, 0x00	; 0
    215e:	01 10       	cpse	r0, r1
    2160:	d8 f7       	brcc	.-10     	; 0x2158 <strnlen_P+0x2>
    2162:	80 95       	com	r24
    2164:	90 95       	com	r25
    2166:	8e 0f       	add	r24, r30
    2168:	9f 1f       	adc	r25, r31
    216a:	08 95       	ret

0000216c <memset>:
    216c:	dc 01       	movw	r26, r24
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <memset+0x6>
    2170:	6d 93       	st	X+, r22
    2172:	41 50       	subi	r20, 0x01	; 1
    2174:	50 40       	sbci	r21, 0x00	; 0
    2176:	e0 f7       	brcc	.-8      	; 0x2170 <memset+0x4>
    2178:	08 95       	ret

0000217a <strnlen>:
    217a:	fc 01       	movw	r30, r24
    217c:	61 50       	subi	r22, 0x01	; 1
    217e:	70 40       	sbci	r23, 0x00	; 0
    2180:	01 90       	ld	r0, Z+
    2182:	01 10       	cpse	r0, r1
    2184:	d8 f7       	brcc	.-10     	; 0x217c <strnlen+0x2>
    2186:	80 95       	com	r24
    2188:	90 95       	com	r25
    218a:	8e 0f       	add	r24, r30
    218c:	9f 1f       	adc	r25, r31
    218e:	08 95       	ret

00002190 <strrev>:
    2190:	dc 01       	movw	r26, r24
    2192:	fc 01       	movw	r30, r24
    2194:	67 2f       	mov	r22, r23
    2196:	71 91       	ld	r23, Z+
    2198:	77 23       	and	r23, r23
    219a:	e1 f7       	brne	.-8      	; 0x2194 <strrev+0x4>
    219c:	32 97       	sbiw	r30, 0x02	; 2
    219e:	04 c0       	rjmp	.+8      	; 0x21a8 <strrev+0x18>
    21a0:	7c 91       	ld	r23, X
    21a2:	6d 93       	st	X+, r22
    21a4:	70 83       	st	Z, r23
    21a6:	62 91       	ld	r22, -Z
    21a8:	ae 17       	cp	r26, r30
    21aa:	bf 07       	cpc	r27, r31
    21ac:	c8 f3       	brcs	.-14     	; 0x21a0 <strrev+0x10>
    21ae:	08 95       	ret

000021b0 <fputc>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	18 2f       	mov	r17, r24
    21ba:	09 2f       	mov	r16, r25
    21bc:	eb 01       	movw	r28, r22
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	81 fd       	sbrc	r24, 1
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <fputc+0x1a>
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	9f ef       	ldi	r25, 0xFF	; 255
    21c8:	20 c0       	rjmp	.+64     	; 0x220a <fputc+0x5a>
    21ca:	82 ff       	sbrs	r24, 2
    21cc:	10 c0       	rjmp	.+32     	; 0x21ee <fputc+0x3e>
    21ce:	4e 81       	ldd	r20, Y+6	; 0x06
    21d0:	5f 81       	ldd	r21, Y+7	; 0x07
    21d2:	2c 81       	ldd	r18, Y+4	; 0x04
    21d4:	3d 81       	ldd	r19, Y+5	; 0x05
    21d6:	42 17       	cp	r20, r18
    21d8:	53 07       	cpc	r21, r19
    21da:	7c f4       	brge	.+30     	; 0x21fa <fputc+0x4a>
    21dc:	e8 81       	ld	r30, Y
    21de:	f9 81       	ldd	r31, Y+1	; 0x01
    21e0:	9f 01       	movw	r18, r30
    21e2:	2f 5f       	subi	r18, 0xFF	; 255
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	39 83       	std	Y+1, r19	; 0x01
    21e8:	28 83       	st	Y, r18
    21ea:	10 83       	st	Z, r17
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <fputc+0x4a>
    21ee:	e8 85       	ldd	r30, Y+8	; 0x08
    21f0:	f9 85       	ldd	r31, Y+9	; 0x09
    21f2:	81 2f       	mov	r24, r17
    21f4:	09 95       	icall
    21f6:	89 2b       	or	r24, r25
    21f8:	29 f7       	brne	.-54     	; 0x21c4 <fputc+0x14>
    21fa:	2e 81       	ldd	r18, Y+6	; 0x06
    21fc:	3f 81       	ldd	r19, Y+7	; 0x07
    21fe:	2f 5f       	subi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	3f 83       	std	Y+7, r19	; 0x07
    2204:	2e 83       	std	Y+6, r18	; 0x06
    2206:	81 2f       	mov	r24, r17
    2208:	90 2f       	mov	r25, r16
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <__ultoa_invert>:
    2214:	fa 01       	movw	r30, r20
    2216:	aa 27       	eor	r26, r26
    2218:	28 30       	cpi	r18, 0x08	; 8
    221a:	51 f1       	breq	.+84     	; 0x2270 <__ultoa_invert+0x5c>
    221c:	20 31       	cpi	r18, 0x10	; 16
    221e:	81 f1       	breq	.+96     	; 0x2280 <__ultoa_invert+0x6c>
    2220:	e8 94       	clt
    2222:	6f 93       	push	r22
    2224:	6e 7f       	andi	r22, 0xFE	; 254
    2226:	6e 5f       	subi	r22, 0xFE	; 254
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	8f 4f       	sbci	r24, 0xFF	; 255
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	af 4f       	sbci	r26, 0xFF	; 255
    2230:	b1 e0       	ldi	r27, 0x01	; 1
    2232:	3e d0       	rcall	.+124    	; 0x22b0 <__ultoa_invert+0x9c>
    2234:	b4 e0       	ldi	r27, 0x04	; 4
    2236:	3c d0       	rcall	.+120    	; 0x22b0 <__ultoa_invert+0x9c>
    2238:	67 0f       	add	r22, r23
    223a:	78 1f       	adc	r23, r24
    223c:	89 1f       	adc	r24, r25
    223e:	9a 1f       	adc	r25, r26
    2240:	a1 1d       	adc	r26, r1
    2242:	68 0f       	add	r22, r24
    2244:	79 1f       	adc	r23, r25
    2246:	8a 1f       	adc	r24, r26
    2248:	91 1d       	adc	r25, r1
    224a:	a1 1d       	adc	r26, r1
    224c:	6a 0f       	add	r22, r26
    224e:	71 1d       	adc	r23, r1
    2250:	81 1d       	adc	r24, r1
    2252:	91 1d       	adc	r25, r1
    2254:	a1 1d       	adc	r26, r1
    2256:	20 d0       	rcall	.+64     	; 0x2298 <__ultoa_invert+0x84>
    2258:	09 f4       	brne	.+2      	; 0x225c <__ultoa_invert+0x48>
    225a:	68 94       	set
    225c:	3f 91       	pop	r19
    225e:	2a e0       	ldi	r18, 0x0A	; 10
    2260:	26 9f       	mul	r18, r22
    2262:	11 24       	eor	r1, r1
    2264:	30 19       	sub	r19, r0
    2266:	30 5d       	subi	r19, 0xD0	; 208
    2268:	31 93       	st	Z+, r19
    226a:	de f6       	brtc	.-74     	; 0x2222 <__ultoa_invert+0xe>
    226c:	cf 01       	movw	r24, r30
    226e:	08 95       	ret
    2270:	46 2f       	mov	r20, r22
    2272:	47 70       	andi	r20, 0x07	; 7
    2274:	40 5d       	subi	r20, 0xD0	; 208
    2276:	41 93       	st	Z+, r20
    2278:	b3 e0       	ldi	r27, 0x03	; 3
    227a:	0f d0       	rcall	.+30     	; 0x229a <__ultoa_invert+0x86>
    227c:	c9 f7       	brne	.-14     	; 0x2270 <__ultoa_invert+0x5c>
    227e:	f6 cf       	rjmp	.-20     	; 0x226c <__ultoa_invert+0x58>
    2280:	46 2f       	mov	r20, r22
    2282:	4f 70       	andi	r20, 0x0F	; 15
    2284:	40 5d       	subi	r20, 0xD0	; 208
    2286:	4a 33       	cpi	r20, 0x3A	; 58
    2288:	18 f0       	brcs	.+6      	; 0x2290 <__ultoa_invert+0x7c>
    228a:	49 5d       	subi	r20, 0xD9	; 217
    228c:	31 fd       	sbrc	r19, 1
    228e:	40 52       	subi	r20, 0x20	; 32
    2290:	41 93       	st	Z+, r20
    2292:	02 d0       	rcall	.+4      	; 0x2298 <__ultoa_invert+0x84>
    2294:	a9 f7       	brne	.-22     	; 0x2280 <__ultoa_invert+0x6c>
    2296:	ea cf       	rjmp	.-44     	; 0x226c <__ultoa_invert+0x58>
    2298:	b4 e0       	ldi	r27, 0x04	; 4
    229a:	a6 95       	lsr	r26
    229c:	97 95       	ror	r25
    229e:	87 95       	ror	r24
    22a0:	77 95       	ror	r23
    22a2:	67 95       	ror	r22
    22a4:	ba 95       	dec	r27
    22a6:	c9 f7       	brne	.-14     	; 0x229a <__ultoa_invert+0x86>
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	61 05       	cpc	r22, r1
    22ac:	71 05       	cpc	r23, r1
    22ae:	08 95       	ret
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	0a 2e       	mov	r0, r26
    22b6:	06 94       	lsr	r0
    22b8:	57 95       	ror	r21
    22ba:	47 95       	ror	r20
    22bc:	37 95       	ror	r19
    22be:	27 95       	ror	r18
    22c0:	ba 95       	dec	r27
    22c2:	c9 f7       	brne	.-14     	; 0x22b6 <__ultoa_invert+0xa2>
    22c4:	62 0f       	add	r22, r18
    22c6:	73 1f       	adc	r23, r19
    22c8:	84 1f       	adc	r24, r20
    22ca:	95 1f       	adc	r25, r21
    22cc:	a0 1d       	adc	r26, r0
    22ce:	08 95       	ret

000022d0 <__divmodsi4>:
    22d0:	05 2e       	mov	r0, r21
    22d2:	97 fb       	bst	r25, 7
    22d4:	16 f4       	brtc	.+4      	; 0x22da <__divmodsi4+0xa>
    22d6:	00 94       	com	r0
    22d8:	0f d0       	rcall	.+30     	; 0x22f8 <__negsi2>
    22da:	57 fd       	sbrc	r21, 7
    22dc:	05 d0       	rcall	.+10     	; 0x22e8 <__divmodsi4_neg2>
    22de:	5b d0       	rcall	.+182    	; 0x2396 <__udivmodsi4>
    22e0:	07 fc       	sbrc	r0, 7
    22e2:	02 d0       	rcall	.+4      	; 0x22e8 <__divmodsi4_neg2>
    22e4:	46 f4       	brtc	.+16     	; 0x22f6 <__divmodsi4_exit>
    22e6:	08 c0       	rjmp	.+16     	; 0x22f8 <__negsi2>

000022e8 <__divmodsi4_neg2>:
    22e8:	50 95       	com	r21
    22ea:	40 95       	com	r20
    22ec:	30 95       	com	r19
    22ee:	21 95       	neg	r18
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	4f 4f       	sbci	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255

000022f6 <__divmodsi4_exit>:
    22f6:	08 95       	ret

000022f8 <__negsi2>:
    22f8:	90 95       	com	r25
    22fa:	80 95       	com	r24
    22fc:	70 95       	com	r23
    22fe:	61 95       	neg	r22
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	8f 4f       	sbci	r24, 0xFF	; 255
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	08 95       	ret

00002308 <__muluhisi3>:
    2308:	68 d0       	rcall	.+208    	; 0x23da <__umulhisi3>
    230a:	a5 9f       	mul	r26, r21
    230c:	90 0d       	add	r25, r0
    230e:	b4 9f       	mul	r27, r20
    2310:	90 0d       	add	r25, r0
    2312:	a4 9f       	mul	r26, r20
    2314:	80 0d       	add	r24, r0
    2316:	91 1d       	adc	r25, r1
    2318:	11 24       	eor	r1, r1
    231a:	08 95       	ret

0000231c <__mulshisi3>:
    231c:	b7 ff       	sbrs	r27, 7
    231e:	f4 cf       	rjmp	.-24     	; 0x2308 <__muluhisi3>

00002320 <__mulohisi3>:
    2320:	f3 df       	rcall	.-26     	; 0x2308 <__muluhisi3>
    2322:	82 1b       	sub	r24, r18
    2324:	93 0b       	sbc	r25, r19
    2326:	08 95       	ret

00002328 <__prologue_saves__>:
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	ca 1b       	sub	r28, r26
    2352:	db 0b       	sbc	r29, r27
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	09 94       	ijmp

00002360 <__epilogue_restores__>:
    2360:	2a 88       	ldd	r2, Y+18	; 0x12
    2362:	39 88       	ldd	r3, Y+17	; 0x11
    2364:	48 88       	ldd	r4, Y+16	; 0x10
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
    2368:	6e 84       	ldd	r6, Y+14	; 0x0e
    236a:	7d 84       	ldd	r7, Y+13	; 0x0d
    236c:	8c 84       	ldd	r8, Y+12	; 0x0c
    236e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2370:	aa 84       	ldd	r10, Y+10	; 0x0a
    2372:	b9 84       	ldd	r11, Y+9	; 0x09
    2374:	c8 84       	ldd	r12, Y+8	; 0x08
    2376:	df 80       	ldd	r13, Y+7	; 0x07
    2378:	ee 80       	ldd	r14, Y+6	; 0x06
    237a:	fd 80       	ldd	r15, Y+5	; 0x05
    237c:	0c 81       	ldd	r16, Y+4	; 0x04
    237e:	1b 81       	ldd	r17, Y+3	; 0x03
    2380:	aa 81       	ldd	r26, Y+2	; 0x02
    2382:	b9 81       	ldd	r27, Y+1	; 0x01
    2384:	ce 0f       	add	r28, r30
    2386:	d1 1d       	adc	r29, r1
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	ed 01       	movw	r28, r26
    2394:	08 95       	ret

00002396 <__udivmodsi4>:
    2396:	a1 e2       	ldi	r26, 0x21	; 33
    2398:	1a 2e       	mov	r1, r26
    239a:	aa 1b       	sub	r26, r26
    239c:	bb 1b       	sub	r27, r27
    239e:	fd 01       	movw	r30, r26
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <__udivmodsi4_ep>

000023a2 <__udivmodsi4_loop>:
    23a2:	aa 1f       	adc	r26, r26
    23a4:	bb 1f       	adc	r27, r27
    23a6:	ee 1f       	adc	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	a2 17       	cp	r26, r18
    23ac:	b3 07       	cpc	r27, r19
    23ae:	e4 07       	cpc	r30, r20
    23b0:	f5 07       	cpc	r31, r21
    23b2:	20 f0       	brcs	.+8      	; 0x23bc <__udivmodsi4_ep>
    23b4:	a2 1b       	sub	r26, r18
    23b6:	b3 0b       	sbc	r27, r19
    23b8:	e4 0b       	sbc	r30, r20
    23ba:	f5 0b       	sbc	r31, r21

000023bc <__udivmodsi4_ep>:
    23bc:	66 1f       	adc	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	88 1f       	adc	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	1a 94       	dec	r1
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <__udivmodsi4_loop>
    23c8:	60 95       	com	r22
    23ca:	70 95       	com	r23
    23cc:	80 95       	com	r24
    23ce:	90 95       	com	r25
    23d0:	9b 01       	movw	r18, r22
    23d2:	ac 01       	movw	r20, r24
    23d4:	bd 01       	movw	r22, r26
    23d6:	cf 01       	movw	r24, r30
    23d8:	08 95       	ret

000023da <__umulhisi3>:
    23da:	a2 9f       	mul	r26, r18
    23dc:	b0 01       	movw	r22, r0
    23de:	b3 9f       	mul	r27, r19
    23e0:	c0 01       	movw	r24, r0
    23e2:	a3 9f       	mul	r26, r19
    23e4:	70 0d       	add	r23, r0
    23e6:	81 1d       	adc	r24, r1
    23e8:	11 24       	eor	r1, r1
    23ea:	91 1d       	adc	r25, r1
    23ec:	b2 9f       	mul	r27, r18
    23ee:	70 0d       	add	r23, r0
    23f0:	81 1d       	adc	r24, r1
    23f2:	11 24       	eor	r1, r1
    23f4:	91 1d       	adc	r25, r1
    23f6:	08 95       	ret

000023f8 <_exit>:
    23f8:	f8 94       	cli

000023fa <__stop_program>:
    23fa:	ff cf       	rjmp	.-2      	; 0x23fa <__stop_program>
